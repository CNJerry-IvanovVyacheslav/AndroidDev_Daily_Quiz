[
  {
    "id": 1,
    "question": "Which keyword is used to declare a read-only variable in Kotlin?",
    "answer": "val",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "var",
      "const",
      "let",
      "readonly",
      "val"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 2,
    "question": "What is the default visibility modifier for a top-level declaration in Kotlin?",
    "answer": "public",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "private",
      "internal",
      "protected",
      "default",
      "public"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 3,
    "question": "Which of these is a correct way to define a function in Kotlin?",
    "answer": "fun sum(a: Int, b: Int): Int { return a + b }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "function sum(a: Int, b: Int) = a + b",
      "def sum(a: Int, b: Int) { a + b }",
      "fun sum(a: Int, b: Int): Int { return a + b }",
      "func sum(a, b) -> Int { return a + b }",
      "fun sum(a: Int, b: Int) a + b"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 4,
    "question": "How do you define a nullable variable in Kotlin?",
    "answer": "var name: String?",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "var name: String!",
      "var name: String",
      "var name: String?",
      "var name nullable String",
      "var name: nullable String"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 5,
    "question": "Which function is used to safely call a method on a nullable object?",
    "answer": "?.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      ".",
      "!!",
      "?:",
      "?.",
      "safeCall()"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 6,
    "question": "What does the 'lateinit' keyword do?",
    "answer": "Allows a non-null variable to be initialized later",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Declares a lazy variable",
      "Allows a non-null variable to be initialized later",
      "Marks a variable as immutable",
      "Declares a nullable variable",
      "Forces immediate initialization"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 7,
    "question": "Which of these is a correct way to define a singleton object in Kotlin?",
    "answer": "object DatabaseManager",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "class DatabaseManager { static val instance = ... }",
      "object DatabaseManager",
      "singleton DatabaseManager",
      "DatabaseManager.getInstance()",
      "val DatabaseManager = singleton()"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 8,
    "question": "What is the purpose of the 'companion object' in Kotlin?",
    "answer": "To define members belonging to the class rather than instances",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To define a nested class",
      "To define members belonging to the class rather than instances",
      "To define a data class",
      "To implement an interface",
      "To define extension functions"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 9,
    "question": "Which of these keywords is used for inheritance in Kotlin?",
    "answer": "open",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "final",
      "inherit",
      "abstract",
      "open",
      "extends"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 10,
    "question": "Which type of class cannot be inherited in Kotlin?",
    "answer": "final",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "abstract",
      "interface",
      "open",
      "final",
      "sealed"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 11,
    "question": "What is the difference between '=='' and '===' in Kotlin?",
    "answer": "'==' checks structural equality, '===' checks referential equality",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "'==' checks referential equality, '===' checks structural equality",
      "'==' checks structural equality, '===' checks referential equality",
      "They are interchangeable",
      "'==' is for numbers, '===' is for objects",
      "None of the above"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 12,
    "question": "How do you define a data class in Kotlin?",
    "answer": "data class User(val name: String, val age: Int)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "class data User(val name: String, val age: Int)",
      "data class User(val name: String, val age: Int)",
      "data User(val name: String, val age: Int)",
      "User data class(val name: String, val age: Int)",
      "class User data(val name: String, val age: Int)"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 13,
    "question": "Which of these keywords defines a sealed class in Kotlin?",
    "answer": "sealed",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "sealed",
      "open",
      "abstract",
      "final",
      "interface"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 14,
    "question": "What is the result of 'listOf(1,2,3).filter { it > 1 }'?",
    "answer": "[2, 3]",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "[1]",
      "[1,2,3]",
      "[2,3]",
      "[1,3]",
      "Error"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 15,
    "question": "Which Kotlin collection is mutable by default?",
    "answer": "MutableList",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "List",
      "Array",
      "MutableList",
      "Set",
      "Map"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 16,
    "question": "What does 'by lazy' do in Kotlin?",
    "answer": "Initializes the value when first accessed",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Initializes the value immediately",
      "Initializes the value when first accessed",
      "Marks a variable as immutable",
      "Creates a nullable variable",
      "None of the above"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 17,
    "question": "How do you define an extension function?",
    "answer": "fun String.isPalindrome(): Boolean { ... }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "extension fun String.isPalindrome(): Boolean { ... }",
      "fun String.isPalindrome(): Boolean { ... }",
      "fun isPalindrome(str: String): Boolean { ... }",
      "String.fun isPalindrome(): Boolean { ... }",
      "fun String.isPalindrome { ... }"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 18,
    "question": "What is the difference between 'val' and 'var'?",
    "answer": "val is immutable, var is mutable",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "val is mutable, var is immutable",
      "val is immutable, var is mutable",
      "Both are mutable",
      "Both are immutable",
      "None of the above"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 19,
    "question": "Which of these is a correct way to create a singleton using 'object'?",
    "answer": "object Logger { fun log(msg: String) {} }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "class Logger { fun log(msg: String) {} }",
      "object Logger { fun log(msg: String) {} }",
      "singleton Logger { fun log(msg: String) {} }",
      "Logger.getInstance()",
      "val Logger = singleton()"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 20,
    "question": "What does the 'is' operator do?",
    "answer": "Checks type at runtime",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Assigns a type",
      "Checks type at runtime",
      "Casts type",
      "Creates a new instance",
      "None of the above"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 21,
    "question": "Which function can be used to launch a coroutine in Kotlin?",
    "answer": "launch",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "startCoroutine",
      "run",
      "launch",
      "asyncBlock",
      "delay"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 22,
    "question": "Which of these is a correct way to create a mutable map?",
    "answer": "mutableMapOf(\"a\" to 1, \"b\" to 2)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "mapOf(\"a\" to 1, \"b\" to 2)",
      "mutableMapOf(\"a\" to 1, \"b\" to 2)",
      "Map(\"a\" -> 1, \"b\" -> 2)",
      "HashMap(\"a\",1,\"b\",2)",
      "mutableMap(\"a\" to 1, \"b\" to 2)"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 23,
    "question": "Which keyword is used to delegate a property in Kotlin?",
    "answer": "by",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "delegate",
      "using",
      "by",
      "with",
      "implements"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 24,
    "question": "What is the type of 'numbers.filter { it % 2 == 0 }' if numbers: List<Int>?",
    "answer": "List<Int>",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "List<Boolean>",
      "List<Int>",
      "Sequence<Int>",
      "Array<Int>",
      "IntArray"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 25,
    "question": "Which of these is a correct way to define a higher-order function?",
    "answer": "fun operate(a: Int, b: Int, op: (Int, Int) -> Int) = op(a, b)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "fun operate(a: Int, b: Int, op: (Int, Int) -> Int) = op(a, b)",
      "fun operate(a: Int, b: Int): (Int, Int) -> Int = op(a, b)",
      "fun operate(a: Int, b: Int, op: Int -> Int) = op(a, b)",
      "fun operate(a: Int, b: Int) op: (Int, Int) -> Int = op(a, b)",
      "operate(a: Int, b: Int, op: (Int, Int) -> Int)"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 26,
    "question": "Which function converts a collection to a sequence in Kotlin?",
    "answer": "asSequence()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "toSequence()",
      "sequenceOf()",
      "asSequence()",
      "toSeq()",
      "seq()"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 27,
    "question": "What happens if you use '!!' on a null variable?",
    "answer": "Throws a KotlinNullPointerException",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Returns null",
      "Throws a KotlinNullPointerException",
      "Assigns a default value",
      "Converts it to zero",
      "No effect"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 28,
    "question": "How do you define an inline function?",
    "answer": "inline fun myFunc() { }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "fun inline myFunc() { }",
      "inline fun myFunc() { }",
      "func inline myFunc() { }",
      "inline function myFunc() { }",
      "myFunc inline fun() { }"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 29,
    "question": "Which of these is a correct way to use a lambda expression?",
    "answer": "listOf(1,2,3).map { it * 2 }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "listOf(1,2,3).map { it * 2 }",
      "map(listOf(1,2,3)) { it * 2 }",
      "listOf(1,2,3).forEach(it * 2)",
      "listOf(1,2,3).lambda(it * 2)",
      "listOf(1,2,3).apply { it * 2 }"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 30,
    "question": "Which keyword is used to define an interface in Kotlin?",
    "answer": "interface",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "interface",
      "abstract",
      "implements",
      "trait",
      "class"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 31,
    "question": "What is a correct way to declare a function with a default parameter value?",
    "answer": "fun greet(name: String = \"Guest\") { ... }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "fun greet(name: String = \"Guest\") { ... }",
      "fun greet(name = \"Guest\") { ... }",
      "fun greet(default name: \"Guest\") { ... }",
      "fun greet(name: String? = \"Guest\") { ... }",
      "fun greet(name = \"Guest\") { ... }"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 32,
    "question": "Which of these creates a range from 1 to 10 inclusive?",
    "answer": "1..10",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "1..10",
      "1 until 10",
      "range(1,10)",
      "1->10",
      "1-10"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 33,
    "question": "Which coroutine builder can be used to return a value?",
    "answer": "async",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "launch",
      "runBlocking",
      "async",
      "delay",
      "suspend"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 34,
    "question": "Which of these is a correct way to implement a sealed class?",
    "answer": "sealed class Expr; class Const(val number: Int) : Expr()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "sealed class Expr; class Const(val number: Int) : Expr()",
      "abstract class Expr; class Const(val number: Int): Expr()",
      "class Expr; sealed class Const(val number: Int) : Expr()",
      "sealed interface Expr; class Const(val number: Int) : Expr()",
      "sealed class Expr(val number: Int)"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 35,
    "question": "What does the 'apply' scope function return?",
    "answer": "The receiver object",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The last expression",
      "The receiver object",
      "Unit",
      "A lambda result",
      "Nothing"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 36,
    "question": "Which operator is known as the Elvis operator in Kotlin?",
    "answer": "?:",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      ":",
      "!!",
      "?:",
      "??",
      "?."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 37,
    "question": "Which of these correctly defines a generic function?",
    "answer": "fun <T> singletonList(item: T): List<T> = listOf(item)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "fun <T> singletonList(item: T): List<T> = listOf(item)",
      "fun singletonList<T>(item: T): List<T> = listOf(item)",
      "fun singletonList(item: T): List<T> = listOf(item)",
      "fun <T> singletonList(item): List<T> = listOf(item)",
      "fun singletonList<T>(item: T) = listOf(item)"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 38,
    "question": "Which of these is a correct way to define an enum class?",
    "answer": "enum class Direction { NORTH, SOUTH, EAST, WEST }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "enum Direction { NORTH, SOUTH }",
      "enum class Direction { NORTH, SOUTH, EAST, WEST }",
      "enum class Direction(NORTH, SOUTH, EAST, WEST)",
      "enum Direction(NORTH, SOUTH)",
      "Direction.enum { NORTH, SOUTH }"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 39,
    "question": "What does 'suspend' keyword indicate?",
    "answer": "Function can be paused and resumed in coroutine",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Function is asynchronous",
      "Function can be paused and resumed in coroutine",
      "Function is deprecated",
      "Function runs on background thread",
      "Function is inline"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 40,
    "question": "Which function is used to launch a coroutine and block current thread until it completes?",
    "answer": "runBlocking",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "launch",
      "async",
      "delay",
      "runBlocking",
      "withContext"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 41,
    "question": "Which of these can throw ConcurrentModificationException in Kotlin?",
    "answer": "Iterating a mutable collection while modifying it",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Iterating an immutable collection",
      "Iterating a mutable collection while modifying it",
      "Filtering a list",
      "Sorting a list",
      "Mapping a list"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 42,
    "question": "Which of these is a correct example of a lambda with receiver?",
    "answer": "val result = buildString { append(\"Hello\") }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "val result = buildString { append(\"Hello\") }",
      "val result = { receiver -> append(\"Hello\") }",
      "val result = { this.append(\"Hello\") }",
      "val result = lambda { append(\"Hello\") }",
      "val result = run { append(\"Hello\") }"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 43,
    "question": "Which of these is used to check null and provide default value?",
    "answer": "?:",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "!!",
      "as?",
      "?:",
      "?.",
      "ifnull"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 44,
    "question": "How to declare a typealias in Kotlin?",
    "answer": "typealias UserMap = Map<String, User>",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "alias UserMap = Map<String, User>",
      "typealias UserMap = Map<String, User>",
      "typedef UserMap = Map<String, User>",
      "using UserMap = Map<String, User>",
      "type UserMap = Map<String, User>"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 45,
    "question": "Which scope function returns the last expression and provides 'this' as the context object?",
    "answer": "run",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "apply",
      "let",
      "with",
      "run",
      "also"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 46,
    "question": "Which function is used to launch a coroutine on the IO dispatcher?",
    "answer": "withContext(Dispatchers.IO) { ... }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "launch(IO) { ... }",
      "runBlocking(IO) { ... }",
      "async(IO) { ... }",
      "withContext(Dispatchers.IO) { ... }",
      "launch { Dispatchers.IO }"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 47,
    "question": "Which of these is a correct way to sort a list descending?",
    "answer": "list.sortedDescending()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "list.sortDescending()",
      "list.sortedDescending()",
      "list.orderByDescending()",
      "list.sortedByDescending()",
      "list.descending()"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 48,
    "question": "Which of these correctly destructures a data class?",
    "answer": "val (name, age) = user",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "val name, age = user",
      "val (name, age) = user",
      "val name = user.name, age = user.age",
      "val (user.name, user.age)",
      "destructure(user)"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 49,
    "question": "Which of these creates an immutable list?",
    "answer": "listOf(1,2,3)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "mutableListOf(1,2,3)",
      "arrayListOf(1,2,3)",
      "listOf(1,2,3)",
      "List(1,2,3)",
      "ImmutableList(1,2,3)"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 50,
    "question": "Which of these is the correct syntax for a when expression?",
    "answer": "when(x) { 1 -> print(\"One\") else -> print(\"Other\") }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "switch(x) { case 1: print(\"One\") default: print(\"Other\") }",
      "when(x) { 1 -> print(\"One\") else -> print(\"Other\") }",
      "when(x) { case 1 -> print(\"One\") default -> print(\"Other\") }",
      "when x { 1 -> print(\"One\") else -> print(\"Other\") }",
      "when { x==1 -> print(\"One\") else -> print(\"Other\") }"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 51,
    "question": "Which class is used to store UI-related data that survives configuration changes?",
    "answer": "ViewModel",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LiveData",
      "Repository",
      "Activity",
      "ViewModel",
      "Service"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 52,
    "question": "Which Kotlin Flow type can emit events to multiple collectors?",
    "answer": "SharedFlow",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LiveData",
      "StateFlow",
      "Flow",
      "SharedFlow",
      "MutableLiveData"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 53,
    "question": "Which Jetpack library is used for navigation between destinations?",
    "answer": "Navigation Component",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Navigation Component",
      "Paging",
      "WorkManager",
      "DataStore",
      "Room"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 54,
    "question": "What is Safe Args used for?",
    "answer": "Type-safe argument passing between destinations",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Database queries",
      "Type-safe argument passing between destinations",
      "Networking",
      "Dependency Injection",
      "UI testing"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 55,
    "question": "Which component can perform background tasks with constraints like network availability?",
    "answer": "WorkManager",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Service",
      "IntentService",
      "WorkManager",
      "Thread",
      "Handler"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 56,
    "question": "Which Jetpack component is lifecycle-aware and can observe Activity/Fragment lifecycle?",
    "answer": "LifecycleObserver",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LiveData",
      "ViewModel",
      "LifecycleObserver",
      "CoroutineScope",
      "Repository"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 57,
    "question": "Which class provides a reactive data holder that updates the UI automatically?",
    "answer": "LiveData",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LiveData",
      "StateFlow",
      "MutableState",
      "Flow",
      "ViewModel"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 58,
    "question": "Which component is recommended for paging large datasets in RecyclerView?",
    "answer": "Paging",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Room",
      "Paging",
      "DataStore",
      "WorkManager",
      "Navigation"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 59,
    "question": "Which Jetpack component is designed for asynchronous local data storage?",
    "answer": "DataStore",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "SharedPreferences",
      "DataStore",
      "Room",
      "SQLiteDatabase",
      "ContentProvider"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 60,
    "question": "Which annotation defines a database entity in Room?",
    "answer": "@Entity",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Entity",
      "@Database",
      "@Dao",
      "@Module",
      "@Provides"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 61,
    "question": "Which annotation defines a Data Access Object (DAO) in Room?",
    "answer": "@Dao",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Dao",
      "@Entity",
      "@Database",
      "@Repository",
      "@Inject"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 62,
    "question": "Which component provides lifecycle-aware coroutine scopes tied to ViewModel?",
    "answer": "viewModelScope",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "lifecycleScope",
      "GlobalScope",
      "viewModelScope",
      "runBlocking",
      "CoroutineScope"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 63,
    "question": "Which annotation is used to mark a Room database class?",
    "answer": "@Database",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Entity",
      "@Database",
      "@Dao",
      "@Module",
      "@Provides"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 64,
    "question": "Which class allows you to observe database changes reactively?",
    "answer": "Flow or LiveData from DAO",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Cursor",
      "Flow or LiveData from DAO",
      "PagingSource",
      "WorkManager",
      "ViewModel"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 65,
    "question": "Which component allows navigation to destinations using deep links?",
    "answer": "Navigation Component",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Intent",
      "Navigation Component",
      "Activity",
      "BroadcastReceiver",
      "Service"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 66,
    "question": "Which design pattern is commonly used to ensure that only one instance of a repository exists throughout the app?",
    "answer": "Singleton Repository",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "ViewModel",
      "LiveData",
      "Singleton Repository",
      "WorkManager",
      "Service"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 67,
    "question": "Which component is used to schedule deferred, periodic, or one-off tasks?",
    "answer": "WorkManager",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Service",
      "Thread",
      "Handler",
      "WorkManager",
      "Coroutine"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 68,
    "question": "Which Jetpack component automatically handles configuration changes?",
    "answer": "ViewModel",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Activity",
      "Fragment",
      "ViewModel",
      "LiveData",
      "Service"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 69,
    "question": "Which Kotlin Flow type holds a current value and emits it to new collectors immediately?",
    "answer": "StateFlow",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "SharedFlow",
      "Flow",
      "LiveData",
      "StateFlow",
      "Channel"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 70,
    "question": "Which annotation is used to inject dependencies in Hilt/Dagger for Jetpack components?",
    "answer": "@Inject",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Provides",
      "@Module",
      "@Singleton",
      "@Inject",
      "@Component"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 71,
    "question": "Which annotation defines a Hilt module?",
    "answer": "@Module",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Module",
      "@Provides",
      "@Inject",
      "@Singleton",
      "@Component"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 72,
    "question": "Which annotation marks a class as a singleton in Hilt/Dagger?",
    "answer": "@Singleton",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Singleton",
      "@Module",
      "@Inject",
      "@Provides",
      "@Component"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 73,
    "question": "Which class in Jetpack handles UI-related data and survives process death when using SavedStateHandle?",
    "answer": "ViewModel",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Activity",
      "LiveData",
      "ViewModel",
      "Service",
      "Repository"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 74,
    "question": "Which Jetpack component provides reactive streams of data for UI updates?",
    "answer": "LiveData or Flow",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LiveData or Flow",
      "ViewModel",
      "Service",
      "Handler",
      "BroadcastReceiver"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 75,
    "question": "Which Jetpack component supports type-safe navigation arguments?",
    "answer": "Safe Args",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Intent extras",
      "Bundle",
      "Safe Args",
      "SharedPreferences",
      "Navigation Graph"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 76,
    "question": "Which component is lifecycle-aware and cancels coroutines when the lifecycle is destroyed?",
    "answer": "lifecycleScope",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "GlobalScope",
      "viewModelScope",
      "lifecycleScope",
      "runBlocking",
      "CoroutineScope"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 77,
    "question": "Which Jetpack component is recommended for background work that must survive app restarts?",
    "answer": "WorkManager",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Service",
      "IntentService",
      "WorkManager",
      "Thread",
      "CoroutineScope"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 78,
    "question": "Which annotation is used to provide a dependency in Hilt?",
    "answer": "@Provides",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Provides",
      "@Inject",
      "@Module",
      "@Singleton",
      "@Component"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 79,
    "question": "Which component provides a single source of truth for app data?",
    "answer": "Repository",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "ViewModel",
      "LiveData",
      "Repository",
      "Service",
      "DataStore"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 80,
    "question": "Which Jetpack library is used to observe and manage lifecycle-aware components in UI?",
    "answer": "Lifecycle",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Navigation",
      "Paging",
      "Lifecycle",
      "DataStore",
      "WorkManager"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 81,
    "question": "Which class provides a reactive, read-only state for UI in Jetpack?",
    "answer": "StateFlow",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LiveData",
      "StateFlow",
      "SharedFlow",
      "Flow",
      "MutableStateFlow"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 82,
    "question": "Which Jetpack component allows scheduling one-time or periodic background tasks easily?",
    "answer": "WorkManager",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Handler",
      "Service",
      "WorkManager",
      "BroadcastReceiver",
      "ThreadPoolExecutor"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 83,
    "question": "Which annotation is used in Room to define SQL queries in a DAO?",
    "answer": "@Query",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Query",
      "@Insert",
      "@Update",
      "@Delete",
      "@Dao"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 84,
    "question": "Which Jetpack component handles safe and efficient pagination of data?",
    "answer": "Paging",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "DataStore",
      "Paging",
      "Room",
      "WorkManager",
      "LiveData"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 85,
    "question": "Which component allows storing simple key-value pairs asynchronously?",
    "answer": "DataStore",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "SharedPreferences",
      "Room",
      "DataStore",
      "SQLiteDatabase",
      "Repository"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 86,
    "question": "Which Jetpack component observes lifecycle changes and performs actions accordingly?",
    "answer": "LifecycleObserver",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LifecycleOwner",
      "ViewModel",
      "LifecycleObserver",
      "LiveData",
      "Service"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 87,
    "question": "Which method in ViewModel allows launching coroutines tied to ViewModel lifecycle?",
    "answer": "viewModelScope.launch { ... }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "GlobalScope.launch { ... }",
      "lifecycleScope.launch { ... }",
      "viewModelScope.launch { ... }",
      "runBlocking { ... }",
      "CoroutineScope.launch { ... }"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 88,
    "question": "Which Jetpack component provides reactive updates to UI when database changes?",
    "answer": "Flow from Room DAO",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LiveData",
      "Flow from Room DAO",
      "PagingSource",
      "Repository",
      "ViewModel"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 89,
    "question": "Which annotation is used to mark a Hilt component interface?",
    "answer": "@Component",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Inject",
      "@Module",
      "@Provides",
      "@Singleton",
      "@Component"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 90,
    "question": "Which Jetpack library allows observing changes to a data stream in UI?",
    "answer": "LiveData or StateFlow",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Flow only",
      "LiveData or StateFlow",
      "Repository only",
      "DataStore only",
      "Paging only"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 91,
    "question": "Which Jetpack component is responsible for handling arguments passed to a Fragment safely?",
    "answer": "Safe Args",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Bundle",
      "Intent",
      "Safe Args",
      "SharedPreferences",
      "ViewModel"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 92,
    "question": "Which Jetpack library allows type-safe navigation using NavController?",
    "answer": "Navigation Component",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Navigation Component",
      "LiveData",
      "ViewModel",
      "WorkManager",
      "DataStore"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 93,
    "question": "Which component is recommended for handling periodic background tasks that must survive process death?",
    "answer": "WorkManager",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Handler",
      "Service",
      "WorkManager",
      "AlarmManager",
      "CoroutineScope"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 94,
    "question": "Which class in Jetpack stores reactive state for UI that can be collected using collectAsState() in Compose?",
    "answer": "StateFlow",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LiveData",
      "StateFlow",
      "SharedFlow",
      "MutableState",
      "Flow"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 95,
    "question": "Which annotation in Hilt marks a constructor to be injected?",
    "answer": "@Inject",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Provides",
      "@Inject",
      "@Module",
      "@Singleton",
      "@Component"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 96,
    "question": "Which component is recommended as a single source of truth for app data?",
    "answer": "Repository",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "ViewModel",
      "Repository",
      "LiveData",
      "Service",
      "DataStore"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 97,
    "question": "Which annotation in Hilt defines reusable provider functions?",
    "answer": "@Provides",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Module",
      "@Provides",
      "@Singleton",
      "@Inject",
      "@Component"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 98,
    "question": "Which Jetpack component cancels coroutines automatically when the lifecycle is destroyed?",
    "answer": "lifecycleScope",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "viewModelScope",
      "lifecycleScope",
      "GlobalScope",
      "runBlocking",
      "CoroutineScope"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 99,
    "question": "Which annotation defines a database entity in Room?",
    "answer": "@Entity",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Entity",
      "@Database",
      "@Dao",
      "@Module",
      "@Provides"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 100,
    "question": "Which annotation defines a DAO in Room?",
    "answer": "@Dao",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Dao",
      "@Entity",
      "@Database",
      "@Repository",
      "@Inject"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 101,
    "question": "Which Compose layout arranges its children vertically?",
    "answer": "Column",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Row",
      "Column",
      "Box",
      "LazyColumn",
      "ConstraintLayout"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 102,
    "question": "Which Compose layout arranges its children horizontally?",
    "answer": "Row",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Row",
      "Column",
      "Box",
      "LazyRow",
      "ConstraintLayout"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 103,
    "question": "Which Compose layout allows stacking children on top of each other?",
    "answer": "Box",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Column",
      "Row",
      "Box",
      "LazyColumn",
      "Stack"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 104,
    "question": "Which Compose layout efficiently displays a vertically scrolling list?",
    "answer": "LazyColumn",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Column",
      "Row",
      "LazyColumn",
      "Box",
      "ScrollView"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 105,
    "question": "Which Compose layout efficiently displays a horizontally scrolling list?",
    "answer": "LazyRow",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Row",
      "LazyRow",
      "Column",
      "Box",
      "ScrollView"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 106,
    "question": "Which function allows remembering a state across recompositions?",
    "answer": "remember",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "mutableStateOf",
      "remember",
      "derivedStateOf",
      "rememberCoroutineScope",
      "stateOf"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 107,
    "question": "Which function creates a mutable state in Compose?",
    "answer": "mutableStateOf",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "mutableStateOf",
      "remember",
      "stateFlowOf",
      "collectAsState",
      "derivedStateOf"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 108,
    "question": "Which function derives a state from other states without creating recomposition loops?",
    "answer": "derivedStateOf",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "mutableStateOf",
      "remember",
      "derivedStateOf",
      "collectAsState",
      "snapshotFlow"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 109,
    "question": "Which function converts a Flow into Compose state?",
    "answer": "collectAsState()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "collect()",
      "collectAsState()",
      "stateFlowOf()",
      "rememberFlow()",
      "launchIn()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 110,
    "question": "Which annotation allows previewing a Composable in Android Studio?",
    "answer": "@Preview",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Composable",
      "@Preview",
      "@DesignTime",
      "@ShowPreview",
      "@Render"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 111,
    "question": "Which Compose component provides a standard top app bar?",
    "answer": "TopAppBar",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "TopAppBar",
      "AppBar",
      "Scaffold",
      "Toolbar",
      "Surface"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 112,
    "question": "Which Compose component provides a structure with top bar, bottom bar, floating action button, and content slot?",
    "answer": "Scaffold",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Surface",
      "Scaffold",
      "Box",
      "Column",
      "TopAppBar"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 113,
    "question": "Which Compose function is used for simple animations of values?",
    "answer": "animate*AsState",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "animate*AsState",
      "rememberInfiniteTransition",
      "Animatable",
      "LaunchedEffect",
      "Transition"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 114,
    "question": "Which Compose function creates an infinite repeating animation?",
    "answer": "rememberInfiniteTransition",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "animate*AsState",
      "rememberInfiniteTransition",
      "Animatable",
      "updateTransition",
      "LaunchedEffect"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 115,
    "question": "Which Compose function allows launching side-effects that depend on specific keys?",
    "answer": "LaunchedEffect",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "SideEffect",
      "remember",
      "LaunchedEffect",
      "DisposableEffect",
      "produceState"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 116,
    "question": "Which Compose function is called after every successful recomposition?",
    "answer": "SideEffect",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "SideEffect",
      "LaunchedEffect",
      "DisposableEffect",
      "remember",
      "derivedStateOf"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 117,
    "question": "Which Compose function handles clean-up when keys change or Composable leaves composition?",
    "answer": "DisposableEffect",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "DisposableEffect",
      "LaunchedEffect",
      "SideEffect",
      "remember",
      "derivedStateOf"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 118,
    "question": "Which Compose function allows producing state from a suspending block?",
    "answer": "produceState",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "produceState",
      "LaunchedEffect",
      "remember",
      "mutableStateOf",
      "derivedStateOf"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 119,
    "question": "Which Compose principle ensures UI updates automatically when state changes?",
    "answer": "Recomposition",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "SideEffect",
      "Snapshot",
      "Recomposition",
      "Coroutine",
      "DerivedState"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 120,
    "question": "Which function in Compose can be used to collect a StateFlow as state for UI?",
    "answer": "collectAsState()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "collect()",
      "collectAsState()",
      "remember",
      "derivedStateOf",
      "snapshotFlow()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 121,
    "question": "Which Compose modifier sets padding around a Composable?",
    "answer": "Modifier.padding()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Modifier.margin()",
      "Modifier.padding()",
      "Modifier.size()",
      "Modifier.fillMaxSize()",
      "Modifier.offset()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 122,
    "question": "Which Compose modifier makes a Composable fill maximum available width?",
    "answer": "Modifier.fillMaxWidth()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Modifier.fillMaxHeight()",
      "Modifier.fillMaxSize()",
      "Modifier.fillMaxWidth()",
      "Modifier.wrapContentWidth()",
      "Modifier.wrapContentSize()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 123,
    "question": "Which Compose modifier makes a Composable fill maximum available height?",
    "answer": "Modifier.fillMaxHeight()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Modifier.fillMaxHeight()",
      "Modifier.fillMaxWidth()",
      "Modifier.fillMaxSize()",
      "Modifier.wrapContentHeight()",
      "Modifier.wrapContentSize()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 124,
    "question": "Which Compose modifier makes a Composable fill both width and height?",
    "answer": "Modifier.fillMaxSize()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Modifier.fillMaxWidth()",
      "Modifier.fillMaxHeight()",
      "Modifier.fillMaxSize()",
      "Modifier.wrapContentSize()",
      "Modifier.size()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 125,
    "question": "Which composable is used to add space between other composables inside a layout?",
    "answer": "Spacer()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Modifier.spacing()",
      "Spacer()",
      "Modifier.offset()",
      "Margin()",
      "Modifier.gap()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 126,
    "question": "Which Compose layout arranges items in a staggered scrolling vertical list?",
    "answer": "LazyVerticalStaggeredGrid",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LazyColumn",
      "LazyRow",
      "LazyVerticalGrid",
      "Column",
      "LazyVerticalStaggeredGrid"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 127,
    "question": "Which Compose function previews a Composable in dark theme?",
    "answer": "@Preview(uiMode = Configuration.UI_MODE_NIGHT_YES)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Preview(uiMode = Configuration.UI_MODE_NIGHT_YES)",
      "@Preview(darkTheme = true)",
      "@Preview(theme = DarkTheme)",
      "@Preview(isDark = true)",
      "@Preview(theme = Night)"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 128,
    "question": "Which Compose function allows defining a custom scrollable container?",
    "answer": "verticalScroll()/horizontalScroll()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "scrollable()",
      "verticalScroll()/horizontalScroll()",
      "LazyColumn",
      "BoxScroll",
      "ScrollContainer()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 129,
    "question": "Which Compose function is used to observe a StateFlow in a Composable and trigger recomposition?",
    "answer": "collectAsState()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "collect()",
      "collectAsState()",
      "remember",
      "snapshotFlow()",
      "derivedStateOf"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 130,
    "question": "Which Compose function allows creating gesture-detectable elements like drag and tap?",
    "answer": "Modifier.pointerInput()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Modifier.gesture()",
      "Modifier.pointerInput()",
      "Modifier.clickable()",
      "Modifier.touch()",
      "Modifier.detectTap()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 131,
    "question": "Which Compose function animates a color or size value based on state change?",
    "answer": "animate*AsState",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "transition()",
      "animate*AsState",
      "updateTransition()",
      "rememberInfiniteTransition",
      "Animatable"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 132,
    "question": "Which Compose function is used for creating animated visibility transitions?",
    "answer": "AnimatedVisibility",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "AnimatedContent",
      "AnimatedVisibility",
      "updateTransition",
      "rememberInfiniteTransition",
      "Animatable"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 133,
    "question": "Which Compose function creates a custom animation specification?",
    "answer": "tween(), spring(), keyframes()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "tween(), spring(), keyframes()",
      "animate()",
      "animateValue()",
      "AnimSpec()",
      "transitionSpec()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 134,
    "question": "Which Compose function triggers recomposition when a state changes inside a lambda?",
    "answer": "remember { mutableStateOf() }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "remember { mutableStateOf() }",
      "mutableStateOf()",
      "derivedStateOf()",
      "collectAsState()",
      "snapshotFlow()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 135,
    "question": "Which Compose layout aligns children relative to each other using constraints?",
    "answer": "ConstraintLayout",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Box",
      "Column",
      "Row",
      "ConstraintLayout",
      "Scaffold"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 136,
    "question": "Which Compose function allows creating a horizontally scrolling container of items with fixed spacing?",
    "answer": "LazyRow",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LazyColumn",
      "LazyRow",
      "Column",
      "Row",
      "Box"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 137,
    "question": "Which Compose function is used for side-effects that should run on every recomposition?",
    "answer": "SideEffect",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "SideEffect",
      "LaunchedEffect",
      "DisposableEffect",
      "remember",
      "derivedStateOf"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 138,
    "question": "Which Compose function cancels work and cleans up when keys change?",
    "answer": "DisposableEffect",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "DisposableEffect",
      "LaunchedEffect",
      "SideEffect",
      "remember",
      "produceState"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 139,
    "question": "Which Compose principle ensures a composable is recomposed when the observed state changes?",
    "answer": "State-driven UI / Recomposition",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Manual refresh",
      "State-driven UI / Recomposition",
      "Coroutines",
      "SideEffects",
      "SnapshotFlow"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 140,
    "question": "Which Compose function can be used to animate multiple values simultaneously?",
    "answer": "updateTransition()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "animate*AsState",
      "updateTransition()",
      "rememberInfiniteTransition",
      "Animatable",
      "LaunchedEffect"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 141,
    "question": "Which Compose function allows converting a Flow into a state object?",
    "answer": "collectAsState()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "collect()",
      "collectAsState()",
      "rememberFlow()",
      "derivedStateOf",
      "snapshotFlow()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 142,
    "question": "Which Compose function allows launching coroutines scoped to Composable lifecycle?",
    "answer": "rememberCoroutineScope()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "rememberCoroutineScope()",
      "LaunchedEffect",
      "DisposableEffect",
      "SideEffect",
      "produceState"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 143,
    "question": "Which Compose component is used for scrollable tabs?",
    "answer": "ScrollableTabRow",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "TabRow",
      "ScrollableTabRow",
      "LazyRow",
      "Column",
      "Row"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 144,
    "question": "Which Compose function allows observing LiveData as state?",
    "answer": "observeAsState()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "collectAsState()",
      "observeAsState()",
      "rememberLiveData()",
      "derivedStateOf",
      "snapshotFlow()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 145,
    "question": "Which Compose modifier allows applying a background color?",
    "answer": "Modifier.background()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Modifier.background()",
      "Modifier.color()",
      "Modifier.fillMaxSize()",
      "Modifier.surface()",
      "Modifier.themeColor()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 146,
    "question": "Which Compose modifier adds clickable behavior to a Composable?",
    "answer": "Modifier.clickable()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Modifier.pointerInput()",
      "Modifier.clickable()",
      "Modifier.touchable()",
      "Modifier.gesture()",
      "Modifier.tap()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 147,
    "question": "Which Compose modifier allows applying padding around a Composable?",
    "answer": "Modifier.padding()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Modifier.padding()",
      "Modifier.margin()",
      "Modifier.gap()",
      "Modifier.spacing()",
      "Modifier.offset()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 148,
    "question": "Which Compose function provides a slot for a bottom navigation bar in Scaffold?",
    "answer": "bottomBar",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "bottomBar",
      "topBar",
      "floatingActionButton",
      "content",
      "drawerContent"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 149,
    "question": "Which Compose function is used to animate the placement of items in a LazyColumn?",
    "answer": "animateItemPlacement()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "animateItemPlacement()",
      "animateContentSize()",
      "animate*AsState",
      "updateTransition()",
      "Animatable"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 150,
    "question": "Which Compose function allows applying a custom layout modifier for positioning?",
    "answer": "layout()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "layout()",
      "Modifier.position()",
      "Modifier.offset()",
      "Modifier.align()",
      "Modifier.zIndex()"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 151,
    "question": "In MVVM, which component holds UI-related data and survives configuration changes?",
    "answer": "ViewModel",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Activity",
      "Fragment",
      "Repository",
      "ViewModel",
      "LiveData"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 152,
    "question": "Which layer in MVVM is responsible for providing data from network or database?",
    "answer": "Repository",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "ViewModel",
      "Repository",
      "UI",
      "UseCase",
      "Service"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 153,
    "question": "Which component in MVVM observes data changes and updates the UI automatically?",
    "answer": "LiveData / StateFlow",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LiveData / StateFlow",
      "ViewModel",
      "Repository",
      "Activity",
      "Fragment"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 154,
    "question": "Which dependency injection library is officially supported by Android for MVVM projects?",
    "answer": "Hilt",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Dagger",
      "Hilt",
      "Koin",
      "Kodein",
      "Guice"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 155,
    "question": "Which annotation in Hilt marks a class for constructor injection?",
    "answer": "@Inject",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Provide",
      "@Module",
      "@Inject",
      "@Singleton",
      "@Bind"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 156,
    "question": "Which Hilt annotation provides a singleton instance of a dependency?",
    "answer": "@Singleton",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Singleton",
      "@Inject",
      "@Module",
      "@Provides",
      "@Scoped"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 157,
    "question": "Which Hilt annotation defines a module that provides dependencies?",
    "answer": "@Module",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Provides",
      "@Singleton",
      "@Module",
      "@Inject",
      "@Component"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 158,
    "question": "Which Hilt annotation defines a function that provides a dependency instance?",
    "answer": "@Provides",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Module",
      "@Singleton",
      "@Provides",
      "@Inject",
      "@Bind"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 159,
    "question": "Which pattern ensures a single source of truth for data?",
    "answer": "Repository pattern",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "MVVM",
      "MVI",
      "Repository pattern",
      "Singleton",
      "Service Locator"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 160,
    "question": "In MVI, what does 'Intent' represent?",
    "answer": "User actions or events",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "UI state",
      "Side-effects",
      "User actions or events",
      "Repositories",
      "ViewModel functions"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 161,
    "question": "In MVI, what does 'State' represent?",
    "answer": "UI representation at a given time",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Intent",
      "UI representation at a given time",
      "Actions",
      "Side-effects",
      "Repository data"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 162,
    "question": "In MVI, what does 'Effect' represent?",
    "answer": "One-time events like navigation or Toasts",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "UI state",
      "Repository updates",
      "One-time events like navigation or Toasts",
      "User actions",
      "ViewModel data"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 163,
    "question": "Which principle is core to MVVM regarding data flow?",
    "answer": "Unidirectional data flow",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Bidirectional data flow",
      "Unidirectional data flow",
      "Random data flow",
      "Two-way binding only",
      "Event-driven flow"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 164,
    "question": "Which function is recommended to test ViewModel logic in isolation?",
    "answer": "Using JUnit and coroutine test rules",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Using Espresso",
      "Using JUnit and coroutine test rules",
      "Using ActivityScenario",
      "Using UIAutomator",
      "Manual testing"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 165,
    "question": "Which component in MVVM should not hold Android context?",
    "answer": "ViewModel",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Activity",
      "Fragment",
      "ViewModel",
      "Repository",
      "Service"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 166,
    "question": "Which testing library is commonly used for mocking dependencies in ViewModel tests?",
    "answer": "Mockito / MockK",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Espresso",
      "JUnit",
      "Mockito / MockK",
      "Robolectric",
      "Truth"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 167,
    "question": "Which annotation allows Hilt to inject dependencies into an Android Activity?",
    "answer": "@AndroidEntryPoint",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Inject",
      "@AndroidEntryPoint",
      "@HiltActivity",
      "@Provide",
      "@Module"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 168,
    "question": "Which scope is commonly used for dependencies that should live as long as the application?",
    "answer": "Singleton / Application scope",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Activity scope",
      "Fragment scope",
      "Singleton / Application scope",
      "ViewModel scope",
      "Session scope"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 169,
    "question": "Which function allows injecting dependencies into a Fragment with Hilt?",
    "answer": "@AndroidEntryPoint annotated Fragment",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Fragment.inject()",
      "HiltFragment()",
      "@AndroidEntryPoint annotated Fragment",
      "@InjectFragment",
      "FragmentComponent.inject()"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 170,
    "question": "Which principle recommends that repositories provide data as Flow or LiveData?",
    "answer": "Reactive programming / Observables",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Imperative programming",
      "Reactive programming / Observables",
      "Synchronous calls",
      "Callback hell",
      "Singleton pattern"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 171,
    "question": "Which testing technique verifies that repository functions return expected results?",
    "answer": "Unit testing",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Unit testing",
      "UI testing",
      "Integration testing",
      "Instrumentation testing",
      "Snapshot testing"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 172,
    "question": "Which annotation can be used to mark a Hilt module installed in SingletonComponent?",
    "answer": "@InstallIn(SingletonComponent::class)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@InstallIn(SingletonComponent::class)",
      "@Module",
      "@Singleton",
      "@Provides",
      "@EntryPoint"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 173,
    "question": "Which approach is recommended to keep ViewModel logic testable?",
    "answer": "No Android framework dependencies",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Use Context inside ViewModel",
      "No Android framework dependencies",
      "Direct UI references",
      "Access Resources directly",
      "Use Activity inside ViewModel"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 174,
    "question": "Which principle suggests that data should flow in one direction from Repository -> ViewModel -> UI?",
    "answer": "Unidirectional data flow",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Bidirectional binding",
      "Unidirectional data flow",
      "Two-way binding only",
      "Event-driven",
      "Reactive streams only"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 175,
    "question": "Which Hilt component scope is tied to a ViewModel's lifecycle?",
    "answer": "ViewModelComponent",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "ActivityComponent",
      "FragmentComponent",
      "ViewModelComponent",
      "SingletonComponent",
      "ServiceComponent"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 176,
    "question": "Which test library allows asserting LiveData values?",
    "answer": "Turbine / LiveData Test Observer",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Espresso",
      "Turbine / LiveData Test Observer",
      "Mockito",
      "JUnit",
      "UIAutomator"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 177,
    "question": "Which Hilt annotation allows injecting a dependency into a constructor?",
    "answer": "@Inject",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Module",
      "@Provides",
      "@Singleton",
      "@Inject",
      "@EntryPoint"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 178,
    "question": "Which pattern is used to isolate data sources behind a single interface?",
    "answer": "Repository pattern",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "MVVM",
      "Repository pattern",
      "MVI",
      "Singleton",
      "Service Locator"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 179,
    "question": "Which testing principle ensures ViewModel logic can run synchronously in tests?",
    "answer": "Use runTest or TestCoroutineDispatcher",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Use Espresso",
      "Use runTest or TestCoroutineDispatcher",
      "Use ActivityScenario",
      "Use Mockito only",
      "Use Thread.sleep()"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 180,
    "question": "Which MVI component transforms Intent into State?",
    "answer": "Reducer",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "IntentHandler",
      "Reducer",
      "Repository",
      "ViewModel",
      "StateObserver"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 181,
    "question": "Which testing strategy is used to test multiple repository layers together?",
    "answer": "Integration testing",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Unit testing",
      "Integration testing",
      "UI testing",
      "Snapshot testing",
      "End-to-end testing"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 182,
    "question": "Which component in MVVM holds references to multiple repositories?",
    "answer": "ViewModel",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Activity",
      "Fragment",
      "ViewModel",
      "Repository",
      "Service"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 183,
    "question": "Which Hilt annotation allows defining bindings without exposing a module class?",
    "answer": "@Binds",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Provides",
      "@Binds",
      "@Module",
      "@Inject",
      "@Singleton"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 184,
    "question": "Which principle helps keeping Android app modular and testable?",
    "answer": "Separation of concerns",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Singleton pattern",
      "Separation of concerns",
      "Event-driven",
      "Observer pattern",
      "Direct coupling"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 185,
    "question": "Which component is responsible for mapping network responses to domain models?",
    "answer": "Repository",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "ViewModel",
      "Repository",
      "Activity",
      "UseCase",
      "UI layer"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 186,
    "question": "Which Hilt scope should be used for dependencies tied to Activity lifecycle?",
    "answer": "ActivityComponent",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "FragmentComponent",
      "ActivityComponent",
      "ViewModelComponent",
      "SingletonComponent",
      "ServiceComponent"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 187,
    "question": "What annotation should mark the ViewModel class with so that Hilt can provide its dependencies?",
    "answer": "@HiltViewModel",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Inject",
      "@HiltViewModel",
      "@Module",
      "@AndroidEntryPoint",
      "@Provides"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 188,
    "question": "Which design principle recommends that each layer has only one responsibility?",
    "answer": "Single Responsibility Principle (SRP)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Open/Closed Principle",
      "Dependency Inversion",
      "Single Responsibility Principle (SRP)",
      "Liskov Substitution",
      "Interface Segregation"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 189,
    "question": "Which tool helps testing coroutine flows in ViewModel?",
    "answer": "Turbine",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Espresso",
      "JUnit",
      "Turbine",
      "Mockito",
      "UIAutomator"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 190,
    "question": "Which MVI component holds the immutable UI state?",
    "answer": "State",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Intent",
      "Reducer",
      "State",
      "Effect",
      "ViewModel"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 191,
    "question": "Which Hilt annotation allows scoping a module to a specific Android component?",
    "answer": "@InstallIn",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@InstallIn",
      "@Module",
      "@Provides",
      "@Singleton",
      "@Binds"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 192,
    "question": "Which principle ensures repositories provide one source of truth and decoupled UI?",
    "answer": "Single Source of Truth",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "MVVM",
      "Unidirectional Flow",
      "Single Source of Truth",
      "Dependency Injection",
      "MVI"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 193,
    "question": "Which Hilt annotation allows providing multiple implementations of an interface?",
    "answer": "@Binds / @Qualifier",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Provides",
      "@Binds / @Qualifier",
      "@Singleton",
      "@Module",
      "@Inject"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 194,
    "question": "Which testing type verifies UI and ViewModel interactions together?",
    "answer": "Instrumented / UI tests",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Unit testing",
      "Integration testing",
      "Instrumented / UI tests",
      "Snapshot tests",
      "End-to-end tests"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 195,
    "question": "Which MVI component handles side-effects like navigation or Toasts?",
    "answer": "Effect",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "State",
      "Reducer",
      "Effect",
      "Intent",
      "Repository"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 196,
    "question": "Which Hilt component handles dependencies tied to Fragment lifecycle?",
    "answer": "FragmentComponent",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "ActivityComponent",
      "ViewModelComponent",
      "FragmentComponent",
      "SingletonComponent",
      "ServiceComponent"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 197,
    "question": "Which ViewModel testing principle avoids using Android framework dependencies?",
    "answer": "Keep ViewModel pure and platform-independent",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Use Activity references",
      "Keep ViewModel pure and platform-independent",
      "Access Resources",
      "Use Context",
      "Use LiveData only"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 198,
    "question": "Which principle suggests that changes in state should trigger UI updates automatically?",
    "answer": "Reactive / Observables",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Imperative",
      "Reactive / Observables",
      "Manual refresh",
      "Polling",
      "Thread.sleep()"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 199,
    "question": "Which Hilt scope is tied to the lifetime of the Application?",
    "answer": "SingletonComponent",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "ViewModelComponent",
      "ActivityComponent",
      "FragmentComponent",
      "SingletonComponent",
      "ServiceComponent"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 200,
    "question": "Which pattern ensures clear separation between UI, business logic, and data sources?",
    "answer": "MVVM",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "MVI",
      "MVVM",
      "MVP",
      "Singleton",
      "Repository pattern"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 201,
    "question": "Which annotation marks a Kotlin data class as a Room database entity?",
    "answer": "@Entity",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Table",
      "@Entity",
      "@DataClass",
      "@Database",
      "@Dao"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 202,
    "question": "Which annotation marks a DAO interface in Room?",
    "answer": "@Dao",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Dao",
      "@Repository",
      "@Database",
      "@Entity",
      "@Inject"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 203,
    "question": "Which annotation defines the Room database class?",
    "answer": "@Database",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Database",
      "@Entity",
      "@Dao",
      "@RoomDB",
      "@Module"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 204,
    "question": "Which annotation is used to write SQL select queries in Room DAO?",
    "answer": "@Query",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Insert",
      "@Select",
      "@Query",
      "@Update",
      "@Delete"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 205,
    "question": "Which annotation is used to insert data in Room?",
    "answer": "@Insert",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Query",
      "@Update",
      "@Insert",
      "@Delete",
      "@Put"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 206,
    "question": "Which annotation is used to update data in Room?",
    "answer": "@Update",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Query",
      "@Update",
      "@Insert",
      "@Delete",
      "@Patch"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 207,
    "question": "Which annotation is used to delete data in Room?",
    "answer": "@Delete",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Delete",
      "@Remove",
      "@Update",
      "@Query",
      "@Insert"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 208,
    "question": "Which function type allows observing Room database changes reactively?",
    "answer": "Flow / LiveData",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Flow / LiveData",
      "List",
      "ObservableField",
      "StateFlow",
      "MutableMap"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 209,
    "question": "Which annotation allows defining a primary key in Room?",
    "answer": "@PrimaryKey",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Key",
      "@Primary",
      "@PrimaryKey",
      "@Id",
      "@Unique"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 210,
    "question": "How do you auto-generate a primary key in Room?",
    "answer": "@PrimaryKey(autoGenerate = true)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@PrimaryKey",
      "@PrimaryKey(autoGenerate = true)",
      "@AutoKey",
      "@Id(autoGenerate = true)",
      "@Generated"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 211,
    "question": "Which annotation allows indexing a column in Room for faster queries?",
    "answer": "@Index",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Index",
      "@ColumnIndex",
      "@Indexed",
      "@ForeignKey",
      "@QueryIndex"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 212,
    "question": "Which annotation defines a foreign key in Room?",
    "answer": "@ForeignKey",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Relation",
      "@ForeignKey",
      "@Reference",
      "@ParentKey",
      "@ChildKey"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 213,
    "question": "Which annotation is used to define a one-to-many relationship in Room?",
    "answer": "@Relation",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@OneToMany",
      "@ForeignKey",
      "@Relation",
      "@Embedded",
      "@JoinColumn"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 214,
    "question": "Which annotation embeds one data class into another in Room?",
    "answer": "@Embedded",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Embedded",
      "@Relation",
      "@Include",
      "@Compose",
      "@Nested"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 215,
    "question": "Which annotation allows defining database migrations in Room?",
    "answer": "@Database(version = X, exportSchema = true)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Migration",
      "@Database(version = X, exportSchema = true)",
      "@UpdateSchema",
      "@DbVersion",
      "@SchemaMigration"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 216,
    "question": "Which type of query can return a Flow to observe changes automatically?",
    "answer": "Flow<List<Entity>>",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "List<Entity>",
      "LiveData<Entity>",
      "Flow<List<Entity>>",
      "Entity",
      "Observable<List<Entity>>"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 217,
    "question": "Which annotation can mark a column as non-null in Room?",
    "answer": "@NonNull",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@NotNull",
      "@NonNull",
      "@Nullable",
      "@PrimaryKey",
      "@Required"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 218,
    "question": "Which annotation allows defining a default value for a Room column?",
    "answer": "defaultValue in @ColumnInfo",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Default",
      "defaultValue in @ColumnInfo",
      "@ColumnDefault",
      "@InitialValue",
      "@DefaultValue"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 219,
    "question": "Which function is used to run multiple database operations atomically in Room?",
    "answer": "@Transaction",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Atomic",
      "@Transaction",
      "@Synchronized",
      "@Batch",
      "@AllOrNothing"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 220,
    "question": "Which type is recommended for storing large binary data in Room?",
    "answer": "ByteArray",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Blob",
      "ByteArray",
      "String",
      "IntArray",
      "Bitmap"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 221,
    "question": "Which annotation allows ignoring a field from being persisted in Room?",
    "answer": "@Ignore",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Transient",
      "@Ignore",
      "@Exclude",
      "@NotPersisted",
      "@Skip"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 222,
    "question": "Which annotation allows setting a custom column name in Room?",
    "answer": "@ColumnInfo(name = \"custom_name\")",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Column(name = \"custom_name\")",
      "@ColumnInfo(name = \"custom_name\")",
      "@CustomColumn(\"custom_name\")",
      "@FieldName(\"custom_name\")",
      "@ColumnAlias(\"custom_name\")"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 223,
    "question": "Which type should you use in Room for reactive streams?",
    "answer": "Flow",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LiveData",
      "Flow",
      "ObservableField",
      "StateFlow",
      "List"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 224,
    "question": "Which annotation allows embedding multiple objects as columns in a Room entity?",
    "answer": "@Embedded",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Embedded",
      "@Relation",
      "@Include",
      "@ColumnInfo",
      "@Nested"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 225,
    "question": "Which method allows running Room queries on a background thread?",
    "answer": "suspend functions / coroutines",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "AsyncTask",
      "Threads",
      "suspend functions / coroutines",
      "runBlocking",
      "ExecutorService"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 226,
    "question": "Which annotation can mark a DAO method as a suspend function?",
    "answer": "suspend",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Suspend",
      "suspend",
      "@Async",
      "@Background",
      "@Coroutine"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 227,
    "question": "Which type is recommended for a primary key that is auto-generated?",
    "answer": "Int / Long",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "String",
      "UUID",
      "Int / Long",
      "Boolean",
      "Double"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 228,
    "question": "Which annotation allows Room to handle database versioning?",
    "answer": "@Database(version = X)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Version",
      "@SchemaVersion",
      "@Database(version = X)",
      "@Migration",
      "@DbVersion"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 229,
    "question": "Which annotation can be used to create a composite primary key?",
    "answer": "primaryKeys in @Entity",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@PrimaryKey(composite = true)",
      "primaryKeys in @Entity",
      "@CompositeKey",
      "@MultiKey",
      "@KeySet"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 230,
    "question": "Which annotation allows creating indexes on multiple columns in Room?",
    "answer": "indices in @Entity",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Index(columns = ...)",
      "indices in @Entity",
      "@IndexedColumns",
      "@ColumnIndex",
      "@MultiIndex"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 231,
    "question": "Which annotation allows defining a one-to-one relationship in Room?",
    "answer": "@Relation",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@OneToOne",
      "@Relation",
      "@Embedded",
      "@ForeignKey",
      "@JoinColumn"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 232,
    "question": "Which annotation allows defining a many-to-many relationship in Room?",
    "answer": "Use two @Relation with junction entity",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@ManyToMany",
      "Use two @Relation with junction entity",
      "@Relation(manyToMany = true)",
      "@ForeignKey(manyToMany = true)",
      "@Embedded(manyToMany = true)"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 233,
    "question": "Which function allows observing database changes using LiveData?",
    "answer": "fun getAll(): LiveData<List<Entity>>",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "fun getAll(): List<Entity>",
      "fun getAll(): Flow<List<Entity>>",
      "fun getAll(): LiveData<List<Entity>>",
      "fun getAll(): Observable<List<Entity>>",
      "fun getAll(): StateFlow<List<Entity>>"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 234,
    "question": "Which Room DAO method signature allows deletion by entity?",
    "answer": "@Delete fun delete(entity: Entity)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Delete fun delete(entity: Entity)",
      "@Query(\"DELETE FROM table\") fun delete(entity: Entity)",
      "@Remove fun delete(entity: Entity)",
      "fun delete(entity: Entity)",
      "@Delete fun deleteById(id: Int)"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 235,
    "question": "Which Room DAO method allows updating multiple entities at once?",
    "answer": "@Update fun update(vararg entities: Entity)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Update fun update(vararg entities: Entity)",
      "@Update fun update(entities: List<Entity>)",
      "@Update fun updateAll(entities: Entity)",
      "@Query fun updateAll(entities: Entity)",
      "@Update fun update(entity: Entity)"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 236,
    "question": "Which annotation allows Room to ignore a field in a data class?",
    "answer": "@Ignore",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Transient",
      "@Ignore",
      "@NotPersisted",
      "@Exclude",
      "@Skip"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 237,
    "question": "Which Room annotation allows defining the database version number?",
    "answer": "version in @Database",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "version in @Database",
      "@Version",
      "@SchemaVersion",
      "@DbVersion",
      "@Migration"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 238,
    "question": "Which type is recommended for storing JSON strings in Room?",
    "answer": "String",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Blob",
      "ByteArray",
      "String",
      "Text",
      "JsonObject"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 239,
    "question": "Which annotation allows embedding multiple fields from another data class?",
    "answer": "@Embedded",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Embedded",
      "@Include",
      "@Compose",
      "@Nested",
      "@Relation"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 240,
    "question": "Which function allows executing database operations on the main thread (not recommended)?",
    "answer": "allowMainThreadQueries()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "runOnMainThread()",
      "allowMainThreadQueries()",
      "mainThreadQuery()",
      "executeMainThread()",
      "runBlockingMain()"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 241,
    "question": "Which annotation can mark an entity's field as unique?",
    "answer": "@ColumnInfo(unique = true)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Unique",
      "@ColumnInfo(unique = true)",
      "@ColumnUnique",
      "@UniqueKey",
      "@PrimaryKey(unique=true)"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 242,
    "question": "Which function allows retrieving a single entity by primary key?",
    "answer": "@Query(\"SELECT * FROM table WHERE id = :id\") fun getById(id: Int): Entity",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "fun getById(id: Int): Entity",
      "@Query(\"SELECT * FROM table WHERE id = :id\") fun getById(id: Int): Entity",
      "@Select(id) fun getById(id: Int): Entity",
      "@FindById fun getById(id: Int): Entity",
      "@QueryById fun getById(id: Int): Entity"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 243,
    "question": "Which function allows observing a single entity reactively with Flow?",
    "answer": "fun getById(id: Int): Flow<Entity>",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "fun getById(id: Int): Entity",
      "fun getById(id: Int): LiveData<Entity>",
      "fun getById(id: Int): Flow<Entity>",
      "fun getById(id: Int): StateFlow<Entity>",
      "fun getById(id: Int): Observable<Entity>"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 244,
    "question": "Which annotation allows setting a default value for a column in Room?",
    "answer": "defaultValue in @ColumnInfo",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Default",
      "defaultValue in @ColumnInfo",
      "@ColumnDefault",
      "@InitialValue",
      "@DefaultValue"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 245,
    "question": "Which annotation allows defining a composite index on multiple columns?",
    "answer": "indices in @Entity",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Index(columns = ...)",
      "indices in @Entity",
      "@CompositeIndex",
      "@MultiIndex",
      "@ColumnIndex"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 246,
    "question": "Which Room DAO method signature allows deleting multiple entities?",
    "answer": "@Delete fun delete(vararg entities: Entity)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Delete fun delete(vararg entities: Entity)",
      "@Delete fun delete(entities: List<Entity>)",
      "@Query(\"DELETE FROM table\") fun deleteAll()",
      "@Delete fun deleteAll(entities: Entity)",
      "fun deleteAll(entities: List<Entity>)"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 247,
    "question": "Which type should you use for storing timestamps in Room?",
    "answer": "Long",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Date",
      "String",
      "Long",
      "Instant",
      "Calendar"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 248,
    "question": "How do you define a column as nullable in Room?",
    "answer": "Use a nullable type (e.g., String?)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Use a nullable type (e.g., String?)",
      "@Nullable",
      "@NotNull",
      "@ColumnNullable",
      "allowNull = true"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 249,
    "question": "Which function allows performing database migrations in Room?",
    "answer": "addMigrations(Migration(...))",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "addMigrations(Migration(...))",
      "updateSchema()",
      "migrateTo(version)",
      "runMigration()",
      "applyMigration()"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 250,
    "question": "Which annotation can mark a field to be ignored in database queries but still available in entity?",
    "answer": "@Ignore",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Transient",
      "@Ignore",
      "@Exclude",
      "@NotPersisted",
      "@Skip"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 251,
    "question": "Which library is used for type-safe HTTP networking in Android?",
    "answer": "Retrofit",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "OkHttp",
      "Volley",
      "Retrofit",
      "HttpClient",
      "Fuel"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 252,
    "question": "Which class in OkHttp is used to make HTTP requests?",
    "answer": "OkHttpClient",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "HttpClient",
      "OkHttpClient",
      "RequestBuilder",
      "HttpConnection",
      "RequestManager"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 253,
    "question": "Which annotation in Retrofit specifies the HTTP GET method?",
    "answer": "@GET",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@GET",
      "@POST",
      "@PUT",
      "@HTTPGET",
      "@Fetch"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 254,
    "question": "Which annotation in Retrofit is used for query parameters?",
    "answer": "@Query",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Param",
      "@Query",
      "@Field",
      "@Body",
      "@RequestParam"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 255,
    "question": "Which annotation in Retrofit is used for request body?",
    "answer": "@Body",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Body",
      "@Field",
      "@Query",
      "@RequestBody",
      "@Form"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 256,
    "question": "Which function in OkHttp is used to execute a request synchronously?",
    "answer": "Call.execute()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Call.run()",
      "Call.execute()",
      "Call.start()",
      "Call.enqueue()",
      "Call.request()"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 257,
    "question": "Which function in OkHttp executes a request asynchronously?",
    "answer": "Call.enqueue()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Call.executeAsync()",
      "Call.enqueue()",
      "Call.runAsync()",
      "Call.start()",
      "Call.launch()"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 258,
    "question": "Which library is commonly used for JSON serialization in Retrofit?",
    "answer": "Gson",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Moshi",
      "Jackson",
      "Gson",
      "Kotlinx.serialization",
      "FastJson"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 259,
    "question": "Which annotation specifies the base URL in Retrofit?",
    "answer": "baseUrl() in Retrofit.Builder",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "baseUrl() in Retrofit.Builder",
      "@BaseUrl",
      "@Url",
      "setBaseUrl()",
      "@Endpoint"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 260,
    "question": "Which function in Retrofit interface can be marked suspend for coroutines?",
    "answer": "suspend fun getData(): Response<Type>",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "fun getData(): Response<Type>",
      "suspend fun getData(): Response<Type>",
      "fun getDataAsync(): Response<Type>",
      "fun getData(): Deferred<Type>",
      "fun getData(): Call<Type>"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 261,
    "question": "Which Kotlin type is typically used to observe the results of a Retrofit network call in a reactive way?",
    "answer": "Flow<Response<Type>>",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LiveData<Response<Type>>",
      "Flow<Response<Type>>",
      "Deferred<Response<Type>>",
      "Observable<Response<Type>>",
      "Call<Response<Type>>"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 262,
    "question": "Which OkHttp interceptor can modify requests before sending?",
    "answer": "Interceptor",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Interceptor",
      "Callback",
      "RequestFilter",
      "Authenticator",
      "Handler"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 263,
    "question": "Which OkHttp class is used for adding logging of HTTP requests/responses?",
    "answer": "HttpLoggingInterceptor",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "LoggingClient",
      "HttpLogger",
      "HttpLoggingInterceptor",
      "InterceptorLogger",
      "RequestLogger"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 264,
    "question": "Which exception indicates network failure in Retrofit?",
    "answer": "IOException",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "HttpException",
      "IOException",
      "NetworkError",
      "SocketException",
      "TimeoutException"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 265,
    "question": "Which Retrofit exception indicates non-2xx HTTP response?",
    "answer": "HttpException",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "IOException",
      "HttpException",
      "NetworkException",
      "ResponseError",
      "ApiException"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 266,
    "question": "Which Retrofit call adapter allows using Kotlin coroutines?",
    "answer": "kotlinx-coroutines CallAdapter",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "RxJava2 CallAdapter",
      "kotlinx-coroutines CallAdapter",
      "LiveData CallAdapter",
      "Observable CallAdapter",
      "Deferred CallAdapter"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 267,
    "question": "Which Retrofit converter is used to parse JSON using Moshi?",
    "answer": "MoshiConverterFactory",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "GsonConverterFactory",
      "MoshiConverterFactory",
      "JacksonConverterFactory",
      "KotlinxConverterFactory",
      "JsonConverter"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 268,
    "question": "Which operator in Kotlin Flow handles errors gracefully?",
    "answer": "catch",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "onError",
      "catch",
      "handleError",
      "tryCatch",
      "recover"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 269,
    "question": "Which operator in Flow emits elements on a specified dispatcher?",
    "answer": "flowOn",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "flowOn",
      "onDispatcher",
      "launchOn",
      "dispatchOn",
      "emitOn"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 270,
    "question": "Which operator in Flow transforms elements asynchronously?",
    "answer": "flatMapMerge",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "map",
      "flatMap",
      "flatMapMerge",
      "collect",
      "filter"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 271,
    "question": "Which function starts collecting a Flow?",
    "answer": "collect",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "collect",
      "launch",
      "subscribe",
      "flowCollect",
      "observe"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 272,
    "question": "Which function launches a coroutine in ViewModel scope?",
    "answer": "viewModelScope.launch { ... }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "GlobalScope.launch { ... }",
      "viewModelScope.launch { ... }",
      "lifecycleScope.launch { ... }",
      "CoroutineScope.launch { ... }",
      "MainScope.launch { ... }"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 273,
    "question": "Which function allows retrying failed network requests in Flow?",
    "answer": "retry",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "repeat",
      "retry",
      "catch",
      "onError",
      "recover"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 274,
    "question": "Which Retrofit annotation sends a form-encoded POST request?",
    "answer": "@FormUrlEncoded with @POST",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@FormUrlEncoded with @POST",
      "@FormEncoded",
      "@Body",
      "@PostForm",
      "@POST with form()"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 275,
    "question": "Which annotation specifies a field in a form-encoded request?",
    "answer": "@Field",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Field",
      "@FormField",
      "@BodyField",
      "@FormParam",
      "@Param"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 276,
    "question": "Which operator converts a cold Flow into a hot SharedFlow?",
    "answer": "shareIn",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "shareIn",
      "stateIn",
      "publishIn",
      "hotFlow",
      "broadcastIn"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 277,
    "question": "Which operator exposes the current value of a StateFlow?",
    "answer": "value",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "current",
      "emit",
      "value",
      "collect",
      "getValue()"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 278,
    "question": "Which function allows converting a suspend function into Flow?",
    "answer": "flow { emit(suspendFunction()) }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "suspendAsFlow()",
      "flow { emit(suspendFunction()) }",
      "asFlow()",
      "toFlow()",
      "emitFlow(suspendFunction())"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 279,
    "question": "Which operator in Flow can limit the number of emitted items?",
    "answer": "take(n)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "limit(n)",
      "take(n)",
      "first(n)",
      "count(n)",
      "slice(n)"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 280,
    "question": "Which exception type is used to handle HTTP errors with Retrofit?",
    "answer": "HttpException",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "IOException",
      "HttpException",
      "NetworkException",
      "ApiError",
      "ResponseError"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 281,
    "question": "Which Retrofit annotation is used for dynamic URLs?",
    "answer": "@Url",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Url",
      "@DynamicUrl",
      "@GETUrl",
      "@Endpoint",
      "@Path"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 282,
    "question": "Which annotation is used for path parameters in Retrofit?",
    "answer": "@Path",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Param",
      "@Path",
      "@Query",
      "@Url",
      "@Body"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 283,
    "question": "Which OkHttp class is used to cancel ongoing HTTP requests?",
    "answer": "Call.cancel()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Call.stop()",
      "Call.abort()",
      "Call.cancel()",
      "OkHttpClient.cancel()",
      "Request.cancel()"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 284,
    "question": "Which operator in Flow collects only the latest value and cancels previous?",
    "answer": "collectLatest",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "collectLatest",
      "collect",
      "mapLatest",
      "latest",
      "takeLatest"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 285,
    "question": "Which coroutine builder is used for concurrent execution with deferred result?",
    "answer": "async",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "launch",
      "async",
      "runBlocking",
      "withContext",
      "concurrent"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 286,
    "question": "Which dispatcher is optimized for IO operations in coroutines?",
    "answer": "Dispatchers.IO",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Dispatchers.Default",
      "Dispatchers.Main",
      "Dispatchers.IO",
      "Dispatchers.Unconfined",
      "Dispatchers.Background"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 287,
    "question": "Which operator transforms emitted values in Flow?",
    "answer": "map",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "map",
      "filter",
      "collect",
      "flatMap",
      "transform"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 288,
    "question": "Which Flow operator allows combining emissions from multiple Flows?",
    "answer": "combine",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "zip",
      "merge",
      "combine",
      "concat",
      "flatCombine"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 289,
    "question": "Which Retrofit annotation is used for multipart requests?",
    "answer": "@Multipart",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@Multipart",
      "@FormData",
      "@MultiPartRequest",
      "@BodyPart",
      "@MultiRequest"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 290,
    "question": "Which annotation is used for sending file parts in Retrofit?",
    "answer": "@Part",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "@File",
      "@Part",
      "@Body",
      "@MultipartFile",
      "@Upload"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 291,
    "question": "Which operator collects Flow emissions on a different dispatcher than flow creation?",
    "answer": "flowOn",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "collectOn",
      "observeOn",
      "flowOn",
      "emitOn",
      "runOn"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 292,
    "question": "Which Flow operator skips the first n elements?",
    "answer": "drop(n)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "skip(n)",
      "drop(n)",
      "ignore(n)",
      "firstDrop(n)",
      "filter(n)"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 293,
    "question": "Which function in Retrofit is used to create a service interface?",
    "answer": "Retrofit.create(Service::class.java)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Retrofit.build(Service::class.java)",
      "Retrofit.create(Service::class.java)",
      "Retrofit.new(Service::class.java)",
      "Retrofit.generate(Service::class.java)",
      "Retrofit.service(Service::class.java)"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 294,
    "question": "Which operator in Flow combines emissions sequentially?",
    "answer": "flatMapConcat",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "flatMapMerge",
      "flatMapConcat",
      "combine",
      "zip",
      "merge"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 295,
    "question": "Which function converts a Flow to LiveData?",
    "answer": "asLiveData()",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "toLiveData()",
      "asLiveData()",
      "flowToLiveData()",
      "collectAsLiveData()",
      "toLive()"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 296,
    "question": "Which operator in Flow allows filtering emitted values?",
    "answer": "filter",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "filter",
      "map",
      "collect",
      "take",
      "distinct"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 297,
    "question": "Which OkHttp class handles HTTP authentication challenges?",
    "answer": "Authenticator",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Authenticator",
      "Interceptor",
      "Credentials",
      "AuthenticatorClient",
      "RequestHandler"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 298,
    "question": "How can you expose a Retrofit suspend function as a Kotlin Flow in your repository?",
    "answer": "fun fetchDataFlow(): Flow<Response<Type>> = flow { emit(api.fetchData()) }",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "fun fetchDataFlow(): Flow<Response<Type>> = flow { emit(api.fetchData()) }",
      "suspend fun fetchData(): Flow<Response<Type>>",
      "fun fetchDataAsync(): Flow<Response<Type>>",
      "fun fetchData(): LiveData<Response<Type>>",
      "fun fetchData(): Deferred<Response<Type>>"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 299,
    "question": "Which function in Retrofit returns a Call object for asynchronous execution?",
    "answer": "fun getData(): Call<Type>",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "fun getData(): Call<Type>",
      "suspend fun getData(): Response<Type>",
      "fun getDataAsync(): Deferred<Type>",
      "fun getData(): Flow<Type>",
      "fun getData(): Observable<Type>"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 300,
    "question": "Which exception in Retrofit indicates a conversion or parsing failure?",
    "answer": "JsonDataException or JsonParseException",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "IOException",
      "HttpException",
      "JsonDataException or JsonParseException",
      "NetworkException",
      "IllegalStateException"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 301,
    "question": "What is the key difference between `supervisorScope` and `coroutineScope`?",
    "answer": "A failure in a child coroutine within a `supervisorScope` does not affect other children, while in `coroutineScope` it cancels all siblings.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A failure in a child coroutine within a `supervisorScope` does not affect other children, while in `coroutineScope` it cancels all siblings.",
      "`supervisorScope` cancels all children if one fails, whereas `coroutineScope` allows them to fail independently.",
      "`supervisorScope` is used for UI-related coroutines, and `coroutineScope` is for background work.",
      "There is no difference; `supervisorScope` is a deprecated name for `coroutineScope`.",
      "`supervisorScope` must be used with `Dispatchers.IO`, while `coroutineScope` works with any dispatcher."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 302,
    "question": "What is the primary difference between `StateFlow` and `SharedFlow`?",
    "answer": "`StateFlow` always has a value and only emits the latest state to new collectors, while `SharedFlow` is stateless and can be configured to replay multiple old values.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`StateFlow` is a 'cold' flow, and `SharedFlow` is a 'hot' flow.",
      "`SharedFlow` is designed for representing UI state, while `StateFlow` is for one-time events.",
      "`StateFlow` always has a value and only emits the latest state to new collectors, while `SharedFlow` is stateless and can be configured to replay multiple old values.",
      "`StateFlow` must be collected within `viewModelScope`, but `SharedFlow` can be collected anywhere.",
      "You cannot update the value of a `SharedFlow`, only a `StateFlow`."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 303,
    "question": "What is the purpose of the `@JvmOverloads` annotation in Kotlin?",
    "answer": "It instructs the Kotlin compiler to generate overloaded versions of a function for Java consumers, based on default parameter values.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It allows a Kotlin function to be called from Java with a different name.",
      "It instructs the Kotlin compiler to generate overloaded versions of a function for Java consumers, based on default parameter values.",
      "It marks a function as being thread-safe for calls from both Java and Kotlin.",
      "It automatically converts Java types to Kotlin types in the function signature.",
      "It is used to expose a top-level function as a static method in Java."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 304,
    "question": "In Jetpack Compose, which modifier should be used to make a composable fill all available space within a `Row` or `Column` after its siblings have been measured?",
    "answer": "Modifier.weight(1f)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Modifier.fillMaxSize()",
      "Modifier.weight(1f)",
      "Modifier.layoutId(\"fill\")",
      "Modifier.wrapContentSize(align = Alignment.Center, unbounded = true)",
      "Modifier.requiredSize(Size.Max)"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 305,
    "question": "What is the difference between `implementation`, `api`, and `compileOnly` dependency configurations in Gradle?",
    "answer": "`implementation` hides a dependency from consumers of a module, `api` exposes it transitively, and `compileOnly` makes it available only at compile time.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`api` is for local modules, `implementation` is for remote libraries, and `compileOnly` is for test dependencies.",
      "`implementation` hides a dependency from consumers of a module, `api` exposes it transitively, and `compileOnly` makes it available only at compile time.",
      "`implementation` and `api` are identical, but `api` provides better build performance.",
      "`compileOnly` includes the dependency in the final APK, while `implementation` does not.",
      "`api` should be used for all dependencies to ensure they are available to other modules."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 306,
    "question": "What is the behavior of an Activity with the `singleTop` launch mode?",
    "answer": "If an instance of the Activity is already at the top of the back stack, a new instance will not be created; instead, its `onNewIntent()` method will be called.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It ensures that only one instance of the Activity can ever exist in the entire system.",
      "If an instance of the Activity is already at the top of the back stack, a new instance will not be created; instead, its `onNewIntent()` method will be called.",
      "It creates a new task and makes the Activity the root of that new task.",
      "It clears the entire task stack above it before creating a new instance.",
      "This launch mode is deprecated and should not be used in modern Android development."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 307,
    "question": "When should you use the Application Context instead of an Activity Context?",
    "answer": "When you need a context that is tied to the lifecycle of the entire application, such as for creating singletons or for tasks that outlive an Activity.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Always, because it prevents all types of memory leaks.",
      "When inflating UI layouts or accessing UI-related resources.",
      "When you need a context that is tied to the lifecycle of the entire application, such as for creating singletons or for tasks that outlive an Activity.",
      "Only in BroadcastReceivers and Services.",
      "There is no functional difference; they can be used interchangeably."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 308,
    "question": "What is the primary purpose of `DiffUtil` in the context of a `RecyclerView`?",
    "answer": "To calculate the difference between two lists and provide a set of update operations that allows the `RecyclerView.Adapter` to perform efficient and animated updates.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To load data into the adapter from a remote or local data source.",
      "To handle item click and long-press events in a type-safe way.",
      "To create different view types within the same `RecyclerView`.",
      "To calculate the difference between two lists and provide a set of update operations that allows the `RecyclerView.Adapter` to perform efficient and animated updates.",
      "To define the layout and decoration of items, such as dividers and spacing."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 309,
    "question": "In Jetpack Compose, what problem does `CompositionLocal` solve?",
    "answer": "It allows data to be passed down the composable tree implicitly, without having to pass it as a parameter through every intermediate composable function.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is used to store state that survives configuration changes, replacing `ViewModel`.",
      "It helps in creating complex animations between different composables.",
      "It allows data to be passed down the composable tree implicitly, without having to pass it as a parameter through every intermediate composable function.",
      "It defines the local position and size of a composable on the screen.",
      "It is a tool for debugging recomposition issues in Android Studio."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 310,
    "question": "For what purpose would you use a `callbackFlow` in Kotlin Coroutines?",
    "answer": "To convert callback-based APIs into a Flow, allowing them to be used in a reactive, coroutine-native way.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To handle UI click event callbacks in Jetpack Compose.",
      "To create a simple flow that emits a fixed set of values.",
      "To ensure that a callback is always executed on the main thread.",
      "To convert callback-based APIs into a Flow, allowing them to be used in a reactive, coroutine-native way.",
      "It is a specialized flow for making network request callbacks with Retrofit."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 311,
    "question": "What is the role of Product Flavors in a Gradle build configuration?",
    "answer": "They are used to create different versions of your app (e.g., free vs. paid, or different branding) from the same codebase, allowing for different resources and code.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "They define the build process for debug and release versions of the app.",
      "They are used to manage different versions of dependencies for testing and production.",
      "They are used to create different versions of your app (e.g., free vs. paid, or different branding) from the same codebase, allowing for different resources and code.",
      "They control the ProGuard/R8 settings for code shrinking and obfuscation.",
      "They automatically generate different flavor icons for the app."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 312,
    "question": "What is a `BroadcastReceiver` and what is a common use case for it?",
    "answer": "It is an Android component that can listen for and respond to system-wide broadcast messages (e.g., network state change, battery low) or custom application events.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is a long-running background process for tasks like playing music.",
      "It is a UI component used to receive input from the user.",
      "It is an Android component that can listen for and respond to system-wide broadcast messages (e.g., network state change, battery low) or custom application events.",
      "It is a networking client for receiving data from a server via broadcasts.",
      "It is used exclusively for receiving push notifications from Firebase."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 313,
    "question": "What distinguishes a Foreground Service from other types of Services?",
    "answer": "A Foreground Service must display a persistent notification to the user, and it is given higher priority by the system, making it less likely to be killed when memory is low.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It can only run when the application's UI is in the foreground.",
      "It runs on the main thread to perform quick UI-related background tasks.",
      "A Foreground Service must display a persistent notification to the user, and it is given higher priority by the system, making it less likely to be killed when memory is low.",
      "It is a special type of service that binds directly to an Activity's lifecycle.",
      "It does not require the `FOREGROUND_SERVICE` permission in the manifest."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 314,
    "question": "When testing coroutines, what is the main advantage of using `runTest` over `runBlocking`?",
    "answer": "`runTest` executes tests in a virtual-time environment, allowing delays and asynchronous operations to complete almost instantly, making tests faster and more reliable.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`runTest` can only be used for testing UI-related coroutines, while `runBlocking` is for background logic.",
      "`runBlocking` blocks the main thread, while `runTest` does not.",
      "`runTest` executes tests in a virtual-time environment, allowing delays and asynchronous operations to complete almost instantly, making tests faster and more reliable.",
      "`runTest` is part of the JUnit 4 framework, whereas `runBlocking` is from JUnit 5.",
      "There is no advantage; they are interchangeable for testing purposes."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 315,
    "question": "In Jetpack Compose, what makes a class 'unstable' and why can it be a performance problem?",
    "answer": "A class is unstable if its properties are `var` or if it contains references to other unstable types. Unstable classes can cause composables that use them to be recomposed unnecessarily, even when the data hasn't actually changed.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "An unstable class is one that does not implement the `Parcelable` interface.",
      "A class is unstable if its properties are `var` or if it contains references to other unstable types. Unstable classes can cause composables that use them to be recomposed unnecessarily, even when the data hasn't actually changed.",
      "Unstable classes are those with more than five public methods, leading to slower compilation.",
      "A class is considered unstable if it is not annotated with `@Stable` or `@Immutable`.",
      "It refers to a class that is likely to cause runtime crashes due to its complexity."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 316,
    "question": "What is the Liskov Substitution Principle (LSP) and how can it apply to custom Android Views?",
    "answer": "Subtypes must be substitutable for their base types. For example, a custom `MyButton` subclassing `AppCompatButton` should function correctly wherever an `AppCompatButton` is expected, without causing unexpected behavior.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Subtypes must be substitutable for their base types. For example, a custom `MyButton` subclassing `AppCompatButton` should function correctly wherever an `AppCompatButton` is expected, without causing unexpected behavior.",
      "A class should only have one reason to change. For example, a custom View should only handle rendering, not business logic.",
      "High-level modules should depend on abstractions. For example, an Activity should depend on a `View` interface, not a concrete `MyButton`.",
      "Clients should not be forced to depend on interfaces they do not use.",
      "It is a principle for making classes open for extension but closed for modification."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 317,
    "question": "How does the Dependency Inversion Principle (DIP) relate to using Dependency Injection (DI) frameworks like Hilt?",
    "answer": "DIP states high-level modules should depend on abstractions, not concretions. DI frameworks like Hilt implement this by providing concrete implementations of these abstractions (e.g., a `UserRepositoryImpl` for a `UserRepository` interface) at runtime.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "DIP is about inverting control flow, while DI is about providing objects.",
      "DIP states high-level modules should depend on abstractions, not concretions. DI frameworks like Hilt implement this by providing concrete implementations of these abstractions (e.g., a `UserRepositoryImpl` for a `UserRepository` interface) at runtime.",
      "They are unrelated; DIP is an architectural principle while Hilt is just a library for reducing boilerplate.",
      "DIP is only applicable for inverting dependencies between UI layers, which Hilt does not manage.",
      "Hilt violates DIP by creating a direct dependency on the Dagger-Hilt framework."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 318,
    "question": "What is the Builder pattern and where is it commonly used in the Android SDK?",
    "answer": "It is a pattern for constructing complex objects step-by-step. It is used extensively in classes like `AlertDialog.Builder`, `NotificationCompat.Builder`, and `OkHttpClient.Builder`.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is a pattern for constructing complex objects step-by-step. It is used extensively in classes like `AlertDialog.Builder`, `NotificationCompat.Builder`, and `OkHttpClient.Builder`.",
      "It is a pattern that ensures only one instance of a class exists, like a `Retrofit` singleton.",
      "It is a pattern for creating different types of objects from a single factory method, like in `ViewModelProvider.Factory`.",
      "It is a pattern for observing state changes, used in `LiveData`.",
      "It is a structural pattern for adapting one interface to another, like `RecyclerView.Adapter`."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 319,
    "question": "What is the Observer pattern and which Android Architecture Components are prime examples of it?",
    "answer": "It is a behavioral pattern where a subject notifies a list of observers about state changes. `LiveData` and Kotlin's `Flow` are prime examples.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is a pattern where an object's behavior changes when its state changes. `ViewModel` is a prime example.",
      "It is a pattern to encapsulate a request as an object. `WorkManager` is a prime example.",
      "It is a behavioral pattern where a subject notifies a list of observers about state changes. `LiveData` and Kotlin's `Flow` are prime examples.",
      "It is a creational pattern for building objects step-by-step, like `NotificationCompat.Builder`.",
      "It is a pattern for ensuring a class has only one instance, like `RoomDatabase`."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 320,
    "question": "What is an 'ANR' (Application Not Responding) error, and what is its most common cause?",
    "answer": "A system dialog shown when the UI thread has been blocked for too long (e.g., 5 seconds for an input event). The most common cause is performing long-running work like networking or heavy database I/O on the main thread.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A type of crash that occurs when a background thread throws an unhandled exception.",
      "A system dialog shown when the UI thread has been blocked for too long (e.g., 5 seconds for an input event). The most common cause is performing long-running work like networking or heavy database I/O on the main thread.",
      "A warning from StrictMode that you are leaking memory.",
      "An error that occurs when an application uses too much battery in the background.",
      "A lint error indicating that a layout is too complex and will perform poorly."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 321,
    "question": "How can you diagnose a memory leak in an Android app using modern tools?",
    "answer": "Using the Android Studio Memory Profiler to capture a heap dump and analyze it for detached objects, or by integrating the LeakCanary library in debug builds for automatic detection.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "By repeatedly opening and closing the app and seeing if it gets slower.",
      "Using the Android Studio Memory Profiler to capture a heap dump and analyze it for detached objects, or by integrating the LeakCanary library in debug builds for automatic detection.",
      "By using the Layout Inspector to check for deep view hierarchies.",
      "By adding `Thread.sleep()` calls to see where the application hangs.",
      "By reading Logcat for messages that explicitly say 'memory leak detected'."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 322,
    "question": "What is `StrictMode` and in which build type should it be enabled?",
    "answer": "A developer tool that detects accidental disk or network access on the main thread. It should only be enabled in debug builds to avoid crashing the app for release users.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A security feature that enforces strict permissions. It should be enabled in all build types.",
      "A developer tool that detects accidental disk or network access on the main thread. It should only be enabled in debug builds to avoid crashing the app for release users.",
      "A code shrinker like R8 that makes the app more secure. It should only be enabled in release builds.",
      "A linter that enforces strict coding styles. It runs during the build process.",
      "A tool for profiling CPU usage. It should be used with the Android Studio Profiler."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 323,
    "question": "What is 'overdraw' and how can you visualize it?",
    "answer": "It's when the app draws the same pixel multiple times in a single frame. It can be visualized using the 'Debug GPU Overdraw' option in Developer Options, which colors pixels based on how many times they've been drawn.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It's when the app draws outside the screen bounds. It can be visualized with 'Show layout bounds'.",
      "It's when the app uses too much GPU memory. It can be visualized in the Memory Profiler.",
      "It's when the app draws the same pixel multiple times in a single frame. It can be visualized using the 'Debug GPU Overdraw' option in Developer Options, which colors pixels based on how many times they've been drawn.",
      "It's a delay in drawing the first frame of the app. It can be measured with Macrobenchmark.",
      "It's a visual glitch where UI elements overlap incorrectly. It must be found through manual testing."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 324,
    "question": "What is the primary function of R8 in the Android build process?",
    "answer": "To shrink (remove unused code), obfuscate (rename classes and members), and optimize the application's code to reduce APK size and make it harder to reverse-engineer.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To compile Kotlin code into Java bytecode.",
      "To shrink (remove unused code), obfuscate (rename classes and members), and optimize the application's code to reduce APK size and make it harder to reverse-engineer.",
      "To manage dependencies and resolve version conflicts.",
      "To automatically generate Android Manifest files for different product flavors.",
      "To sign the final release APK with a keystore certificate."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 325,
    "question": "When and why should you use the Android Keystore system?",
    "answer": "To store and manage cryptographic keys in a hardware-backed container, making them very difficult to extract. It should be used for sensitive data like encryption keys or user authentication tokens.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To store simple key-value pairs like user settings, as a replacement for SharedPreferences.",
      "To store API keys that are needed at build time in `build.gradle`.",
      "To store and manage cryptographic keys in a hardware-backed container, making them very difficult to extract. It should be used for sensitive data like encryption keys or user authentication tokens.",
      "To store the signing certificate used to sign your release APK.",
      "To cache large files like images and videos securely on disk."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 326,
    "question": "What is certificate pinning?",
    "answer": "A security mechanism where an app is configured to trust only a specific, predefined set of server certificates or public keys, preventing man-in-the-middle attacks even if a device's trusted CA is compromised.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The process of pinning a specific version of a dependency in `build.gradle`.",
      "A security mechanism where an app is configured to trust only a specific, predefined set of server certificates or public keys, preventing man-in-the-middle attacks even if a device's trusted CA is compromised.",
      "The practice of storing the app signing certificate in the Android Keystore.",
      "A way to pin a notification to the top of the notification shade so it cannot be dismissed.",
      "A performance optimization where you pin a background thread to a specific CPU core."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 327,
    "question": "Why is storing sensitive keys in `build.gradle` or `strings.xml` considered insecure?",
    "answer": "Because these values are compiled directly into the APK and can be easily extracted by anyone who decompiles the application.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Because it can significantly slow down the build process.",
      "Because these files are publicly visible if the source code is on GitHub.",
      "Because these values are compiled directly into the APK and can be easily extracted by anyone who decompiles the application.",
      "Because there is a strict size limit on the values that can be stored there.",
      "Because it violates the Single Responsibility Principle by mixing configuration with code/resources."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 328,
    "question": "What is the difference between an Android App Bundle (AAB) and an APK?",
    "answer": "An AAB is a publishing format you upload to Google Play. Play then uses the AAB to generate and serve optimized APKs for each user's specific device configuration (e.g., screen density, CPU architecture).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "An AAB is just a compressed folder of multiple APKs.",
      "An AAB is a publishing format you upload to Google Play. Play then uses the AAB to generate and serve optimized APKs for each user's specific device configuration (e.g., screen density, CPU architecture).",
      "An APK is for debug builds and an AAB is for release builds.",
      "You can install an AAB directly on a device, but you cannot install an APK.",
      "AAB is an older, deprecated format replaced by universal APKs."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 329,
    "question": "What is the purpose of the `buildSrc` directory in a Gradle project?",
    "answer": "It's a special directory for organizing build logic. Custom tasks, plugins, and dependencies defined here can be easily shared across all modules in the project, promoting build logic reuse.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is where the application's main source code is stored.",
      "It is a directory for storing test-only source code and resources.",
      "It's a special directory for organizing build logic. Custom tasks, plugins, and dependencies defined here can be easily shared across all modules in the project, promoting build logic reuse.",
      "It is where Gradle caches downloaded dependencies.",
      "It is a deprecated feature and has been replaced by Version Catalogs."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 330,
    "question": "What are `buildConfigField` and `resValue` in `build.gradle` used for?",
    "answer": "`buildConfigField` generates a constant in the `BuildConfig.java` class, while `resValue` generates a resource value (e.g., a string). This allows for build-time configuration of code and resources.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "They are both used to define dependencies for different product flavors.",
      "`buildConfigField` generates a constant in the `BuildConfig.java` class, while `resValue` generates a resource value (e.g., a string). This allows for build-time configuration of code and resources.",
      "`buildConfigField` is for defining ProGuard rules, and `resValue` is for defining resource shrinking rules.",
      "They are interchangeable ways to add metadata to the `AndroidManifest.xml`.",
      "`buildConfigField` adds a value to `SharedPreferences`, while `resValue` adds it to the Room database."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 331,
    "question": "What is Continuous Integration (CI) in the context of Android development?",
    "answer": "The automated practice of merging all developer code changes into a central repository, after which automated builds and tests are run to detect integration issues early.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The process of manually testing the app before every release.",
      "The automated practice of releasing a new version of the app to the Play Store every day.",
      "The automated practice of merging all developer code changes into a central repository, after which automated builds and tests are run to detect integration issues early.",
      "The practice of integrating multiple third-party SDKs into an application.",
      "A feature in Android Studio that continuously compiles your code as you type."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 332,
    "question": "What is a Gradle Version Catalog?",
    "answer": "A centralized, type-safe way to define and share dependencies and their versions across all modules in a project, improving maintainability and reducing errors.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A log file that catalogs all the Gradle versions used to build a project.",
      "A plugin that automatically updates dependencies to their latest versions.",
      "A centralized, type-safe way to define and share dependencies and their versions across all modules in a project, improving maintainability and reducing errors.",
      "A feature in `buildSrc` for defining project-wide variables.",
      "A list of approved dependencies for a project, for security purposes."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 333,
    "question": "What are the main benefits of modularizing an Android application?",
    "answer": "Faster build times (due to parallel builds and caching), improved code organization and ownership, better scalability, and the ability to enable dynamic feature delivery.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is required by Google Play for all new apps.",
      "It makes the final installed app run significantly faster on the user's device.",
      "Faster build times (due to parallel builds and caching), improved code organization and ownership, better scalability, and the ability to enable dynamic feature delivery.",
      "It automatically makes the application more secure by isolating features.",
      "The main benefit is reducing the final APK size to under 10MB."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 334,
    "question": "What is the difference between a library module and a dynamic feature module?",
    "answer": "A library module is always included in the base APK. A dynamic feature module can be downloaded on-demand after the initial app install, reducing the initial download size.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "There is no difference; the terms are used interchangeably.",
      "A library module is for Kotlin code, and a dynamic feature module is for Java code.",
      "A library module can be published to Maven Central, while a dynamic feature module cannot.",
      "A library module is always included in the base APK. A dynamic feature module can be downloaded on-demand after the initial app install, reducing the initial download size.",
      "Dynamic feature modules are deprecated in favor of Android App Bundles."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 335,
    "question": "What is the purpose of `IdlingResource` in Espresso tests?",
    "answer": "To signal to Espresso when the app is busy with asynchronous work (e.g., network calls). Espresso waits for the resource to become idle before performing UI actions and assertions, preventing flaky tests.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To provide mock data to the UI during a test.",
      "To make tests run faster by idling the CPU between operations.",
      "To signal to Espresso when the app is busy with asynchronous work (e.g., network calls). Espresso waits for the resource to become idle before performing UI actions and assertions, preventing flaky tests.",
      "To identify UI resources like Views and Buttons by their ID.",
      "A resource used for managing the lifecycle of the test itself."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 336,
    "question": "What is the key difference between a local unit test (in `/test`) and an instrumented test (in `/androidTest`)?",
    "answer": "Local tests run on your computer's JVM and are fast, ideal for logic (e.g., in a ViewModel). Instrumented tests run on an Android device or emulator, which is required for testing code that uses Android Framework APIs.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Local tests are written in Java, while instrumented tests must be written in Kotlin.",
      "Local tests run on your computer's JVM and are fast, ideal for logic (e.g., in a ViewModel). Instrumented tests run on an Android device or emulator, which is required for testing code that uses Android Framework APIs.",
      "Local tests are for testing UI, while instrumented tests are for testing business logic.",
      "Local tests do not require JUnit, but instrumented tests do.",
      "Only instrumented tests can use mocking libraries like MockK or Mockito."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 337,
    "question": "When would you use UI Automator instead of Espresso for UI testing?",
    "answer": "When you need to test user flows that interact with the system UI or other apps (e.g., verifying a notification appears or interacting with the Settings app), as Espresso is limited to your app's process.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "UI Automator is a simpler, lightweight version of Espresso for basic tests.",
      "When you need to test user flows that interact with the system UI or other apps (e.g., verifying a notification appears or interacting with the Settings app), as Espresso is limited to your app's process.",
      "Espresso is for testing Views, and UI Automator is for testing Jetpack Compose.",
      "UI Automator is used for automating unit tests, not UI tests.",
      "You should always use UI Automator because it is more powerful than Espresso."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 338,
    "question": "In MockK, what is the difference between `mockk()` and `spyk()`?",
    "answer": "`mockk()` creates a pure mock where all functions do nothing unless explicitly stubbed. `spyk()` wraps a real object, so it will call the real methods by default unless a specific method is stubbed.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`mockk()` is for classes, and `spyk()` is for interfaces.",
      "`mockk()` creates a pure mock where all functions do nothing unless explicitly stubbed. `spyk()` wraps a real object, so it will call the real methods by default unless a specific method is stubbed.",
      "`spyk()` is a 'strict' mock that throws an error for unstubbed calls, while `mockk()` is 'relaxed'.",
      "`mockk()` can be used in local tests, but `spyk()` can only be used in instrumented tests.",
      "There is no difference; `spyk()` is an alias for `mockk()`."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 339,
    "question": "What is a 'flaky test'?",
    "answer": "A test that passes and fails intermittently without any code changes. This is often caused by race conditions, reliance on timings, or unhandled asynchronous operations.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A test that is written with incomplete assertions.",
      "A test that always fails and indicates a bug in the application code.",
      "A test that passes and fails intermittently without any code changes. This is often caused by race conditions, reliance on timings, or unhandled asynchronous operations.",
      "A test that runs very slowly and slows down the CI pipeline.",
      "A test that tests a trivial or unimportant part of the codebase."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 340,
    "question": "What is the relationship between `Handler`, `Looper`, and `MessageQueue`?",
    "answer": "Each thread can have one `Looper` that continuously processes a `MessageQueue`. A `Handler` is used to post messages or Runnables to that queue from any thread, which will then be executed on the Looper's thread.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A `Handler` loops through a `MessageQueue` managed by a `Looper`.",
      "A `Looper` is a message, a `Handler` is the queue, and `MessageQueue` is the thread.",
      "Each thread can have one `Looper` that continuously processes a `MessageQueue`. A `Handler` is used to post messages or Runnables to that queue from any thread, which will then be executed on the Looper's thread.",
      "They are deprecated components replaced by Kotlin Coroutines.",
      "They are all part of the Binder IPC mechanism for cross-process communication."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 341,
    "question": "What is Binder in the context of the Android OS?",
    "answer": "The primary Inter-Process Communication (IPC) mechanism in Android. It allows different processes (e.g., an app and a system service) to communicate efficiently and securely.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A UI data binding library for connecting layouts to data sources.",
      "A component used for binding an Activity to a background Service.",
      "The primary Inter-Process Communication (IPC) mechanism in Android. It allows different processes (e.g., an app and a system service) to communicate efficiently and securely.",
      "A security tool for binding an app's permissions to its signing key.",
      "A type of `RecyclerView.Adapter` for binding complex data models to views."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 342,
    "question": "What happens to an Activity during a configuration change (e.g., screen rotation), and how does a `ViewModel` survive it?",
    "answer": "The original Activity instance is destroyed and a new one is created. A `ViewModel` survives because its lifecycle is scoped to a `ViewModelStoreOwner` that is retained across this recreation, not to the Activity instance itself.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The Activity is just paused and then resumed, and the `ViewModel` does nothing special.",
      "The Activity is destroyed and the `ViewModel` is saved to disk and then reloaded.",
      "The original Activity instance is destroyed and a new one is created. A `ViewModel` survives because its lifecycle is scoped to a `ViewModelStoreOwner` that is retained across this recreation, not to the Activity instance itself.",
      "The `ViewModel` is automatically saved in the `onSaveInstanceState` bundle.",
      "The Android OS prevents the `ViewModel` from being garbage collected using a static reference."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 343,
    "question": "What is the purpose of the `baseline-prof.txt` file?",
    "answer": "It contains a list of classes and methods used during critical user journeys (like app startup) that should be pre-compiled (AOT) to improve performance, especially reducing startup time.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It defines the baseline styles and themes for the application.",
      "It is a ProGuard/R8 configuration file for keeping certain classes during obfuscation.",
      "It contains a list of classes and methods used during critical user journeys (like app startup) that should be pre-compiled (AOT) to improve performance, especially reducing startup time.",
      "It is a text file that lists all baseline permissions the app requires.",
      "It is a report generated by the linter showing baseline code quality metrics."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 344,
    "question": "What is the role of the `SavedStateHandle` in a `ViewModel`?",
    "answer": "It is a key-value map that allows a `ViewModel` to save and restore its state, ensuring it can survive not just configuration changes but also system-initiated process death.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is used to handle the saved state of UI widgets in a custom View.",
      "It provides a handle to the `onSaveInstanceState` Bundle from an Activity.",
      "It is a key-value map that allows a `ViewModel` to save and restore its state, ensuring it can survive not just configuration changes but also system-initiated process death.",
      "It is a mechanism for handling state within Jetpack Compose exclusively.",
      "It is a reference to a `Handler` on the main thread for saving state asynchronously."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 345,
    "question": "In Jetpack Compose, what is the difference between `remember` and `rememberSaveable`?",
    "answer": "`remember` keeps state across recompositions, but the state is lost on configuration change or process death. `rememberSaveable` also keeps state across recompositions but additionally saves and restores it across configuration changes and process death.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`remember` is for mutable state, while `rememberSaveable` is for immutable state.",
      "`remember` keeps state across recompositions, but the state is lost on configuration change or process death. `rememberSaveable` also keeps state across recompositions but additionally saves and restores it across configuration changes and process death.",
      "`rememberSaveable` is a deprecated name for `remember`.",
      "`remember` is used in Activities, and `rememberSaveable` is used in Fragments.",
      "`rememberSaveable` stores the state in a `ViewModel`, while `remember` stores it in the composition."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 346,
    "question": "What is the primary goal of the `FLAG_ACTIVITY_REORDER_TO_FRONT` Intent flag?",
    "answer": "If an instance of the target Activity already exists in the task's back stack, this flag will bring that instance to the foreground instead of creating a new one, reordering the stack.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It clears the entire task stack and starts the new Activity as the root.",
      "It ensures the Activity is always launched at the front of a new task.",
      "If an instance of the target Activity already exists in the task's back stack, this flag will bring that instance to the foreground instead of creating a new one, reordering the stack.",
      "It reorders all activities in the stack alphabetically.",
      "It is used to bring a background app's task to the foreground."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 347,
    "question": "Why would you use a `ContentProvider`?",
    "answer": "To securely share a structured set of your app's data with other applications, managing access through a standard interface with permissions.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To provide static content like images and strings within your own app.",
      "To provide a direct-access, high-performance database for your app's UI.",
      "To securely share a structured set of your app's data with other applications, managing access through a standard interface with permissions.",
      "It is the only way to store content on an SD card.",
      "It is a modern replacement for `SharedPreferences`."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 348,
    "question": "What is the purpose of an `AndroidManifest.xml` file?",
    "answer": "It is a required file that presents essential information about the app to the Android build tools, the Android OS, and Google Play, such as the app's components, permissions, and hardware/software features.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is a file that contains all the string resources for the application.",
      "It is a build script, similar to `build.gradle`, for configuring the app.",
      "It is an optional file for providing metadata to Android Studio's editor.",
      "It is a required file that presents essential information about the app to the Android build tools, the Android OS, and Google Play, such as the app's components, permissions, and hardware/software features.",
      "It is where you declare all of your app's dependencies."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 349,
    "question": "What is the main difference between `LiveData.observe()` and `LiveData.observeForever()`?",
    "answer": "`observe()` is lifecycle-aware and automatically removes the observer when the provided `LifecycleOwner` is destroyed. `observeForever()` is not lifecycle-aware and requires manual removal of the observer via `removeObserver()` to prevent leaks.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`observeForever()` receives updates even when the app is in the background, while `observe()` does not.",
      "`observe()` is for Activities and `observeForever()` is for Services.",
      "`observeForever()` is a deprecated method.",
      "`observe()` is lifecycle-aware and automatically removes the observer when the provided `LifecycleOwner` is destroyed. `observeForever()` is not lifecycle-aware and requires manual removal of the observer via `removeObserver()` to prevent leaks.",
      "`observe()` can only have one observer, while `observeForever()` allows multiple observers."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 350,
    "question": "What is the purpose of the `invalidate()` and `requestLayout()` methods on a View?",
    "answer": "`invalidate()` tells the system that the View's content needs to be redrawn (triggers `onDraw()`). `requestLayout()` indicates that the View's bounds have changed and it needs to be remeasured and redrawn (triggers `onMeasure()`, `onLayout()`, `onDraw()`).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`invalidate()` redraws the view, and `requestLayout()` re-inflates it from XML.",
      "They are identical methods; one is just an alias for the other.",
      "`requestLayout()` should be called from a background thread, while `invalidate()` must be called from the UI thread.",
      "`invalidate()` tells the system that the View's content needs to be redrawn (triggers `onDraw()`). `requestLayout()` indicates that the View's bounds have changed and it needs to be remeasured and redrawn (triggers `onMeasure()`, `onLayout()`, `onDraw()`).",
      "`invalidate()` is for custom views, while `requestLayout()` is for standard Android widgets."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 351,
    "question": "What are the three main phases of rendering a Jetpack Compose frame?",
    "answer": "Composition, Layout, and Drawing.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Initialization, Rendering, and Updating.",
      "Building, Measuring, and Displaying.",
      "State Calculation, UI Construction, and Event Handling.",
      "Composition, Layout, and Drawing.",
      "Inflation, Measurement, and Painting."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 352,
    "question": "What is the primary role of the Jetpack Compose compiler plugin?",
    "answer": "It transforms `@Composable` functions at compile time, adding extra parameters to track state and manage recomposition, making the declarative UI system possible.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It converts Kotlin code into the old Android View system for backward compatibility.",
      "It is only responsible for enabling the `@Preview` annotation in Android Studio.",
      "It transforms `@Composable` functions at compile time, adding extra parameters to track state and manage recomposition, making the declarative UI system possible.",
      "It optimizes layout performance at runtime by analyzing the UI tree.",
      "It is a linter that enforces Compose-specific coding conventions."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 353,
    "question": "Under what condition does Jetpack Compose decide to 'skip' the recomposition of a composable function?",
    "answer": "When the function's inputs are determined to be 'stable' and their values have not changed since the last composition.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It never skips recomposition; it always re-runs every function in the tree.",
      "When the composable is off-screen, regardless of its inputs.",
      "When the function is marked with a special `@Skip` annotation.",
      "When the function's inputs are determined to be 'stable' and their values have not changed since the last composition.",
      "Only when the data is provided by a `StateFlow` from a ViewModel."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 354,
    "question": "What is the purpose of the `snapshotFlow` function in Jetpack Compose?",
    "answer": "To convert one or more Compose `State<T>` objects into a cold Kotlin Flow, bridging the reactive Compose state system with the world of coroutines.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To take a screenshot of the current composable and save it as a `Flow<Bitmap>`.",
      "To create a `StateFlow` directly from a composable function.",
      "To convert a `LiveData` object into a Flow within a composable's lifecycle.",
      "To create a snapshot of the current UI hierarchy for testing purposes.",
      "To convert one or more Compose `State<T>` objects into a cold Kotlin Flow, bridging the reactive Compose state system with the world of coroutines."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 355,
    "question": "What is the difference between a 'cold' and a 'warm' app startup?",
    "answer": "A cold start is when the app's process has not been created yet. A warm start is when the process is already running, but the Activity needs to be recreated (e.g., from the background).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A cold start is the very first time an app is launched after installation; all others are warm starts.",
      "A cold start is when the app is launched on a device with a cold CPU, and a warm start is on a device that has been running for a while.",
      "A cold start is when the app's process has not been created yet. A warm start is when the process is already running, but the Activity needs to be recreated (e.g., from the background).",
      "Cold starts are for debug builds, and warm starts are for release builds.",
      "There is no difference; the terms describe the same process of launching an app."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 356,
    "question": "For what kind of performance analysis are tools like Perfetto or Systrace used?",
    "answer": "For capturing and analyzing detailed, system-wide performance traces to diagnose complex issues like UI jank, threading problems, or slow app startup.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "For detecting memory leaks by analyzing heap dumps.",
      "For logging network requests and responses in detail.",
      "For analyzing the complexity of a Jetpack Compose UI hierarchy.",
      "For capturing and analyzing detailed, system-wide performance traces to diagnose complex issues like UI jank, threading problems, or slow app startup.",
      "For running automated UI tests and measuring their execution time."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 357,
    "question": "What is the recommended dependency direction between feature, data, and domain modules in a multi-module architecture?",
    "answer": "Feature modules depend on domain/data modules, but domain/data modules must not depend on feature modules. This creates a one-way dependency flow towards the core business logic.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "All modules should depend on each other to facilitate communication.",
      "Data modules should depend on feature modules to know where the data is displayed.",
      "Feature modules depend on domain/data modules, but domain/data modules must not depend on feature modules. This creates a one-way dependency flow towards the core business logic.",
      "Feature modules should only depend on other feature modules.",
      "The dependency direction does not matter as long as the code compiles."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 358,
    "question": "How does a `CoroutineExceptionHandler` work and in which coroutine builder is it effective?",
    "answer": "It's an element in a `CoroutineContext` that catches uncaught exceptions from top-level coroutines. It is effective for coroutines started with `launch`, but not with `async` (where exceptions are held in the `Deferred` result).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is a global handler that catches all exceptions in any coroutine.",
      "It is a replacement for a `try-catch` block inside a suspend function.",
      "It's an element in a `CoroutineContext` that catches uncaught exceptions from top-level coroutines. It is effective for coroutines started with `launch`, but not with `async` (where exceptions are held in the `Deferred` result).",
      "It only works with `supervisorScope` and is ignored otherwise.",
      "It is automatically installed by `viewModelScope` to prevent all crashes."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 359,
    "question": "What is a key conceptual difference between a Kotlin `Flow` and a `Channel`?",
    "answer": "A `Flow` is a cold stream representing a sequence of values over time, designed for a single collector. A `Channel` is a hot communication primitive (like a queue) that can be used for communication between multiple coroutines.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`Flow` is for reactive UI updates, while `Channel` is for background threading.",
      "`Channel` is a deprecated component that has been fully replaced by `SharedFlow`.",
      "A `Flow` is synchronous, while a `Channel` is always asynchronous.",
      "A `Flow` can only emit one value, while a `Channel` can emit multiple values.",
      "A `Flow` is a cold stream representing a sequence of values over time, designed for a single collector. A `Channel` is a hot communication primitive (like a queue) that can be used for communication between multiple coroutines."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 360,
    "question": "What is the main advantage of using Robolectric for tests?",
    "answer": "It allows you to run tests that use Android Framework APIs on the local JVM without needing a device or emulator, making them significantly faster than instrumented tests.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is the only framework that can test Jetpack Compose UI.",
      "It allows you to write UI tests in pure Java instead of Kotlin.",
      "It provides more powerful mocking capabilities than MockK or Mockito.",
      "It runs tests on a real device, providing higher fidelity than Espresso.",
      "It allows you to run tests that use Android Framework APIs on the local JVM without needing a device or emulator, making them significantly faster than instrumented tests."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 361,
    "question": "What is the purpose of a `-keep` rule in a ProGuard or R8 configuration file?",
    "answer": "To specify classes, methods, or fields that must not be removed (shrunk) or renamed (obfuscated) during the build process, which is essential for code that is accessed via reflection or JNI.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To keep a specific version of a library and prevent Gradle from updating it.",
      "To keep a file or resource from being compressed in the final APK.",
      "To specify classes, methods, or fields that must not be removed (shrunk) or renamed (obfuscated) during the build process, which is essential for code that is accessed via reflection or JNI.",
      "To keep a background service running even when the app is closed.",
      "To keep the build cache from being cleared between builds."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 362,
    "question": "What is VSYNC and what is its role in the Android rendering pipeline?",
    "answer": "VSYNC is a timing signal from the display hardware (e.g., every 16.6ms for a 60Hz display) that synchronizes the app's frame rendering loop. The app aims to produce a frame in time for each VSYNC signal to achieve smooth animation without tearing.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is a protocol for synchronizing data between a client and a server.",
      "It is a Gradle task for syncing project dependencies.",
      "VSYNC is a timing signal from the display hardware (e.g., every 16.6ms for a 60Hz display) that synchronizes the app's frame rendering loop. The app aims to produce a frame in time for each VSYNC signal to achieve smooth animation without tearing.",
      "It is a security feature that verifies the integrity of the vertical layout of an app.",
      "It is an API in `RecyclerView` for vertically synchronizing scroll positions."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 363,
    "question": "What is the primary benefit of using Gradle Convention Plugins (e.g., in `buildSrc` or included builds)?",
    "answer": "To centralize and share common build configuration logic (like applying plugins, setting up Android SDK versions, or configuring libraries) across multiple modules in a type-safe way, reducing boilerplate and errors in `build.gradle` files.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "They are required to enable product flavors and build types.",
      "They allow you to write Gradle scripts in Java instead of Groovy or Kotlin.",
      "To centralize and share common build configuration logic (like applying plugins, setting up Android SDK versions, or configuring libraries) across multiple modules in a type-safe way, reducing boilerplate and errors in `build.gradle` files.",
      "Their only purpose is to make the build process faster.",
      "They are a way to download plugins from sources other than the Gradle Plugin Portal."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 364,
    "question": "What is 'State Hoisting' in Jetpack Compose?",
    "answer": "It is the pattern of moving state from a composable to its caller. This makes the original composable stateless, more reusable, and easier to test, following the principle of 'state flows down, events flow up'.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Lifting state from a Composable directly into a global singleton object.",
      "Automatically saving Composable state to the `SavedStateHandle`.",
      "It is the pattern of moving state from a composable to its caller. This makes the original composable stateless, more reusable, and easier to test, following the principle of 'state flows down, events flow up'.",
      "Hoisting a composable function higher up in the UI tree to give it more priority.",
      "The process by which the Compose compiler 'hoists' state variables into the composition tree."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 365,
    "question": "What is the purpose of the `key` composable in Jetpack Compose?",
    "answer": "To provide a stable and unique identifier for a composable or group of composables. This helps Compose understand how items have moved, been added, or been removed in a list, allowing it to correctly preserve `remember`ed state across recompositions.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is used to store a cryptographic key for encrypting the composable's state.",
      "It is the primary key used when storing composable state in a Room database.",
      "It is a unique identifier used by UI testing frameworks like Espresso to find a specific composable.",
      "To provide a stable and unique identifier for a composable or group of composables. This helps Compose understand how items have moved, been added, or been removed in a list, allowing it to correctly preserve `remember`ed state across recompositions.",
      "It is used to listen for specific key presses from a physical keyboard."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 366,
    "question": "What is the primary difference between `git merge` and `git rebase`?",
    "answer": "`git merge` creates a new merge commit, preserving the history of both branches. `git rebase` rewrites the commit history by placing commits from one branch onto the tip of another, creating a linear history.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`git merge` is for combining remote branches, while `git rebase` is for local branches.",
      "`git rebase` is a safer option as it prevents all merge conflicts.",
      "`git merge` creates a new merge commit, preserving the history of both branches. `git rebase` rewrites the commit history by placing commits from one branch onto the tip of another, creating a linear history.",
      "`git merge` rewrites history, while `git rebase` preserves it.",
      "They are identical commands with different names."
    ],
    "category": "OTHER"
  },
  {
    "id": 367,
    "question": "What does the `git stash` command do?",
    "answer": "It temporarily saves your uncommitted local changes (both staged and unstaged) so you can switch branches or work on something else, and then re-apply them later.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It permanently deletes your uncommitted changes.",
      "It commits your current changes with a temporary message.",
      "It pushes your changes directly to the remote repository, bypassing the staging area.",
      "It temporarily saves your uncommitted local changes (both staged and unstaged) so you can switch branches or work on something else, and then re-apply them later.",
      "It creates a new branch with your current changes."
    ],
    "category": "OTHER"
  },
  {
    "id": 368,
    "question": "What is the purpose of a `.gitignore` file?",
    "answer": "To specify intentionally untracked files and directories that Git should ignore and not include in commits, such as build files, IDE configurations, and local secrets.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To list all the files in the repository for faster indexing.",
      "To specify intentionally untracked files and directories that Git should ignore and not include in commits, such as build files, IDE configurations, and local secrets.",
      "A security file that lists which users are allowed to commit.",
      "A configuration file for setting up Git hooks.",
      "A log file that records all ignored commits."
    ],
    "category": "OTHER"
  },
  {
    "id": 369,
    "question": "What is the 'DRY' principle in software development?",
    "answer": "Don't Repeat Yourself. It means reducing the repetition of software patterns and code by replacing them with abstractions or using data normalization to avoid redundancy.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Don't Repeat Yourself. It means reducing the repetition of software patterns and code by replacing them with abstractions or using data normalization to avoid redundancy.",
      "Do Re-evaluate Yourself. It's a principle about frequently refactoring your code.",
      "Don't Release Yesterday. A principle about avoiding releases on Fridays.",
      "Develop Robustly, Y'all. A principle focused on writing resilient code.",
      "Data Rules You. A principle that emphasizes data-driven development."
    ],
    "category": "OTHER"
  },
  {
    "id": 370,
    "question": "What is 'technical debt'?",
    "answer": "The implied cost of rework caused by choosing an easy, limited solution now instead of using a better approach that would take longer. It can slow down future development if not addressed.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The monetary cost of the software licenses and tools used in a project.",
      "The time developers spend in meetings instead of coding.",
      "The implied cost of rework caused by choosing an easy, limited solution now instead of using a better approach that would take longer. It can slow down future development if not addressed.",
      "Bugs that are found in production after a release.",
      "Outdated documentation for a project."
    ],
    "category": "OTHER"
  },
  {
    "id": 371,
    "question": "What is the primary purpose of a code review?",
    "answer": "To improve code quality and knowledge sharing within the team by having peers review code for bugs, style adherence, and architectural soundness before it is merged.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To allow senior developers to rewrite junior developers' code.",
      "A formal process to blame developers for writing bad code.",
      "To improve code quality and knowledge sharing within the team by having peers review code for bugs, style adherence, and architectural soundness before it is merged.",
      "Its only purpose is to check for correct code formatting.",
      "A meeting where the entire team reads code line-by-line."
    ],
    "category": "OTHER"
  },
  {
    "id": 372,
    "question": "In the context of data structures, what is the main performance difference between an `ArrayList` and a `LinkedList` for adding elements to the end of the list?",
    "answer": "For adding to the end, `ArrayList` is typically faster (amortized constant time O(1)), while `LinkedList` is also constant time O(1) but with higher overhead per element.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`LinkedList` is always faster for adding elements anywhere.",
      "`ArrayList` is O(n) for adding to the end, `LinkedList` is O(1).",
      "They have the exact same performance characteristics.",
      "For adding to the end, `ArrayList` is typically faster (amortized constant time O(1)), while `LinkedList` is also constant time O(1) but with higher overhead per element.",
      "`ArrayList` is faster for adding to the beginning, `LinkedList` is faster for adding to the end."
    ],
    "category": "OTHER"
  },
  {
    "id": 373,
    "question": "When would you prefer using a `HashMap` over a `TreeMap`?",
    "answer": "When you need fast key-value lookups (average O(1)) and the order of elements does not matter.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "When you need the elements to be sorted by their natural order or a custom comparator.",
      "When you need fast key-value lookups (average O(1)) and the order of elements does not matter.",
      "When you have a very small number of elements, as `TreeMap` is more memory efficient.",
      "`HashMap` is thread-safe, while `TreeMap` is not.",
      "You should always use `TreeMap` because it provides predictable iteration order."
    ],
    "category": "OTHER"
  },
  {
    "id": 374,
    "question": "What is the primary role of the Product Owner in a Scrum team?",
    "answer": "To manage the product backlog, representing the interests of the stakeholders and defining the features and priorities of the product.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To manage the development team and assign daily tasks.",
      "To facilitate Scrum ceremonies like the daily stand-up and retrospective.",
      "To write the code for the user stories in the backlog.",
      "To manage the product backlog, representing the interests of the stakeholders and defining the features and priorities of the product.",
      "To test the application and approve the final release."
    ],
    "category": "OTHER"
  },
  {
    "id": 375,
    "question": "What is the purpose of a Sprint Retrospective in Scrum?",
    "answer": "It is a meeting for the Scrum team to reflect on the past sprint and identify opportunities for improvement in their processes, tools, and teamwork for the next sprint.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To plan the work for the upcoming sprint.",
      "To demonstrate the completed work to stakeholders.",
      "It is a meeting for the Scrum team to reflect on the past sprint and identify opportunities for improvement in their processes, tools, and teamwork for the next sprint.",
      "To discuss and refine the items in the product backlog.",
      "A daily meeting to sync up on progress and impediments."
    ],
    "category": "OTHER"
  },
  {
    "id": 376,
    "question": "What is the key difference between Scrum and Kanban?",
    "answer": "Scrum is time-boxed (using fixed-length sprints) and prescribes specific roles and ceremonies, while Kanban is a continuous flow model focused on limiting work-in-progress (WIP) without fixed iterations.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Kanban is used for software development, while Scrum is for project management.",
      "Scrum uses a physical board, while Kanban uses digital tools.",
      "Scrum is time-boxed (using fixed-length sprints) and prescribes specific roles and ceremonies, while Kanban is a continuous flow model focused on limiting work-in-progress (WIP) without fixed iterations.",
      "In Kanban, you have a daily stand-up, but in Scrum, you do not.",
      "There is no difference; they are just different names for the same agile methodology."
    ],
    "category": "OTHER"
  },
  {
    "id": 377,
    "question": "What is the purpose of the app signing key for Android?",
    "answer": "It serves as a cryptographic signature to verify that you are the authentic developer of the app and its updates, preventing others from distributing malicious updates to your app.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is used to encrypt the source code of the application.",
      "It serves as a cryptographic signature to verify that you are the authentic developer of the app and its updates, preventing others from distributing malicious updates to your app.",
      "It is an API key for accessing Google Play Services.",
      "It is only used to sign debug builds for testing on devices.",
      "It is a key that users need to enter to unlock the app."
    ],
    "category": "OTHER"
  },
  {
    "id": 378,
    "question": "In the Google Play Console, what is the main difference between the 'alpha' and 'beta' release tracks?",
    "answer": "The alpha track is typically for smaller, internal or trusted tester groups to test early, potentially unstable versions, while the beta track is for a wider, public audience to test a more stable, release-candidate version.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Alpha releases are for features, and beta releases are for bug fixes.",
      "There is no difference; they are two separate tracks for A/B testing.",
      "The alpha track is typically for smaller, internal or trusted tester groups to test early, potentially unstable versions, while the beta track is for a wider, public audience to test a more stable, release-candidate version.",
      "Apps in the alpha track cannot be published to production, but beta apps can.",
      "Alpha releases are free, while beta releases require payment from testers."
    ],
    "category": "OTHER"
  },
  {
    "id": 379,
    "question": "What is a 'staged rollout' in the Google Play Console?",
    "answer": "A method of releasing an app update to a limited percentage of users, which can be gradually increased. This helps in monitoring for crashes and negative feedback before releasing to everyone.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A way to schedule a release for a specific date and time.",
      "A method of releasing an app update to a limited percentage of users, which can be gradually increased. This helps in monitoring for crashes and negative feedback before releasing to everyone.",
      "A feature that divides the app into stages for users to unlock.",
      "Releasing the app in different countries at different times.",
      "The process of submitting an app for review through multiple stages."
    ],
    "category": "OTHER"
  },
  {
    "id": 380,
    "question": "What is the main accessibility service on Android for users with visual impairments?",
    "answer": "TalkBack, which provides spoken feedback so users can navigate the device and app UIs without seeing the screen.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Google Assistant",
      "TalkBack, which provides spoken feedback so users can navigate the device and app UIs without seeing the screen.",
      "Select to Speak",
      "Live Caption",
      "Accessibility Scanner"
    ],
    "category": "OTHER"
  },
  {
    "id": 381,
    "question": "What does the `git cherry-pick` command do?",
    "answer": "It allows you to apply the changes introduced by a specific, existing commit from another branch onto your current branch.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It allows you to apply the changes introduced by a specific, existing commit from another branch onto your current branch.",
      "It deletes a specific commit from the branch history.",
      "It selects the best commits from a branch to merge.",
      "It is a tool for visually comparing two branches.",
      "It is an alias for creating a new branch from a commit."
    ],
    "category": "OTHER"
  },
  {
    "id": 382,
    "question": "What is a 'detached HEAD' state in Git?",
    "answer": "It occurs when you check out a specific commit, tag, or remote branch directly, instead of a local branch. You are no longer on any branch, and new commits will not belong to any branch until you create one.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A state where your local repository is disconnected from the remote.",
      "It means the HEAD of the current branch has been deleted.",
      "It is an error that occurs when a merge conflict cannot be resolved automatically.",
      "It occurs when you check out a specific commit, tag, or remote branch directly, instead of a local branch. You are no longer on any branch, and new commits will not belong to any branch until you create one.",
      "It's the default state before you make your first commit."
    ],
    "category": "OTHER"
  },
  {
    "id": 383,
    "question": "What is the primary benefit of squashing commits in a pull request?",
    "answer": "It combines multiple, smaller, work-in-progress commits into a single, cohesive commit. This makes the project history cleaner, easier to read, and simpler to revert if needed.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is the only way to resolve merge conflicts.",
      "It makes the pull request smaller in file size.",
      "It automatically runs tests on each individual commit.",
      "It breaks a large commit into multiple smaller ones.",
      "It combines multiple, smaller, work-in-progress commits into a single, cohesive commit. This makes the project history cleaner, easier to read, and simpler to revert if needed."
    ],
    "category": "OTHER"
  },
  {
    "id": 384,
    "question": "In CI/CD, what is an 'artifact'?",
    "answer": "A file or collection of files produced during a build process, such as a compiled APK or AAB, test reports, or log files, which can be stored for testing or deployment.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A deprecated piece of code that should be removed.",
      "The source code that is checked out from the repository.",
      "A file or collection of files produced during a build process, such as a compiled APK or AAB, test reports, or log files, which can be stored for testing or deployment.",
      "A secret or token used by the CI/CD pipeline.",
      "A manual approval step in the deployment process."
    ],
    "category": "OTHER"
  },
  {
    "id": 385,
    "question": "What is the 'KISS' principle?",
    "answer": "Keep It Simple, Stupid. It states that most systems work best if they are kept simple rather than made complicated; therefore, simplicity should be a key goal in design.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Keep It Simple, Stupid. It states that most systems work best if they are kept simple rather than made complicated; therefore, simplicity should be a key goal in design.",
      "Keep Important Stuff Secure. A principle about prioritizing security.",
      "Know Its Super Set. A principle about understanding the context of your code.",
      "Keep Interfaces Segregated and Small. An alternative name for the Interface Segregation Principle.",
      "A methodology for pair programming."
    ],
    "category": "OTHER"
  },
  {
    "id": 386,
    "question": "What is the YAGNI principle?",
    "answer": "'You Ain't Gonna Need It'. It's the principle of not adding functionality until it is deemed necessary, to avoid over-engineering and adding code that might not be used.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A principle for always using the newest available technology.",
      "A reminder to always write generic and reusable code.",
      "'You Ain't Gonna Need It'. It's the principle of not adding functionality until it is deemed necessary, to avoid over-engineering and adding code that might not be used.",
      "A guideline for writing code that is easy to globalize (internationalize).",
      "A rule that states you should always ask for help when you need it."
    ],
    "category": "OTHER"
  },
  {
    "id": 387,
    "question": "In the context of Big O notation, what does O(n log n) typically represent?",
    "answer": "An efficient sorting algorithm, like Merge Sort or Quick Sort.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Linear search through a list.",
      "Accessing an element in an array by its index.",
      "An efficient sorting algorithm, like Merge Sort or Quick Sort.",
      "A nested loop that iterates through every pair of elements in a list.",
      "Binary search in a sorted array."
    ],
    "category": "OTHER"
  },
  {
    "id": 388,
    "question": "What is a common security risk of storing sensitive data in `SharedPreferences` without encryption?",
    "answer": "On a rooted device, the underlying XML file containing the data can be easily read by other applications or a malicious user with root access.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The data can be intercepted during a network request.",
      "It can cause the application to crash if the data is too large.",
      "The data will be automatically deleted when the app is updated.",
      "On a rooted device, the underlying XML file containing the data can be easily read by other applications or a malicious user with root access.",
      "There is no security risk; SharedPreferences is encrypted by default."
    ],
    "category": "OTHER"
  },
  {
    "id": 389,
    "question": "What is a 'man-in-the-middle' (MITM) attack?",
    "answer": "An attack where the attacker secretly relays and possibly alters the communication between two parties who believe they are directly communicating with each other. Certificate pinning is a defense against this.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "An attack where a developer intentionally inserts a backdoor into the code.",
      "A physical attack where someone steals a user's device.",
      "An attack where the attacker secretly relays and possibly alters the communication between two parties who believe they are directly communicating with each other. Certificate pinning is a defense against this.",
      "A type of malware that runs in the middle of the screen.",
      "An attack that exploits a buffer overflow vulnerability."
    ],
    "category": "OTHER"
  },
  {
    "id": 390,
    "question": "What is the purpose of the 'Definition of Done' in Scrum?",
    "answer": "It is a shared understanding within the team of what it means for a piece of work (like a user story) to be complete, ensuring quality and consistency. For example, 'coded, tested, documented, and merged'.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is a document that the Product Owner signs at the end of the sprint.",
      "It is a shared understanding within the team of what it means for a piece of work (like a user story) to be complete, ensuring quality and consistency. For example, 'coded, tested, documented, and merged'.",
      "It means the app has been released to the Play Store.",
      "It is the final day of the sprint.",
      "A list of all the tasks that were not completed during the sprint."
    ],
    "category": "OTHER"
  },
  {
    "id": 391,
    "question": "What is the main difference between Android App Links and Deep Links?",
    "answer": "App Links are a type of Deep Link that are verified to belong to your website. This allows the app to open them directly without showing the user a disambiguation dialog (chooser) asking which app to use.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "App Links work on all Android versions, while Deep Links only work on the latest.",
      "App Links are for navigating within the app, while Deep Links are for opening other apps.",
      "App Links are a type of Deep Link that are verified to belong to your website. This allows the app to open them directly without showing the user a disambiguation dialog (chooser) asking which app to use.",
      "Deep Links use a custom URI scheme (e.g., `myapp://`), while App Links use standard HTTP/HTTPS URLs.",
      "There is no difference; they are just different names for the same thing."
    ],
    "category": "OTHER"
  },
  {
    "id": 392,
    "question": "You disagree with a technical decision made by your tech lead. What is the most constructive first step to take?",
    "answer": "Schedule a private conversation with the lead to respectfully present your alternative solution and the reasoning behind it, focusing on the technical merits and project goals.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Immediately escalate the issue to the lead's manager.",
      "Implement your own solution without telling anyone.",
      "Publicly challenge the decision in a team meeting to get others on your side.",
      "Schedule a private conversation with the lead to respectfully present your alternative solution and the reasoning behind it, focusing on the technical merits and project goals.",
      "Ignore the decision and wait to see if it causes problems later."
    ],
    "category": "OTHER"
  },
  {
    "id": 393,
    "question": "How would you explain what an API is to a non-technical project manager?",
    "answer": "It's like a menu in a restaurant. It provides a list of dishes (data or functions) you can order, and it handles the communication with the kitchen (the other system) to get what you requested, without you needing to know how the kitchen works.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It's the user interface of the application that the user interacts with.",
      "It's the database where all the application's data is stored.",
      "It's a very complex piece of code that only developers can understand.",
      "It's like a menu in a restaurant. It provides a list of dishes (data or functions) you can order, and it handles the communication with the kitchen (the other system) to get what you requested, without you needing to know how the kitchen works.",
      "It's the server that hosts the application."
    ],
    "category": "OTHER"
  },
  {
    "id": 394,
    "question": "Which of these is NOT a core component of Firebase?",
    "answer": "Firebase Payments",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Firestore",
      "Authentication",
      "Cloud Functions",
      "Firebase Payments",
      "Crashlytics"
    ],
    "category": "OTHER"
  },
  {
    "id": 395,
    "question": "What is the purpose of Git Flow branching model?",
    "answer": "A strict branching model designed around project releases, using long-lived branches like `main` and `develop`, and supporting branches for features, releases, and hotfixes.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A model where all work is done directly on the `main` branch.",
      "A simpler model than feature branching, used for small projects.",
      "A strict branching model designed around project releases, using long-lived branches like `main` and `develop`, and supporting branches for features, releases, and hotfixes.",
      "An outdated model that has been replaced by GitHub Flow.",
      "A model that does not use pull requests."
    ],
    "category": "OTHER"
  },
  {
    "id": 396,
    "question": "What is the primary role of a YAML file in a CI/CD platform like GitHub Actions?",
    "answer": "To define the workflow configuration in a structured, human-readable format. It specifies the events that trigger the build, the jobs to run, and the steps within each job.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To store the source code of the application.",
      "It is a log file that contains the output of the CI/CD pipeline.",
      "To define the workflow configuration in a structured, human-readable format. It specifies the events that trigger the build, the jobs to run, and the steps within each job.",
      "To store secret keys and tokens used by the build process.",
      "It is a binary file used to cache dependencies."
    ],
    "category": "OTHER"
  },
  {
    "id": 397,
    "question": "Why is it important to handle platform fragmentation in Android development?",
    "answer": "To ensure the app provides a consistent and functional experience across a wide variety of devices with different screen sizes, OS versions, and hardware capabilities.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is not important; modern Android handles this automatically.",
      "To make the app look identical on every single device.",
      "To ensure the app only runs on the latest Google Pixel devices.",
      "To ensure the app provides a consistent and functional experience across a wide variety of devices with different screen sizes, OS versions, and hardware capabilities.",
      "It is only important for developers who use XML layouts, not Jetpack Compose."
    ],
    "category": "OTHER"
  },
  {
    "id": 398,
    "question": "What is a key benefit of using a `Set` over a `List`?",
    "answer": "A `Set` guarantees that it will only contain unique elements and provides a very fast (O(1)) way to check for the existence of an element.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A `Set` maintains the insertion order of elements, while a `List` does not.",
      "A `Set` is always more memory efficient than a `List`.",
      "A `Set` allows duplicate elements, while a `List` does not.",
      "A `Set` guarantees that it will only contain unique elements and provides a very fast (O(1)) way to check for the existence of an element.",
      "Elements in a `Set` can be accessed by an index, which is faster than in a `List`."
    ],
    "category": "OTHER"
  },
  {
    "id": 399,
    "question": "What is reverse engineering in the context of mobile app security?",
    "answer": "The process of decompiling an application's binary code (APK) back into a more human-readable format to analyze its functionality, find vulnerabilities, or steal intellectual property.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The process of building an app's UI based on a design mockup.",
      "A testing technique where you test the app's functionality in reverse order.",
      "The process of decompiling an application's binary code (APK) back into a more human-readable format to analyze its functionality, find vulnerabilities, or steal intellectual property.",
      "Rewriting an old application using a modern programming language.",
      "The process of recovering a lost app signing key."
    ],
    "category": "OTHER"
  },
  {
    "id": 400,
    "question": "What is the primary goal of the Daily Stand-up meeting in Scrum?",
    "answer": "For the development team to synchronize activities and create a plan for the next 24 hours. It is a planning meeting, not a status report for managers.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "For the Product Owner to assign tasks to each developer.",
      "To demonstrate the work that was completed yesterday.",
      "A one-hour meeting to discuss architectural decisions.",
      "For the development team to synchronize activities and create a plan for the next 24 hours. It is a planning meeting, not a status report for managers.",
      "To provide a detailed status update to the stakeholders."
    ],
    "category": "OTHER"
  },
  {
    "id": 401,
    "question": "What is Material Design?",
    "answer": "A design system created by Google that provides guidelines, components, and tools to help developers build high-quality, consistent digital experiences for Android, iOS, and the web.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The default theme for all Android applications.",
      "A library for creating 3D graphics in Android.",
      "A design system created by Google that provides guidelines, components, and tools to help developers build high-quality, consistent digital experiences for Android, iOS, and the web.",
      "A strict set of rules that all Android apps must follow to be published on the Play Store.",
      "An XML layout editor in Android Studio."
    ],
    "category": "OTHER"
  },
  {
    "id": 402,
    "question": "You're asked to estimate a large, unfamiliar feature. What is a good approach?",
    "answer": "Break the feature down into smaller, more manageable tasks. Estimate each small task, and add a buffer for uncertainty and integration. Consult with other team members if necessary.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Guess a random number of weeks and hope for the best.",
      "Refuse to estimate until you have a complete and final specification.",
      "Double the time you think it will take, just to be safe.",
      "Break the feature down into smaller, more manageable tasks. Estimate each small task, and add a buffer for uncertainty and integration. Consult with other team members if necessary.",
      "Tell the project manager that estimation is impossible in software development."
    ],
    "category": "OTHER"
  },
  {
    "id": 403,
    "question": "What is the purpose of `HEAD` in Git?",
    "answer": "It is a reference that points to the currently checked-out commit. Typically, it points to the tip of the current branch.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It always points to the very first commit in the repository's history.",
      "It is a reference that points to the currently checked-out commit. Typically, it points to the tip of the current branch.",
      "It is an alias for the `main` branch.",
      "It is a file that contains the header information for the repository.",
      "It points to the commit that is currently on the remote `origin`."
    ],
    "category": "OTHER"
  },
  {
    "id": 404,
    "question": "What is the difference between `git pull` and `git fetch`?",
    "answer": "`git fetch` downloads new data from a remote repository but doesn't integrate any of it into your working files. `git pull` is a combination of `git fetch` followed by `git merge` or `git rebase`.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "They are identical commands.",
      "`git pull` uploads your changes, while `git fetch` downloads them.",
      "`git fetch` downloads new data from a remote repository but doesn't integrate any of it into your working files. `git pull` is a combination of `git fetch` followed by `git merge` or `git rebase`.",
      "`git fetch` only works with the `main` branch, while `git pull` works with all branches.",
      "`git pull` is a safer command because it prevents merge conflicts."
    ],
    "category": "OTHER"
  },
  {
    "id": 405,
    "question": "In a CI/CD pipeline, what is a 'build trigger'?",
    "answer": "An event that automatically initiates a build, such as pushing a commit to a specific branch, creating a pull request, or a scheduled time.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A manual button that a developer must click to start a build.",
      "A piece of hardware that is required to run the CI server.",
      "An event that automatically initiates a build, such as pushing a commit to a specific branch, creating a pull request, or a scheduled time.",
      "A script that triggers a notification when a build fails.",
      "The first step in the build process that compiles the code."
    ],
    "category": "OTHER"
  },
  {
    "id": 406,
    "question": "What is the main benefit of root detection in a mobile app?",
    "answer": "It's a security measure to detect if the app is running on a compromised (rooted) device, which might allow the app to take protective actions, like disabling sensitive features or logging the user out.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To provide special features only for users with rooted devices.",
      "It is required by Google Play for all apps.",
      "To improve the performance of the app on rooted devices.",
      "It's a security measure to detect if the app is running on a compromised (rooted) device, which might allow the app to take protective actions, like disabling sensitive features or logging the user out.",
      "To prevent the app from being installed on a rooted device."
    ],
    "category": "OTHER"
  },
  {
    "id": 407,
    "question": "A junior developer on your team submits a pull request with code that works but is very inefficient. What is the best way to provide feedback?",
    "answer": "Leave constructive comments on the PR, acknowledging that the code works, but suggest a more performant approach with a clear explanation and possibly a code snippet or link to documentation.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Reject the PR without any comments.",
      "Publicly call them out in the team chat for writing slow code.",
      "Merge the code as-is to not hurt their feelings.",
      "Leave constructive comments on the PR, acknowledging that the code works, but suggest a more performant approach with a clear explanation and possibly a code snippet or link to documentation.",
      "Secretly rewrite the code yourself and push it to their branch."
    ],
    "category": "OTHER"
  },
  {
    "id": 408,
    "question": "What is the main purpose of `git bisect`?",
    "answer": "To perform a binary search through the commit history to efficiently find the specific commit that introduced a bug.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To split a large commit into two smaller ones.",
      "To create a new branch that is an exact copy of another.",
      "To perform a binary search through the commit history to efficiently find the specific commit that introduced a bug.",
      "A tool for visualizing the Git history as a tree.",
      "To find the commit where two branches diverged."
    ],
    "category": "OTHER"
  },
  {
    "id": 409,
    "question": "Why would a company choose to automate its release process with CI/CD?",
    "answer": "To increase speed and reliability. Automation reduces the risk of human error, ensures consistent builds, and allows for faster delivery of new features and bug fixes to users.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Because it is cheaper than hiring a dedicated release manager.",
      "To make the build process take longer, allowing for more thorough testing.",
      "To increase speed and reliability. Automation reduces the risk of human error, ensures consistent builds, and allows for faster delivery of new features and bug fixes to users.",
      "It is a requirement for using Git.",
      "The only benefit is that it generates pretty reports."
    ],
    "category": "OTHER"
  },
  {
    "id": 410,
    "question": "What is a 'hotfix' in the context of Git Flow?",
    "answer": "A commit or branch created directly from the `main` branch to quickly patch a critical bug in a production release. It is then merged back into both `main` and `develop`.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A feature that is in high demand by users.",
      "A commit that significantly improves the performance of the app.",
      "Any commit that is made when the server room is hot.",
      "A commit or branch created directly from the `main` branch to quickly patch a critical bug in a production release. It is then merged back into both `main` and `develop`.",
      "A commit that fixes a typo in the code comments."
    ],
    "category": "OTHER"
  },
  {
    "id": 411,
    "question": "What is the fundamental trade-off that Big O notation helps to analyze?",
    "answer": "The trade-off between the time an algorithm takes to run and the amount of memory (space) it uses as the input size grows.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The trade-off between writing code quickly and writing code that is easy to read.",
      "The trade-off between the number of developers on a team and the project deadline.",
      "The trade-off between the time an algorithm takes to run and the amount of memory (space) it uses as the input size grows.",
      "The trade-off between using a paid library and writing the functionality yourself.",
      "The trade-off between supporting older devices and using new features."
    ],
    "category": "OTHER"
  },
  {
    "id": 412,
    "question": "What is a primary difference in UI development philosophy between Android (historically with XML) and iOS (with Storyboards)?",
    "answer": "Android's XML has historically been more focused on declarative layouts with flexible, powerful attributes, while iOS Storyboards have been more visual and connection-based, representing user flows more directly in a graphical interface.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "There is no difference in philosophy.",
      "Android XML is for creating logic, while iOS Storyboards are for UI.",
      "iOS Storyboards are text-based, while Android XML is visual.",
      "Android's XML has historically been more focused on declarative layouts with flexible, powerful attributes, while iOS Storyboards have been more visual and connection-based, representing user flows more directly in a graphical interface.",
      "Android uses a proprietary language, while iOS uses standard XML."
    ],
    "category": "OTHER"
  },
  {
    "id": 413,
    "question": "Your app is experiencing a rare crash that you cannot reproduce. What Firebase tool would be most helpful in diagnosing it?",
    "answer": "Firebase Crashlytics, which automatically captures detailed crash reports from users' devices, including stack traces and device information, allowing you to identify and prioritize fixes for issues in the wild.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Firebase Realtime Database",
      "Firebase Authentication",
      "Firebase Cloud Messaging",
      "Firebase Crashlytics, which automatically captures detailed crash reports from users' devices, including stack traces and device information, allowing you to identify and prioritize fixes for issues in the wild.",
      "Firebase A/B Testing"
    ],
    "category": "OTHER"
  },
  {
    "id": 414,
    "question": "What is the purpose of `git reflog`?",
    "answer": "It shows a log of where `HEAD` has been. It's a safety net that can help you recover commits or branches that were accidentally lost, even if they are no longer in any branch history.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It shows a log of all remote references.",
      "It is an alias for `git log --graph`.",
      "It shows a log of where `HEAD` has been. It's a safety net that can help you recover commits or branches that were accidentally lost, even if they are no longer in any branch history.",
      "It logs all references to a specific file.",
      "It is a tool for logging performance metrics of Git operations."
    ],
    "category": "OTHER"
  },
  {
    "id": 415,
    "question": "You have two tasks: one is a critical bug fix, the other is a new, non-urgent feature. How do you decide which to work on first?",
    "answer": "Prioritize the critical bug fix. Fixing issues that impact current users and cause instability should almost always take precedence over developing new functionality.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Work on the new feature first because it is more interesting.",
      "Work on whichever task is easier to complete first.",
      "Prioritize the critical bug fix. Fixing issues that impact current users and cause instability should almost always take precedence over developing new functionality.",
      "Ask the project manager to decide, as it's not a developer's responsibility.",
      "Try to work on both at the same time by constantly switching between them."
    ],
    "category": "OTHER"
  },
  {
    "id": 416,
    "question": "What is the primary constructor in Kotlin?",
    "answer": "The one declared in the class header",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The one marked with `constructor` keyword",
      "The one declared inside a companion object",
      "The one declared in the class body",
      "The one declared in the class header",
      "The one marked with `primary` keyword"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 417,
    "question": "Which scope function executes the block and returns the context object (`this`)?",
    "answer": "apply",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "let",
      "run",
      "with",
      "apply",
      "also"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 418,
    "question": "What is the difference between `list.map { ... }` and `list.flatMap { ... }`?",
    "answer": "`map` returns a list of transformed items, `flatMap` returns a flattened list of lists of transformed items.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`map` is for Sequences, `flatMap` is for Lists",
      "`map` returns a single item, `flatMap` returns a list",
      "`map` returns a list of transformed items, `flatMap` returns a flattened list of lists of transformed items.",
      "`flatMap` is an asynchronous version of `map`",
      "They both transform elements in a list."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 419,
    "question": "Which keyword is used to explicitly call the setter of a property within its own custom setter?",
    "answer": "field",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "value",
      "this",
      "set",
      "field",
      "property"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 420,
    "question": "What does the `in` keyword mean in a generic declaration like `interface Producer<in T>`?",
    "answer": "Contravariance (T can only be consumed, not produced)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Covariance (T can only be produced)",
      "Invariance (T must be exact type)",
      "Contravariance (T can only be consumed, not produced)",
      "It's a reserved keyword for collections",
      "It means the type is nullable"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 421,
    "question": "How do you iterate over a map in Kotlin and get both key and value?",
    "answer": "`for ((key, value) in map) { ... }`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`for (key in map.keys()) { val value = map[key] }`",
      "`for (mapEntry in map) { ... }`",
      "`for (map: key, value in map) { ... }`",
      "`for ((key, value) in map) { ... }`",
      "`for (entry in map.entries) { ... }`"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 422,
    "question": "What is the purpose of a primary constructor parameter declared with `val` or `var`?",
    "answer": "It automatically declares a property with that name in the class",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It only serves as a parameter for the constructor",
      "It must be initialized with `lateinit`",
      "It automatically declares a property with that name in the class",
      "It is only for Java compatibility",
      "It must be marked as `private`"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 423,
    "question": "Which of these is used to define a class that can only be subclassed within the same file or module?",
    "answer": "sealed",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "private",
      "public",
      "protected",
      "internal",
      "sealed"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 424,
    "question": "What is the result of using the `take(2)` operator on the list `listOf(1, 2, 3, 4)`?",
    "answer": "[1, 2]",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "[3, 4]",
      "[1, 2, 3, 4]",
      "[1, 2]",
      "[2, 3]",
      "[4, 3]"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 425,
    "question": "What is the type of a function literal with receiver?",
    "answer": "A function type denoted as `Receiver.(P1, P2) -> R`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A lambda",
      "A data class",
      "A suspend function",
      "A function type denoted as `Receiver.(P1, P2) -> R`",
      "A higher-order function"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 426,
    "question": "Which scope function provides the context object as the argument (`it`) and returns the result of the lambda?",
    "answer": "let",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "apply",
      "also",
      "run",
      "with",
      "let"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 427,
    "question": "What is the effect of the 'crossinline' modifier for an inline function?",
    "answer": "It prevents non-local returns from lambda arguments.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It makes the function private",
      "It allows the function to be called from Java",
      "It prevents non-local returns from lambda arguments.",
      "It makes the function an extension function",
      "It has no effect."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 428,
    "question": "Which of the following is true about a `const val`?",
    "answer": "Must be a top-level or object/companion object member, and its value is known at compile time.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Can be used on local variables",
      "Its value is initialized lazily at first access",
      "Must be a top-level or object/companion object member, and its value is known at compile time.",
      "Can be used on any mutable variable",
      "Can be null"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 429,
    "question": "Which collection function should be used for lazy (on-demand) evaluation?",
    "answer": "Sequence",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "List",
      "Set",
      "Array",
      "Sequence",
      "MutableList"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 430,
    "question": "What is the `by` keyword used for in the context of class implementation?",
    "answer": "Class Delegation",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Property Delegation",
      "Interface Inheritance",
      "Object Creation",
      "Class Delegation",
      "Lambda Definition"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 431,
    "question": "What is the primary purpose of `onStart()` in the Activity lifecycle?",
    "answer": "The Activity is becoming visible to the user.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The Activity is created for the first time",
      "The Activity is about to be destroyed",
      "The Activity is becoming visible to the user.",
      "The Activity is in the foreground and has user focus",
      "The Activity is no longer visible to the user."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 432,
    "question": "Which Android component is intended to handle asynchronous background work without a UI, which should be stopped when the user navigates away?",
    "answer": "Service (often with Coroutines/WorkManager now, but Service is the component)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Activity",
      "BroadcastReceiver",
      "ContentProvider",
      "Service (often with Coroutines/WorkManager now, but Service is the component)",
      "Fragment"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 433,
    "question": "Which intent flag is used to clear the task stack and start the new activity as the root of a new task?",
    "answer": "`FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`FLAG_ACTIVITY_SINGLE_TOP`",
      "`FLAG_ACTIVITY_REORDER_TO_FRONT`",
      "`FLAG_ACTIVITY_NEW_TASK`",
      "`FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK`",
      "`FLAG_ACTIVITY_NO_HISTORY`"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 434,
    "question": "What is the main function of the `android:process` attribute in the `AndroidManifest.xml`?",
    "answer": "It allows an application component to run in a separate, named process.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It sets the priority of the application",
      "It defines the main entry point of the application",
      "It allows an application component to run in a separate, named process.",
      "It is used to define permissions",
      "It sets the default theme for the application."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 435,
    "question": "In runtime permissions (Android 6.0+), which method should you call to check if the app already has a specific permission?",
    "answer": "`ContextCompat.checkSelfPermission(context, permission)`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`checkPermission(permission)`",
      "`Context.hasPermission(permission)`",
      "`PermissionManager.isGranted(permission)`",
      "`ContextCompat.checkSelfPermission(context, permission)`",
      "`checkSelfPermission(permission)`"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 436,
    "question": "Which function is used in a `Fragment` to launch a Fragment-specific coroutine and cancel it when the `Fragment`'s view is destroyed?",
    "answer": "`viewLifecycleOwner.lifecycleScope.launch { ... }`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`lifecycleScope.launch { ... }`",
      "`GlobalScope.launch { ... }`",
      "`viewLifecycleOwner.lifecycleScope.launch { ... }`",
      "`viewModelScope.launch { ... }`",
      "`runBlocking { ... }`"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 437,
    "question": "Which build configuration is used to exclude sensitive information or temporary files from being packaged into the final APK/AAB?",
    "answer": "`exclude` in Gradle or `.gitignore`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`minifyEnabled` in `build.gradle`",
      "`release` build type",
      "`exclude` in Gradle or `.gitignore`",
      "`debuggable` in manifest",
      "`buildConfigField`"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 438,
    "question": "What is the main benefit of using a `Fragment` over an `Activity` for UI screens?",
    "answer": "Reusability and modularity of UI components across multiple activities or different device screen sizes/orientations.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Fragments are faster to load",
      "Fragments don't have a lifecycle",
      "Fragments can run in a separate process",
      "Reusability and modularity of UI components across multiple activities or different device screen sizes/orientations.",
      "Fragments are not affected by configuration changes."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 439,
    "question": "Which Android SDK tool is primarily used to analyze and reduce the size of the final APK/AAB by shrinking and optimizing code?",
    "answer": "R8 / ProGuard",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "AAPT",
      "ADB",
      "Gradle",
      "R8 / ProGuard",
      "Lint"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 440,
    "question": "What is the role of a `ContentResolver`?",
    "answer": "To communicate with a `ContentProvider` from an application's process.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To resolve deep links",
      "To resolve resource IDs",
      "To manage content downloaded from the internet",
      "To communicate with a `ContentProvider` from an application's process.",
      "To store encrypted local data."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 441,
    "question": "Which component is responsible for receiving and handling implicit or explicit Intents broadcast by the system or other apps?",
    "answer": "BroadcastReceiver",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Activity",
      "Service",
      "ContentProvider",
      "BroadcastReceiver",
      "Handler"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 442,
    "question": "What is the main purpose of a `PendingIntent`?",
    "answer": "To grant another application permission to execute a piece of code with the original application's identity and permissions at a later time.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To schedule a network request",
      "To store temporary data during configuration changes",
      "To define a set of actions that can be reversed",
      "To grant another application permission to execute a piece of code with the original application's identity and permissions at a later time.",
      "To block the main thread until an Intent is received."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 443,
    "question": "Which of the following is NOT a default part of the `ViewModel`'s purpose?",
    "answer": "Managing View inflation and layout",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Surfacing data to the UI",
      "Surviving configuration changes",
      "Holding UI-related data",
      "Managing View inflation and layout",
      "Providing a communication hub between the UI and the Repository."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 444,
    "question": "Which annotation should be used in Room to define a relationship between two entities?",
    "answer": "`@Relation` (often combined with `@Embedded`)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`@Join`",
      "`@ForeignKey`",
      "`@Link`",
      "`@Relation` (often combined with `@Embedded`)",
      "`@Reference`"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 445,
    "question": "What is the primary use of `onSaveInstanceState()` in an Activity?",
    "answer": "To store small amounts of dynamic state data that can be restored in `onCreate()` or `onRestoreInstanceState()` if the system kills the app's process.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To permanently save all application data",
      "To store large files before the app is closed",
      "To store small amounts of dynamic state data that can be restored in `onCreate()` or `onRestoreInstanceState()` if the system kills the app's process.",
      "To perform final cleanup before the activity is destroyed",
      "To save the state in the ViewModel."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 446,
    "question": "What is the purpose of the `await()` function on a `Deferred` object?",
    "answer": "To suspend the coroutine until the `async` operation completes and return its result.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To start the `async` operation",
      "To cancel the `async` operation",
      "To suspend the coroutine until the `async` operation completes and return its result.",
      "To check if the `async` operation is complete",
      "To run the `async` operation on the main thread."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 447,
    "question": "What is the recommended way to perform heavy computations in a coroutine?",
    "answer": "`withContext(Dispatchers.Default) { ... }`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`withContext(Dispatchers.Main) { ... }`",
      "`launch(Dispatchers.IO) { ... }`",
      "`runBlocking { ... }`",
      "`GlobalScope.launch { ... }`",
      "`withContext(Dispatchers.Default) { ... }`"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 448,
    "question": "In Kotlin Flow, which operator is used to apply a side effect (e.g., logging) without consuming the values?",
    "answer": "onEach",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "map",
      "filter",
      "collect",
      "onEach",
      "flatMap"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 449,
    "question": "How does `SupervisorJob` differ from a regular `Job` in coroutine cancellation?",
    "answer": "A child failure does not automatically cause the supervisor to fail or cancel its other children.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`SupervisorJob` is always tied to `Dispatchers.Main`",
      "It can only be used with `launch`",
      "A child failure causes all other children to cancel",
      "A child failure does not automatically cause the supervisor to fail or cancel its other children.",
      "It is used only for UI coroutines."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 450,
    "question": "What is the role of `CoroutineScope`?",
    "answer": "It defines the context for new coroutines and allows managing their lifecycle (cancellation).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It runs all coroutines on the main thread",
      "It prevents crashes",
      "It defines the context for new coroutines and allows managing their lifecycle (cancellation).",
      "It is a deprecated class",
      "It is only used for suspending functions."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 451,
    "question": "These operators return a flattened flow after transforming each emitted value.",
    "answer": "flatMapConcat / flatMapLatest / flatMapMerge",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "map / mapNotNull",
      "merge / mergeIn",
      "combine / zip",
      "collectLatest / collectConcat",
      "flatMapConcat / flatMapLatest / flatMapMerge"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 452,
    "question": "What is the purpose of the `Channel` primitive in coroutines?",
    "answer": "It is a non-blocking queue that allows sending a stream of values from one coroutine (sender) to another (receiver).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is a replacement for `LiveData`",
      "It is a type of `Flow` with built-in backpressure",
      "It is a non-blocking queue that allows sending a stream of values from one coroutine (sender) to another (receiver).",
      "It is a way to define a global scope",
      "It allows running blocking code on the main thread."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 453,
    "question": "When switching between `Dispatchers.Main` and `Dispatchers.IO`, which function is used to ensure the continuation happens in the desired context and *after* the suspend call completes?",
    "answer": "`withContext`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`runBlocking`",
      "`launch`",
      "`async`",
      "`withContext`",
      "`delay`"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 454,
    "question": "What is the output of the following Flow: `flowOf(1, 2, 3).filter { it > 1 }.map { it * 2 }.toList()`?",
    "answer": "[4, 6]",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "[1, 2, 3]",
      "[2, 3, 4, 6]",
      "[4, 6]",
      "[2, 3]",
      "[1, 4, 6]"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 455,
    "question": "How can you convert a Flow to a `StateFlow` and ensure it is collected when the `Lifecycle` is at least `STARTED`?",
    "answer": "`flow.stateIn(scope, SharingStarted.WhileSubscribed(5000), initialValue)`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`flow.toStateFlow()`",
      "`flow.shareIn(scope, SharingStarted.Eagerly, 1)`",
      "`flow.stateIn(scope, SharingStarted.WhileSubscribed(5000), initialValue)`",
      "`flow.collectAsState(initialValue)`",
      "`flow.asStateFlow()`"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 456,
    "question": "What is the primary responsibility of the `Repository` component in the Google-recommended Android Architecture (MVVM)?",
    "answer": "To abstract the data layer, providing a clean API to the rest of the app and acting as a single source of truth for the data.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To manage the UI lifecycle and data presentation",
      "To abstract the data layer, providing a clean API to the rest of the app and acting as a single source of truth for the data.",
      "To hold UI state during configuration changes",
      "To execute background tasks with constraints",
      "To handle navigation between fragments."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 457,
    "question": "Which Hilt annotation is used to mark the main application class for dependency injection setup?",
    "answer": "`@HiltAndroidApp`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`@Module`",
      "`@Provides`",
      "`@InstallIn(ApplicationComponent::class)`",
      "`@HiltApplication`",
      "`@HiltAndroidApp`"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 458,
    "question": "What is the main advantage of using *Constructor Injection* over *Field Injection* in Dagger/Hilt?",
    "answer": "It makes the object's dependencies explicit, making the class easier to test and enforcing dependency immutability.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is the only way to inject objects into Fragments",
      "It is faster at runtime",
      "It makes the object's dependencies explicit, making the class easier to test and enforcing dependency immutability.",
      "It allows injecting private fields",
      "It is an older, deprecated method."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 459,
    "question": "Which testing framework is generally used for local unit tests that *do not* require an Android device or emulator?",
    "answer": "JUnit",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Espresso",
      "Robolectric",
      "UI Automator",
      "JUnit",
      "Monkey"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 460,
    "question": "In MVVM, what does the term 'Unidirectional Data Flow (UDF)' mean?",
    "answer": "Data flows in one direction (e.g., UI Event -> ViewModel -> Model), and State flows back in the opposite direction (Model -> ViewModel -> UI State).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Data can flow freely between all components",
      "Data flows in only one direction and UI is read-only",
      "Data flows in one direction (e.g., UI Event -> ViewModel -> Model), and State flows back in the opposite direction (Model -> ViewModel -> UI State).",
      "Data must only be passed via Bundles",
      "Data should only be updated in the `Repository`."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 461,
    "question": "What is the key characteristic of a Composable function that makes it an efficient element of the UI tree?",
    "answer": "It is skippable and restartable.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It always runs on the background thread",
      "It can only be called from an Activity",
      "It is skippable and restartable.",
      "It must always return a value",
      "It can only be called once."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 462,
    "question": "Which side-effect handler is recommended for performing clean-up when the Composable leaves the composition (e.g., stopping a timer)?",
    "answer": "`DisposableEffect`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`LaunchedEffect`",
      "`rememberCoroutineScope`",
      "`SideEffect`",
      "`DisposableEffect`",
      "`DerivedStateOf`"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 463,
    "question": "In Jetpack Compose, what is the purpose of `Modifier.clickable { ... }`?",
    "answer": "It adds semantic information, handles click input, and provides ripple/press visual feedback to a Composable.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is a replacement for `onClick` in XML",
      "It only handles touch events",
      "It must be the first modifier in the chain",
      "It adds semantic information, handles click input, and provides ripple/press visual feedback to a Composable.",
      "It creates a new thread for the click handler."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 464,
    "question": "Which function should be used to create a piece of state whose value is derived from one or more other `State` objects?",
    "answer": "`derivedStateOf { ... }`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`remember { ... }`",
      "`rememberSaveable { ... }`",
      "`mutableStateOf { ... }`",
      "`derivedStateOf { ... }`",
      "`remembered { ... }`"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 465,
    "question": "What is a 'Slot API' in Jetpack Compose?",
    "answer": "A design pattern where a Composable takes other Composable functions as parameters (slots), allowing the parent to customize specific areas of the child's layout (e.g., a `TopAppBar` taking a `leadingIcon` slot).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "An API for accessing system slots like battery and network",
      "An API for defining UI constraints",
      "An API for controlling the layout of a `Row` or `Column`",
      "A design pattern where a Composable takes other Composable functions as parameters (slots), allowing the parent to customize specific areas of the child's layout (e.g., a `TopAppBar` taking a `leadingIcon` slot).",
      "A way to save state automatically."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 466,
    "question": "Which Kotlin function is best suited for executing a block of code with a nullable receiver only if it is not null, and returning the result of the lambda?",
    "answer": "let",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "apply",
      "also",
      "run",
      "takeIf",
      "let"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 467,
    "question": "What is the purpose of the `expect` and `actual` keywords in Kotlin?",
    "answer": "To implement multiplatform programming, defining expected declarations in common code and platform-specific implementations.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To handle asynchronous operations",
      "To define and implement sealed interfaces",
      "To implement multiplatform programming, defining expected declarations in common code and platform-specific implementations.",
      "To define abstract classes",
      "To enforce type checking at runtime."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 468,
    "question": "What is the purpose of the `companion object` in a Kotlin class?",
    "answer": "To provide a place for factory methods, static constants, and other members that belong to the class rather than to any specific instance of the class.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To define an inner class",
      "To provide a place for factory methods, static constants, and other members that belong to the class rather than to any specific instance of the class.",
      "To enable multiple inheritance",
      "To define extension functions",
      "To allow object creation without constructors"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 469,
    "question": "What is a major difference between a Kotlin `class` and a `data class`?",
    "answer": "A `data class` automatically provides `equals()`, `hashCode()`, `toString()`, `copy()`, and `componentN()` functions.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A `data class` cannot have functions",
      "A `data class` is always a singleton",
      "A `data class` automatically provides `equals()`, `hashCode()`, `toString()`, `copy()`, and `componentN()` functions.",
      "A `data class` cannot inherit from other classes",
      "A `data class` must have at least two properties."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 470,
    "question": "In Kotlin, how do you correctly override a getter and a setter for a property?",
    "answer": "By using the `override` keyword and defining custom `get()` and `set(value)` blocks after the property declaration.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "By using the `override` keyword before `val` or `var`",
      "By defining new methods named `getProperty()` and `setProperty()`",
      "By using the `override` keyword and defining custom `get()` and `set(value)` blocks after the property declaration.",
      "By declaring property accessors inside the class body only",
      "Only possible inside a `data class`."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 471,
    "question": "What is the key difference between `==` and `===` in Kotlin?",
    "answer": "`==` checks for structural equality (calls `equals()`), and `===` checks for referential equality (same object in memory).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`==` is for primitive types, `===` is for objects",
      "`===` is faster than `==`",
      "`==` checks for structural equality (calls `equals()`), and `===` checks for referential equality (same object in memory).",
      "There is no difference in Kotlin",
      "`==` is for nullable types, `===` is for non-nullable types."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 472,
    "question": "What is a `Sequence` in Kotlin and what is its main benefit over a `List` for collection operations?",
    "answer": "A `Sequence` performs operations lazily, applying each operation to one element at a time, which is more efficient for long chains of operations on large collections.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A `Sequence` is mutable, unlike a `List`",
      "A `Sequence` is synchronized for multi-threaded use",
      "A `Sequence` is faster for single operations",
      "A `Sequence` performs operations lazily, applying each operation to one element at a time, which is more efficient for long chains of operations on large collections.",
      "A `Sequence` can only hold unique elements."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 473,
    "question": "Which scope function executes the block of code and returns the result of the lambda, providing the context object as `this`?",
    "answer": "run",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "let",
      "apply",
      "also",
      "with",
      "run"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 474,
    "question": "How do you create an array of non-null integers in Kotlin?",
    "answer": "`arrayOf(1, 2, 3)` or `IntArray(3) { index -> index + 1 }`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`listOf(1, 2, 3)`",
      "`Array(3) { 0 }`",
      "`arrayOf(1, 2, 3)` or `IntArray(3) { index -> index + 1 }`",
      "`Collection<Int>(1, 2, 3)`",
      "`array[1, 2, 3]`"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 475,
    "question": "Which property delegate is used to initialize a value only upon the first access and is thread-safe by default?",
    "answer": "lazy",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "lateinit",
      "Delegates.observable",
      "by",
      "lazy",
      "Delegates.notNull"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 476,
    "question": "What is the primary function of `ContentProvider` in Android?",
    "answer": "To manage access to a structured set of data, providing a standard interface to share data between different applications.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To display the application's UI",
      "To execute long-running background tasks",
      "To manage access to a structured set of data, providing a standard interface to share data between different applications.",
      "To receive system broadcasts",
      "To cache network responses."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 477,
    "question": "Which Activity lifecycle method is usually called before the Activity is destroyed (if the process is not killed abruptly)?",
    "answer": "`onDestroy()`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`onAnnihilate()`",
      "`onStop()`",
      "`onRestart()`",
      "`onKill()`",
      "`onDestroy()`"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 478,
    "question": "When does the system call the `onAttachedToWindow()` method of a custom `View`?",
    "answer": "When the view is attached to a window and has a surface for drawing.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "When the view is inflated from XML",
      "When the user clicks the view",
      "When the view is attached to a window and has a surface for drawing.",
      "After `onDraw()` is called for the first time",
      "Only when the activity is created."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 479,
    "question": "What is the purpose of the `android:exported=\"true\"` attribute for a component in `AndroidManifest.xml`?",
    "answer": "It allows other applications to start or interact with this component.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It makes the app available on Google Play",
      "It allows the component to access external storage",
      "It ensures the component runs on the main thread",
      "It allows other applications to start or interact with this component.",
      "It specifies that the component supports deep linking."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 480,
    "question": "Which of these is the most appropriate way to schedule a non-immediate task that must run even if the app process is killed and potentially requires network access?",
    "answer": "WorkManager",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "AsyncTask",
      "Thread",
      "Service (Started Service)",
      "Handler",
      "WorkManager"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 481,
    "question": "What is the recommended approach for implementing a `Snackbar` in a Fragment, ensuring it is shown over the appropriate UI container?",
    "answer": "Use `Snackbar.make(view, message, duration)` where `view` is the root view of the Fragment's layout or a coordinator layout.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Call `Toast.makeText(getContext(), ...)`",
      "Create a custom dialog box",
      "Use `Snackbar.make(view, message, duration)` where `view` is the root view of the Fragment's layout or a coordinator layout.",
      "Use `GlobalScope.launch { ... }`",
      "It can only be done in the Activity."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 482,
    "question": "What is a main benefit of using 'Build Variants' (product flavors and build types) in Gradle?",
    "answer": "To create different versions of an application from a single project codebase (e.g., free vs. paid, different environments, etc.).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To automatically generate Javadocs",
      "To reduce the size of the APK by always minifying the code",
      "To create different versions of an application from a single project codebase (e.g., free vs. paid, different environments, etc.).",
      "To manage all external dependencies",
      "To run all unit tests automatically."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 483,
    "question": "Which method is the correct place to instantiate data-bound variables in a Fragment when using 'View Binding'?",
    "answer": "Between `onCreateView()` and `onDestroyView()` (usually in `onCreateView()` right after inflating, and nullifying in `onDestroyView()`).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`onAttach()`",
      "`onResume()`",
      "Between `onCreateView()` and `onDestroyView()` (usually in `onCreateView()` right after inflating, and nullifying in `onDestroyView()`).",
      "`onActivityCreated()`",
      "`onStop()`"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 484,
    "question": "What is the primary role of `LiveData.observe()` and why is it lifecycle-aware?",
    "answer": "It registers an observer that receives updates only when the associated `LifecycleOwner` is in an active state (`STARTED` or `RESUMED`), preventing memory leaks and crashes.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is a blocking call to get the latest value",
      "It updates the UI every time a new value is posted, regardless of lifecycle",
      "It registers an observer that receives updates only when the associated `LifecycleOwner` is in an active state (`STARTED` or `RESUMED`), preventing memory leaks and crashes.",
      "It is used for synchronous database queries",
      "It automatically fetches data from the network."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 485,
    "question": "In Jetpack Room, what does an `@Update` annotated method do?",
    "answer": "It finds entities that match the primary keys of the passed entities and modifies all their columns in the database.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It inserts a new entity only if it does not exist",
      "It deletes the specified entities",
      "It finds entities that match the primary keys of the passed entities and modifies all their columns in the database.",
      "It creates a new database table",
      "It updates the UI."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 486,
    "question": "Which Jetpack component should you use to manage temporary UI-related data that needs to survive configuration changes (like screen rotation)?",
    "answer": "ViewModel",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "SavedStateHandle",
      "Bundle in `onSaveInstanceState`",
      "WorkManager",
      "ViewModel",
      "SharedPreferences"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 487,
    "question": "What is the purpose of `SavedStateHandle` in the context of `ViewModel`?",
    "answer": "It allows `ViewModel` to save and restore a small amount of UI state, surviving both configuration changes *and* system-initiated process death.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It replaces the entire `ViewModel`",
      "It is only used for network caching",
      "It allows `ViewModel` to save and restore a small amount of UI state, surviving both configuration changes *and* system-initiated process death.",
      "It is a tool for debugging",
      "It is used for large database operations."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 488,
    "question": "What is the main benefit of using the Navigation component's `Safe Args`?",
    "answer": "It generates simple object and builder classes for type-safe navigation and argument passing.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It allows navigating between Activities only",
      "It allows sending intents safely between activities.",
      "It generates simple object and builder classes for type-safe navigation and argument passing.",
      "It automatically handles deep links without configuration",
      "It makes all navigation fragments singletons."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 489,
    "question": "In WorkManager, what does the 'Expedited' type of work primarily indicate?",
    "answer": "It indicates important tasks that should be started immediately and completed within a short window, even if the system is restricting background execution.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The work must run on the main thread",
      "The work is cancelled if the app is closed",
      "It indicates important tasks that should be started immediately and completed within a short window, even if the system is restricting background execution.",
      "The work requires a permanent notification",
      "The work has a very low priority."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 490,
    "question": "In a coroutine, how does structured concurrency handle exception propagation from a failing child coroutine?",
    "answer": "A child coroutine's failure cancels its parent, which in turn cancels all its other children, thus propagating the failure upwards.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The child's exception is always silently ignored",
      "The exception is automatically caught by `try-catch` blocks in the parent",
      "A child coroutine's failure cancels its parent, which in turn cancels all its other children, thus propagating the failure upwards.",
      "The exception is reported only to the main thread",
      "It immediately crashes the whole application."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 491,
    "question": "What is a `suspend` function allowed to do that a regular function is not?",
    "answer": "Call other `suspend` functions and yield execution without blocking the current thread.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Run on the main thread",
      "Return a `Flow`",
      "Call other `suspend` functions and yield execution without blocking the current thread.",
      "Be defined as an extension function",
      "Access private members of a class."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 492,
    "question": "In Kotlin Flow, what is the role of the `buffer()` operator?",
    "answer": "It buffers emissions from the upstream flow, allowing the emitter to produce elements faster than the collector can process them, increasing throughput.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It converts a Flow to a List",
      "It ensures that the Flow runs on the main thread",
      "It buffers emissions from the upstream flow, allowing the emitter to produce elements faster than the collector can process them, increasing throughput.",
      "It automatically handles backpressure by dropping values",
      "It slows down the emitter."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 493,
    "question": "Which coroutine builder is used to start a new coroutine that calculates a result concurrently and can be cancelled?",
    "answer": "`async`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`launch`",
      "`runBlocking`",
      "`withContext`",
      "`async`",
      "`GlobalScope`"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 494,
    "question": "How do you handle exceptions within a coroutine scope that should not cancel the parent job (like independent UI tasks)?",
    "answer": "Use a `SupervisorJob` or wrap the coroutine body with a `try-catch` block.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "By using `Dispatchers.Unconfined`",
      "By using `GlobalScope`",
      "Use a `SupervisorJob` or wrap the coroutine body with a `try-catch` block.",
      "By marking the function with `@Throws`",
      "Coroutines do not throw exceptions."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 495,
    "question": "What is the key difference between `SharedFlow` and `StateFlow`?",
    "answer": "`StateFlow` always holds one state value and emits the current value immediately upon collection, while `SharedFlow` is a hot stream that can be configured to replay a certain number of previous emissions to new collectors.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`SharedFlow` is a cold stream, `StateFlow` is a hot stream",
      "`StateFlow` is for IO operations, `SharedFlow` is for UI updates",
      "`StateFlow` always holds one state value and emits the current value immediately upon collection, while `SharedFlow` is a hot stream that can be configured to replay a certain number of previous emissions to new collectors.",
      "They are interchangeable",
      "`SharedFlow` is mutable, `StateFlow` is read-only."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 496,
    "question": "What happens if you try to call a `suspend` function from a regular, non-suspending function?",
    "answer": "It results in a compile-time error, as `suspend` functions can only be called from other `suspend` functions or within a coroutine builder.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It runs the function on a new background thread",
      "It results in a compile-time error, as `suspend` functions can only be called from other `suspend` functions or within a coroutine builder.",
      "It causes a runtime crash",
      "It automatically converts the regular function to a `suspend` function",
      "It blocks the calling thread."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 497,
    "question": "Which dispatcher is suitable for running coroutines that need to block the thread, such as reading or writing large files, or making synchronous network calls?",
    "answer": "`Dispatchers.IO`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`Dispatchers.Main`",
      "`Dispatchers.Default`",
      "`Dispatchers.Unconfined`",
      "`Dispatchers.IO`",
      "`Dispatchers.Main.immediate`"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 498,
    "question": "In a `Flow`, what is the effect of using the `conflate()` operator?",
    "answer": "If the collector is slower than the emitter, it drops the intermediate emitted values, keeping only the latest one to be sent to the collector.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It merges two different flows into one",
      "It converts the flow to a `SharedFlow`",
      "It ensures that all values are processed in parallel",
      "If the collector is slower than the emitter, it drops the intermediate emitted values, keeping only the latest one to be sent to the collector.",
      "It collects the flow on the main thread."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 499,
    "question": "How do you implement the Dependency Inversion Principle (DIP) in Android using DI frameworks like Hilt/Dagger?",
    "answer": "By defining dependencies as interfaces/abstractions in the high-level modules and injecting concrete implementations from the low-level DI module.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "By using only `Fragment`s and no `Activity`s",
      "By defining all classes as singletons",
      "By defining dependencies as interfaces/abstractions in the high-level modules and injecting concrete implementations from the low-level DI module.",
      "By avoiding all use of third-party libraries",
      "By making all classes internal."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 500,
    "question": "In Clean Architecture, what is the primary role of the 'Domain' layer?",
    "answer": "To contain the application's business rules and entities, independent of any UI, database, or external framework.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To handle network requests",
      "To display data to the user",
      "To contain the application's business rules and entities, independent of any UI, database, or external framework.",
      "To manage application resources",
      "To define the database schema."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 501,
    "question": "Which architecture principle states that modules should be open for extension but closed for modification?",
    "answer": "Open-Closed Principle (OCP)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Single Responsibility Principle (SRP)",
      "Liskov Substitution Principle (LSP)",
      "Interface Segregation Principle (ISP)",
      "Dependency Inversion Principle (DIP)",
      "Open-Closed Principle (OCP)"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 502,
    "question": "What is the purpose of the `ApplicationComponent` (or `SingletonComponent`) in Hilt/Dagger?",
    "answer": "It holds bindings that should live for the entire duration of the application's process lifetime (singleton scope).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is used only for testing",
      "It holds bindings that should live for the entire duration of the application's process lifetime (singleton scope).",
      "It is created every time a new Activity starts",
      "It defines all the Fragment-scoped dependencies",
      "It is a deprecated component."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 503,
    "question": "In a well-structured MVVM app, who is responsible for deciding whether to fetch data from the network or the local database?",
    "answer": "The Repository",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The Activity/Fragment",
      "The ViewModel",
      "The Data Source (e.g., Retrofit or Room)",
      "The Repository",
      "The Application class"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 504,
    "question": "What is the primary role of 'Robolectric' in Android testing?",
    "answer": "It allows local unit tests to run on a development machine (JVM) by providing a simulated Android environment, enabling testing of code that depends on the Android framework without an emulator.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To perform end-to-end testing of the application UI",
      "To generate mock objects automatically",
      "To measure application performance",
      "It allows local unit tests to run on a development machine (JVM) by providing a simulated Android environment, enabling testing of code that depends on the Android framework without an emulator.",
      "To manage all network connectivity tests."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 505,
    "question": "Which Compose function is used to convert a Kotlin `StateFlow` into a Compose `State<T>`?",
    "answer": "`collectAsState()`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`remember { ... }`",
      "`observeAsState()`",
      "`toState()`",
      "`State<T>()`",
      "`collectAsState()`"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 506,
    "question": "What is 'Recomposition' in Jetpack Compose?",
    "answer": "The process of re-executing Composable functions when their input data (state) changes, to update the UI.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The process of creating a new Activity",
      "The process of cleaning up memory",
      "The process of re-executing Composable functions when their input data (state) changes, to update the UI.",
      "The initial rendering of the UI",
      "The process of saving state before process death."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 507,
    "question": "What is the purpose of the `rememberSaveable` composable?",
    "answer": "It retains state across Recomposition and also across Activity/process recreation (system process death) by integrating with Android's `SavedStateHandle`.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It only retains state across screen rotation",
      "It retains state across Recomposition and also across Activity/process recreation (system process death) by integrating with Android's `SavedStateHandle`.",
      "It saves state to the database",
      "It is a replacement for `ViewModel`",
      "It is used for persistent storage."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 508,
    "question": "In Compose Navigation, what is a primary benefit of using 'nested navigation graphs'?",
    "answer": "To modularize the application's navigation, allowing a smaller, self-contained set of destinations to be grouped and reused.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "They allow deep linking from the web only",
      "They replace the need for Fragments",
      "They are the only way to pass arguments",
      "To modularize the application's navigation, allowing a smaller, self-contained set of destinations to be grouped and reused.",
      "They only work with `ViewModel`."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 509,
    "question": "Which layout composable is specifically designed for placing items relative to each other or to the edges of the screen, similar to an XML `ConstraintLayout`?",
    "answer": "`ConstraintLayout` (from the Compose library)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`Row`",
      "`Column`",
      "`Box`",
      "`LazyColumn`",
      "`ConstraintLayout` (from the Compose library)"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 510,
    "question": "What is the difference between `mutableStateOf()` and `MutableStateFlow` in Android development?",
    "answer": "`mutableStateOf` is part of Compose Runtime for managing UI state within Composables, while `MutableStateFlow` is part of Coroutines/Flow for managing data stream state outside of the UI layer (e.g., in a ViewModel).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "They are interchangeable and perform the same function",
      "`mutableStateOf` is thread-safe, `MutableStateFlow` is not",
      "`mutableStateOf` is for Fragments, `MutableStateFlow` is for Activities",
      "`mutableStateOf` is part of Compose Runtime for managing UI state within Composables, while `MutableStateFlow` is part of Coroutines/Flow for managing data stream state outside of the UI layer (e.g., in a ViewModel).",
      "`MutableStateFlow` can only hold String values."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 511,
    "question": "What is the recommended way to retrieve context within a Composable function?",
    "answer": "`LocalContext.current`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Pass it as a parameter from the Activity",
      "`Context.getCurrent()`",
      "`LocalContext.current`",
      "By using a `val context = this` inside the composable",
      "It is not possible to access context."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 512,
    "question": "Which function should be used to launch a coroutine whose execution needs to be managed (started/cancelled) according to the `LifecycleOwner` of a Composable, and which cancels on Recomposition if its key changes?",
    "answer": "`LaunchedEffect`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`rememberCoroutineScope`",
      "`runBlocking`",
      "`SideEffect`",
      "`LaunchedEffect`",
      "`DisposableEffect`"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 513,
    "question": "What is the correct way to specify a `Spacer` in Compose to take up all available remaining width in a `Row`?",
    "answer": "`Spacer(Modifier.weight(1f))`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`Spacer(Modifier.fillMaxSize())`",
      "`Spacer(Modifier.fillMaxWidth())`",
      "`Spacer(Modifier.weight(1f))`",
      "`Spacer(Modifier.expand())`",
      "`Spacer(Modifier.padding(all = Dp.Infinity))`"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 514,
    "question": "What does the `getLayoutDirection()` method in Android primarily determine?",
    "answer": "Whether the layout should be rendered in Left-to-Right (LTR) or Right-to-Left (RTL) mode, based on the device's locale settings.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The orientation of a `LinearLayout`",
      "The color scheme (light/dark mode)",
      "The DPI density of the screen",
      "Whether the layout should be rendered in Left-to-Right (LTR) or Right-to-Left (RTL) mode, based on the device's locale settings.",
      "The current language setting only."
    ],
    "category": "OTHER"
  },
  {
    "id": 515,
    "question": "What is the primary purpose of 'Kotlin Symbol Processing (KSP)'?",
    "answer": "A processor API that replaces Kotlin Annotation Processing (KAPT) for faster and more type-safe code generation, widely used by libraries like Room and Hilt.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To run Kotlin code on non-Android platforms",
      "A tool for debugging memory leaks in Kotlin",
      "A processor API that replaces Kotlin Annotation Processing (KAPT) for faster and more type-safe code generation, widely used by libraries like Room and Hilt.",
      "A library for functional programming",
      "A tool for converting Java code to Kotlin."
    ],
    "category": "OTHER"
  },
  {
    "id": 516,
    "question": "What is the result of applying the Elvis operator (`?:`) on a nullable type `String?` when the value is null?",
    "answer": "It returns the expression on the right-hand side of the operator.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It throws a `NullPointerException`.",
      "It returns an empty string (`\"\"`).",
      "It returns the expression on the right-hand side of the operator.",
      "It calls the function with a default value.",
      "It converts the type to non-nullable."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 517,
    "question": "Which of these is a valid reason to use a `typealias` in Kotlin?",
    "answer": "To provide a shorter or more meaningful name for an existing type, especially for complex generic types or function types.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To create a new class that can inherit from multiple other classes.",
      "To define a type that is accessible only within the current file.",
      "To provide a shorter or more meaningful name for an existing type, especially for complex generic types or function types.",
      "To restrict the mutability of a variable.",
      "To define a compile-time constant."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 518,
    "question": "What is a major limitation of the `lateinit` modifier in Kotlin?",
    "answer": "It can only be used on non-nullable `var` properties that are not of a primitive type.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It can only be used on `val` properties.",
      "It must be initialized immediately in the constructor.",
      "It can only be used on non-nullable `var` properties that are not of a primitive type.",
      "It is only for delegation properties.",
      "It is only available in data classes."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 519,
    "question": "What is the primary role of an `operator` function in Kotlin?",
    "answer": "To allow a class to use conventional notations (like +, -, *, or []) for certain operations, often resulting in cleaner code.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To define a function that must be implemented by subclasses.",
      "To mark a function as asynchronous.",
      "To allow a class to use conventional notations (like +, -, *, or []) for certain operations, often resulting in cleaner code.",
      "To make a function private.",
      "To enable runtime reflection."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 520,
    "question": "How is the `when` expression different from the Java `switch` statement in Kotlin?",
    "answer": "'when' can be used as an expression (returning a value), supports multiple and custom conditions, works with any type, and doesn’t require a default case when exhaustive.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The `when` statement is faster, works only with primitives and Enums, but can return a value.",
      "`when` supports custom conditions and all types, but still requires a mandatory `else` block to compile successfully.",
      "'when' can be used as an expression (returning a value), supports multiple and custom conditions, works with any type, and doesn’t require a default case when exhaustive.",
      "The `when` expression can check for equality and custom conditions, but only works with primitive types (like the Java `switch`).",
      "`when` is a replacement for `if/else` that must be exhaustive (always needs an `else` block) but cannot return a value."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 521,
    "question": "What is the purpose of the `@JvmStatic` annotation in a Kotlin `companion object`?",
    "answer": "It exposes a member of the `companion object` as a static method in the generated Java bytecode, making it easier to call from Java code.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It ensures the function runs on a background thread.",
      "It makes the member a singleton.",
      "It is used to define a constant value.",
      "It exposes a member of the `companion object` as a static method in the generated Java bytecode, making it easier to call from Java code.",
      "It marks the member as thread-safe."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 522,
    "question": "Which modifier should be used on an interface function if you want to provide a default implementation that can be overridden by a class?",
    "answer": "default implementation is allowed without a specific modifier",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`default`",
      "`open`",
      "`abstract`",
      "default implementation is allowed without a specific modifier",
      "`override`"
    ],
    "category": "KOTLIN"
  },
  {
    "id": 523,
    "question": "How does an `object` declaration in Kotlin guarantee a singleton instance?",
    "answer": "The initialization block runs lazily and thread-safely upon first access, and the compiler ensures only a single instance is created.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is initialized eagerly at compile time.",
      "It runs on the main thread only.",
      "The initialization block runs lazily and thread-safely upon first access, and the compiler ensures only a single instance is created.",
      "It relies on the developer to manage the single instance.",
      "It is the same as a private constructor."
    ],
    "category": "KOTLIN"
  },
  {
    "id": 524,
    "question": "What is the primary role of the `Application` class in an Android app?",
    "answer": "To hold global application state and provide the root context for components that need to live for the duration of the entire app process.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To display the main UI screen.",
      "To manage all network requests.",
      "To hold global application state and provide the root context for components that need to live for the duration of the entire app process.",
      "To define the app's permissions.",
      "To handle background tasks only."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 525,
    "question": "In the Fragment lifecycle, when is it safe to interact with the Fragment's views (i.e., when is the view hierarchy created)?",
    "answer": "After `onCreateView()` returns, typically in `onViewCreated()`.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "In `onCreate()`.",
      "In `onAttach()`.",
      "After `onCreateView()` returns, typically in `onViewCreated()`.",
      "In `onResume()`.",
      "In `onStart()`."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 526,
    "question": "Which of these is the most appropriate way to pass complex, structured data between an Activity and a Fragment?",
    "answer": "Using a `ViewModel` that is scoped to the `Activity` or the `NavGraph` and holds a data model (or using `Parcelable` with `Bundle` for arguments).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Passing it as a global static variable.",
      "Saving it to `SharedPreferences` before navigation.",
      "Using a `ViewModel` that is scoped to the `Activity` or the `NavGraph` and holds a data model (or using `Parcelable` with `Bundle` for arguments).",
      "Using a custom `Intent` action.",
      "Using `EventBus`."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 527,
    "question": "What is the main purpose of the `onTrimMemory()` callback in an Android component?",
    "answer": "To notify the application that the system is running low on memory, allowing it to release resources based on the specified level to improve overall system performance.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To save the UI state before destruction.",
      "To handle configuration changes.",
      "To notify the application that the system is running low on memory, allowing it to release resources based on the specified level to improve overall system performance.",
      "To initiate network data synchronization.",
      "To manage deep links."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 528,
    "question": "Which mechanism does Android use to communicate between processes (IPC)?",
    "answer": "Binder",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Intent",
      "SharedPreferences",
      "ContentProvider",
      "BroadcastReceiver",
      "Binder"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 529,
    "question": "What is the purpose of the `android:allowBackup=\"false\"` attribute in the manifest?",
    "answer": "It disables the automatic backup and restore of app data to Google Drive for the app.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It prevents the app from accessing external storage.",
      "It disables the ability to install the app on new devices.",
      "It prevents the user from manually uninstalling the app.",
      "It disables the automatic backup and restore of app data to Google Drive for the app.",
      "It forces the app to only use local resources."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 530,
    "question": "In the context of coroutines, what is the effect of using `runBlocking`?",
    "answer": "It blocks the current thread until the coroutine inside it completes, and it is primarily used for bridging non-suspending code with suspending code (e.g., in `main()` or tests).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It ensures the code runs on the main thread without blocking.",
      "It runs the code in parallel with other coroutines.",
      "It blocks the current thread until the coroutine inside it completes, and it is primarily used for bridging non-suspending code with suspending code (e.g., in `main()` or tests).",
      "It automatically cancels the coroutine after a timeout.",
      "It is a recommended way to perform background work in a production app."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 531,
    "question": "Which terminal operator on a Kotlin `Flow` collects all values and returns only the last emitted value (throwing an exception if the flow is empty)?",
    "answer": "`last()`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`collect()`",
      "`toList().last()`",
      "`first()`",
      "`last()`",
      "`reduce { ... }`"
    ],
    "category": "COROUTINES"
  },
  {
    "id": 532,
    "question": "How do you manage to switch between two different dispatchers inside a single `suspend` function while maintaining structured concurrency?",
    "answer": "By calling `withContext(NewDispatcher) { ... }` which suspends the current coroutine until the block completes, then resumes in the original dispatcher.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "By starting a new `launch(NewDispatcher) { ... }` block.",
      "By using `GlobalScope.launch { ... }`.",
      "By calling `withContext(NewDispatcher) { ... }` which suspends the current coroutine until the block completes, then resumes in the original dispatcher.",
      "By calling `Thread.sleep()`.",
      "It is not possible to change dispatchers."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 533,
    "question": "What is the primary characteristic of the `Dispatchers.Unconfined` dispatcher?",
    "answer": "It starts the coroutine on the calling thread, but after the first suspension, it resumes in the dispatcher determined by the suspend function that was called.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It always runs on the main thread.",
      "It always runs on a new background thread.",
      "It starts the coroutine on the calling thread, but after the first suspension, it resumes in the dispatcher determined by the suspend function that was called.",
      "It guarantees execution in parallel.",
      "It is only for testing purposes."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 534,
    "question": "What mechanism in Kotlin Flow is used to avoid crashing when an operation throws an exception mid-stream?",
    "answer": "The `catch { ... }` operator, which can catch the exception and either emit a value, throw a different exception, or re-throw the original exception.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A global `try-catch` block.",
      "Using the `buffer()` operator.",
      "The `catch { ... }` operator, which can catch the exception and either emit a value, throw a different exception, or re-throw the original exception.",
      "Using a `SupervisorJob`.",
      "Marking the flow as `cancellable`."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 535,
    "question": "In the context of `SharedFlow` and `StateFlow`, what does the `replay` parameter define?",
    "answer": "The number of the most recently emitted values that should be sent to any new collector immediately upon subscription.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "The number of times the flow will restart on failure.",
      "The minimum number of collectors required to keep the flow active.",
      "The maximum number of values the collector can process at once.",
      "The number of the most recently emitted values that should be sent to any new collector immediately upon subscription.",
      "The maximum buffer size."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 536,
    "question": "Which coroutine scope is the recommended approach for managing long-running operations (like background data synchronization) that must outlive the UI (Activity/Fragment) but must terminate when the application process is killed?",
    "answer": "A custom CoroutineScope instance tied to the Application lifecycle (often managed by a Dependency Injection component).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Using `GlobalScope.launch { ... }` because it automatically survives the lifecycle of all UI components.",
      "Using WorkManager to schedule the work, as it is guaranteed to execute even if the application process is killed.",
      "A custom CoroutineScope instance tied to the Application lifecycle (often managed by a Dependency Injection component).",
      "The `lifecycleScope` of the main Activity, since it is the root of the UI tree.",
      "A `ViewModelScope` created in the Application class and shared, as it is designed to survive configuration changes."
    ],
    "category": "COROUTINES"
  },
  {
    "id": 537,
    "question": "What is the primary function of `MutableLiveData.setValue(T)`?",
    "answer": "To update the value on the main (UI) thread.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To update the value on a background thread.",
      "To post an event to all observers.",
      "To update the value on the main (UI) thread.",
      "To observe the data from the ViewModel.",
      "To clear the data."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 538,
    "question": "In Room, what is the advantage of using a `PagingSource` return type in a DAO query?",
    "answer": "It allows Room to work with the Jetpack Paging library, efficiently loading and displaying large lists of data incrementally.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It makes the query run on the main thread.",
      "It caches all query results in memory.",
      "It allows Room to work with the Jetpack Paging library, efficiently loading and displaying large lists of data incrementally.",
      "It defines a relationship between two entities.",
      "It only allows synchronous queries."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 539,
    "question": "Which WorkManager constraint ensures that the device's screen is on before the work can run?",
    "answer": "No built-in constraint for screen-on status exists; only RequiresCharging or RequiresDeviceIdle, which don’t control screen state.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`RequiresScreenOn`",
      "`RequiresDeviceActive`",
      "`RequiresScreenUnlocked`",
      "`RequiresDeviceIdle`",
      "No built-in constraint for screen-on status exists; only RequiresCharging or RequiresDeviceIdle, which don’t control screen state."
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 540,
    "question": "What is the primary use case for Jetpack Compose's `LaunchedEffect(key1)` with a key?",
    "answer": "To launch a coroutine when the Composable first enters the composition and restart/re-run the coroutine if the `key1` parameter changes.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To define a mutable state variable.",
      "To launch a coroutine that must run indefinitely.",
      "To launch a coroutine when the Composable first enters the composition and restart/re-run the coroutine if the `key1` parameter changes.",
      "To execute a piece of non-suspending code.",
      "To handle UI gestures."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 541,
    "question": "In Compose, how do you correctly pass an external `ViewModel` instance to a Composable function using Hilt?",
    "answer": "By calling val viewModel: MyViewModel = hiltViewModel() inside the Composable, which retrieves the Hilt-provided instance.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "By manually instantiating it with the `ViewModelProvider`.",
      "By calling val viewModel: MyViewModel = hiltViewModel() inside the Composable, which retrieves the Hilt-provided instance.",
      "By making the ViewModel a singleton.",
      "By passing it as an explicit parameter from the Activity/Fragment.",
      "By using `LocalViewModel.current`."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 542,
    "question": "What is the key difference between a Composable function marked with `@Stable` and one that is unmarked?",
    "answer": "A type marked as @Stable tells the Compose compiler that its public properties don’t change unexpectedly, allowing recomposition to be skipped when parameters remain equal.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A `@Stable` Composable is only for preview.",
      "A `@Stable` Composable runs on a background thread.",
      "A type marked as @Stable tells the Compose compiler that its public properties don’t change unexpectedly, allowing recomposition to be skipped when parameters remain equal.",
      "A `@Stable` Composable cannot hold state.",
      "It must be used with a `remember` block."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 543,
    "question": "In Compose, which component is used to display a potentially infinite list of items with performance optimization by composing and laying out only the visible items?",
    "answer": "`LazyColumn` / `LazyRow`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`Column` / `Row`",
      "`Box`",
      "`RecyclerView`",
      "`LazyColumn` / `LazyRow`",
      "`Scaffold`"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 544,
    "question": "How does `Modifier.fillMaxSize()` differ from `Modifier.wrapContentSize()`?",
    "answer": "`fillMaxSize()` forces the composable to take all available space, while `wrapContentSize()` makes it only as large as its children require.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "They are equivalent.",
      "`fillMaxSize()` is for width, `wrapContentSize()` is for height.",
      "`fillMaxSize()` forces the composable to take all available space, while `wrapContentSize()` makes it only as large as its children require.",
      "`wrapContentSize()` is deprecated.",
      "`fillMaxSize()` only works inside a `Box`."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 545,
    "question": "Which Composable should be used to define the overall structure of a screen, including a `TopAppBar`, `BottomBar`, and `FloatingActionButton`?",
    "answer": "`Scaffold`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`Box`",
      "`Column`",
      "`Surface`",
      "`ModalDrawer`",
      "`Scaffold`"
    ],
    "category": "COMPOSE"
  },
  {
    "id": 546,
    "question": "What is the purpose of the `@EntryPoint` annotation in Hilt?",
    "answer": "It allows Hilt to provide dependencies to classes that Hilt cannot inject directly (e.g., system-instantiated classes or classes that require context).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It marks the main entry point of the application.",
      "It is a deprecated feature.",
      "It allows Hilt to provide dependencies to classes that Hilt cannot inject directly (e.g., system-instantiated classes or classes that require context).",
      "It is used for multi-module setup only.",
      "It defines a factory for ViewModels."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 547,
    "question": "In MVVM, what is the key difference between UI State (Data) and UI Events (Actions)?",
    "answer": "UI State describes *what to show* on the screen and is observable (e.g., `loading: Boolean`), while UI Events describe *what happened* (e.g., `userClickedLogin`) and are usually one-time actions.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "UI State is always mutable, UI Events are not.",
      "UI State is managed by the Repository, UI Events by the ViewModel.",
      "UI State describes *what to show* on the screen and is observable (e.g., `loading: Boolean`), while UI Events describe *what happened* (e.g., `userClickedLogin`) and are usually one-time actions.",
      "UI Events are only for network calls, UI State is for local data.",
      "They are two different names for the same concept."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 548,
    "question": "What is a Use Case (or Interactor) in Clean Architecture?",
    "answer": "A class that encapsulates a single, specific business rule or application logic interaction, residing in the Domain layer.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A class that handles all network I/O operations.",
      "A class that displays the UI.",
      "A class that encapsulates a single, specific business rule or application logic interaction, residing in the Domain layer.",
      "A class that manages the `ViewModel` factory.",
      "A configuration file for dependencies."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 549,
    "question": "In test doubles, what is the difference between a Stub and a Mock?",
    "answer": "A Stub provides canned answers to calls (state-based verification), while a Mock is used to verify that specific methods were called (behavior-based verification).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A Stub is used for UI tests, a Mock for unit tests.",
      "A Stub simulates the real object, a Mock is a placeholder.",
      "A Stub provides canned answers to calls (state-based verification), while a Mock is used to verify that specific methods were called (behavior-based verification).",
      "A Mock is always thread-safe, a Stub is not.",
      "A Stub can only be used on interfaces."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 550,
    "question": "Which principle suggests that clients should not be forced to depend on methods they do not use (i.e., prefer many smaller, specialized interfaces over one large general-purpose interface)?",
    "answer": "Interface Segregation Principle (ISP)",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Single Responsibility Principle (SRP)",
      "Open-Closed Principle (OCP)",
      "Liskov Substitution Principle (LSP)",
      "Dependency Inversion Principle (DIP)",
      "Interface Segregation Principle (ISP)"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 551,
    "question": "What is the primary function of BuildSrc in a Gradle multi-module project?",
    "answer": "To define and centralize dependencies, versions, and build logic using Kotlin DSL, making them type-safe and easily shareable across all modules.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To store all the application's Java code.",
      "To define and centralize dependencies, versions, and build logic using Kotlin DSL, making them type-safe and easily shareable across all modules.",
      "To contain all the UI layout files.",
      "To run all integration tests.",
      "To manage all asset files."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 552,
    "question": "Which Android build type is optimized for size and performance and is used to create the final application package uploaded to the stores?",
    "answer": "release",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "debug",
      "staging",
      "test",
      "production",
      "release"
    ],
    "category": "OTHER"
  },
  {
    "id": 553,
    "question": "What is the main purpose of the `adb logcat` command?",
    "answer": "To view the system log buffer in real time, which contains system messages, stack traces, and messages printed by the app using `Log` calls.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To install an APK on the device.",
      "To transfer files to the device.",
      "To view the system log buffer in real time, which contains system messages, stack traces, and messages printed by the app using `Log` calls.",
      "To capture a screenshot.",
      "To get a list of all installed apps."
    ],
    "category": "OTHER"
  },
  {
    "id": 554,
    "question": "What is the key advantage of using a `VectorDrawable` over a standard PNG image in Android?",
    "answer": "It is an XML-based graphic that can be scaled without loss of quality, leading to smaller APK size and one asset file for all screen densities.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It is always faster to draw than a PNG.",
      "It is an XML-based graphic that can be scaled without loss of quality, leading to smaller APK size and one asset file for all screen densities.",
      "It is used only for animations.",
      "It is easier to edit than a PNG.",
      "It supports 3D rendering."
    ],
    "category": "OTHER"
  },
  {
    "id": 555,
    "question": "When debugging a performance issue, what does the term 'jank' refer to in Android UI development?",
    "answer": "Visible stuttering or choppiness in the UI (dropping frames) due to the main thread being blocked or overloaded, causing the frame rate to drop below 60fps/16ms.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "A type of memory leak.",
      "A network connectivity error.",
      "Visible stuttering or choppiness in the UI (dropping frames) due to the main thread being blocked or overloaded, causing the frame rate to drop below 60fps/16ms.",
      "An unexpected application crash.",
      "A problem with the Gradle build system."
    ],
    "category": "OTHER"
  },
  {
    "id": 556,
    "question": "What is the significance of the Android App Bundle (AAB) format compared to the traditional APK?",
    "answer": "AAB is a publishing format that defers final APK generation to Google Play, allowing for optimized, smaller APKs (via dynamic delivery) tailored to the user's specific device configuration.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "AAB is only for testing purposes.",
      "AAB is fully compatible with all versions of Android.",
      "AAB is a publishing format that defers final APK generation to Google Play, allowing for optimized, smaller APKs (via dynamic delivery) tailored to the user's specific device configuration.",
      "AAB is only used for Wear OS apps.",
      "AAB removes the need for signing the application."
    ],
    "category": "OTHER"
  },
  {
    "id": 557,
    "question": "Which of these is the BEST practice for handling a large bitmap image before displaying it in an `ImageView`?",
    "answer": "Load a downsampled version of the bitmap that matches the display size of the `ImageView` to conserve memory.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "Load the full-resolution bitmap directly, as Android handles scaling.",
      "Save the bitmap to SharedPreferences first.",
      "Load a downsampled version of the bitmap that matches the display size of the `ImageView` to conserve memory.",
      "Force garbage collection before loading the bitmap.",
      "Use an `AsyncTask` to load the full image on the main thread."
    ],
    "category": "OTHER"
  },
  {
    "id": 558,
    "question": "What is the primary difference between `git merge` and `git rebase`?",
    "answer": "`merge` creates a new merge commit, preserving the branch history; `rebase` rewrites the project history by moving/reapplying commits from one branch onto another, creating a linear history.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`merge` is only for remote branches, `rebase` is for local.",
      "`rebase` is a destructive operation that cannot be undone.",
      "`merge` creates a new merge commit, preserving the branch history; `rebase` rewrites the project history by moving/reapplying commits from one branch onto another, creating a linear history.",
      "They are two aliases for the same command.",
      "`merge` is only for fast-forward commits."
    ],
    "category": "OTHER"
  },
  {
    "id": 559,
    "question": "Which Git command is used to record a snapshot of your repository for easy reference, often used to mark release points?",
    "answer": "`git tag`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`git stash`",
      "`git log`",
      "`git commit`",
      "`git branch`",
      "`git tag`"
    ],
    "category": "OTHER"
  },
  {
    "id": 560,
    "question": "In the context of the SOLID principles, what is the Single Responsibility Principle (SRP)?",
    "answer": "A module, class, or function should have only one reason to change, meaning it should have only one job or responsibility.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "All classes should be singletons.",
      "A class should only extend one interface.",
      "A module, class, or function should have only one reason to change, meaning it should have only one job or responsibility.",
      "All dependencies must be inverted.",
      "Code should be open for modification."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 561,
    "question": "In a custom View, which method is typically overridden to specify the view's desired size, often based on its content and MeasureSpec constraints?",
    "answer": "`onMeasure(int widthMeasureSpec, int heightMeasureSpec)`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`onDraw(Canvas canvas)`",
      "`onLayout(boolean changed, int left, int top, int right, int bottom)`",
      "`onSizeChanged(int w, int h, int oldw, int oldh)`",
      "`onMeasure(int widthMeasureSpec, int heightMeasureSpec)`",
      "`onAttachedToWindow()`"
    ],
    "category": "ANDROID_SDK"
  },
  {
    "id": 562,
    "question": "Which `MutableLiveData` method should be used when updating the value from a background thread?",
    "answer": "`postValue(T value)`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`setValue(T value)`",
      "`updateValue(T value)`",
      "`postValue(T value)`",
      "`applyValue(T value)`",
      "Both `setValue` and `postValue` can be used."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 563,
    "question": "When defining an `@Entity` in Room, what attribute is used to specify a column name in the database that is different from the field name in the Kotlin class?",
    "answer": "`@ColumnInfo(name = \"new_name\")`",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "`@FieldName(\"new_name\")`",
      "`@PrimaryKey(columnName = \"new_name\")`",
      "`@Ignore`",
      "`@Column(name = \"new_name\")`",
      "`@ColumnInfo(name = \"new_name\")`"
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 564,
    "question": "What is a `TypeConverter` in Jetpack Room used for?",
    "answer": "To tell Room how to convert custom, non-primitive data types (like `Date` or a complex object) into types that can be stored in the SQLite database (like `Long` or `String`).",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "To convert Java types to Kotlin types.",
      "To handle database migrations automatically.",
      "To define relationships between entities.",
      "To tell Room how to convert custom, non-primitive data types (like `Date` or a complex object) into types that can be stored in the SQLite database (like `Long` or `String`).",
      "To convert Room entities to JSON."
    ],
    "category": "ARCHITECTURE"
  },
  {
    "id": 565,
    "question": "In Compose, what is the effect of using the `key` function within a loop (e.g., inside a `LazyColumn` or `Column`)?",
    "answer": "It provides a stable identity for items in the list, allowing Compose to correctly reuse, move, and skip recomposing composables when the list changes or is scrolled.",
    "type": "MULTIPLE_CHOICE",
    "fakeOptions": [
      "It makes the items clickable.",
      "It forces the items to be recomposed every time.",
      "It provides a stable identity for items in the list, allowing Compose to correctly reuse, move, and skip recomposing composables when the list changes or is scrolled.",
      "It is used for accessibility purposes only.",
      "It defines the unique primary key of the item."
    ],
    "category": "COMPOSE"
  },
  {
    "id": 566,
    "question": "```kotlin\nfun main() {\n  var x = 1\n  if (x == 1) {\n    x = 0\n  }\n  println(x)\n}\n```\n\n",
    "answer": "0",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1",
      "0",
      "2",
      "Compilation error",
      "NullPointerException"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 567,
    "question": "```kotlin\nval list = listOf(\"a\", \"b\", \"c\")\nval result = list.getOrElse(5) { \"d\" }\nprintln(result)\n```\n\n",
    "answer": "d",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "c",
      "IndexOutOfBoundsException",
      "d",
      "a",
      "null"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 568,
    "question": "```java\npublic class Test {\n  public static void main(String[] args) {\n    int a = 5;\n    int b = 2;\n    System.out.println(a / b);\n  }\n}\n```\n\n",
    "answer": "2",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "2.5",
      "2",
      "2.0",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 569,
    "question": "```kotlin\nfun main() {\n  val x = 5\n  val y = 10\n  println(x + y)\n}\n```\n\n",
    "answer": "15",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "10",
      "15",
      "510",
      "Compilation error",
      "NullPointerException"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 570,
    "question": "```kotlin\nval list = mutableListOf(1, 2, 3)\nlist.add(4)\nprintln(list.size)\n```\n\n",
    "answer": "4",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "3",
      "4",
      "5",
      "IndexOutOfBoundsException"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 571,
    "question": "```kotlin\nfun main() {\n  val str: String? = null\n  println(str?.length ?: 5)\n}\n```\n\n",
    "answer": "5",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "null",
      "0",
      "5",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 572,
    "question": "```kotlin\nval numbers = listOf(1, 2, 3)\nprintln(numbers.first())\n```\n\n",
    "answer": "1",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "0",
      "1",
      "2",
      "3",
      "IndexOutOfBoundsException"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 573,
    "question": "```kotlin\nval map = mapOf(\"a\" to 1, \"b\" to 2)\nprintln(map[\"c\"] ?: 0)\n```\n\n",
    "answer": "0",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "null",
      "2",
      "0",
      "1"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 574,
    "question": "```kotlin\nfun main() {\n  val a = 3\n  val b = 4\n  println(a * b)\n}\n```\n\n",
    "answer": "12",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "7",
      "12",
      "34",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 575,
    "question": "```kotlin\nval nums = listOf(1, 2, 3)\nprintln(nums.sum())\n```\n\n",
    "answer": "6",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "3",
      "5",
      "6",
      "9"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 576,
    "question": "```kotlin\nval str = \"Kotlin\"\nprintln(str.lowercase())\n```\n\n",
    "answer": "kotlin",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "Kоtlin",
      "KОTLIN",
      "kotlin",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 577,
    "question": "```kotlin\nval items = listOf(\"a\", \"b\", \"c\")\nprintln(items.joinToString(\"-\"))\n```\n\n",
    "answer": "a-b-c",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "abc",
      "a-b-c",
      "a,␣b,␣c",
      "a|b|c"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 578,
    "question": "```kotlin\nfun greet(name: String = \"User\") {\n  println(\"Hello, $name!\")\n}\n\ngreet()\n```\n\n",
    "answer": "Hello, User!",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "Hello, null!",
      "Hello!",
      "Hello, User!",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 579,
    "question": "```kotlin\nval text = \"Android\"\nprintln(text[0])\n```\n\n",
    "answer": "A",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "n",
      "A",
      "а",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 580,
    "question": "```kotlin\nval range = 1..5\nprintln(range.count())\n```\n\n",
    "answer": "5",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "4",
      "5",
      "6",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 581,
    "question": "```kotlin\nfun main() {\n  val numbers = listOf(1, 2, 3, 4)\n  println(numbers.filter { it % 2 == 0 })\n}\n```\n\n",
    "answer": "[2, 4]",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "[1, 3]",
      "[2, 4]",
      "[1, 2, 3, 4]",
      "[4, 2]"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 582,
    "question": "```kotlin\nval str = \"abc\"\nprintln(str.reversed())\n```\n\n",
    "answer": "cba",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "abc",
      "cba",
      "acb",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 583,
    "question": "```kotlin\nval nums = listOf(3, 1, 2)\nprintln(nums.sorted())\n```\n\n",
    "answer": "[1, 2, 3]",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "[3, 2, 1]",
      "[1, 2, 3]",
      "[2, 3, 1]",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 584,
    "question": "```kotlin\nval text = \"kotlin\"\nprintln(text.capitalize())\n```\n\n",
    "answer": "Kotlin",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "kоtlin",
      "Kоtlin",
      "KOTLIN",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 585,
    "question": "```kotlin\nfun square(x: Int) = x * x\nprintln(square(3))\n```\n\n",
    "answer": "9",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "6",
      "9",
      "3",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 586,
    "question": "```kotlin\nval x = 10\nval y = 3\nprintln(x % y)\n```\n\n",
    "answer": "1",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "0",
      "1",
      "3",
      "10"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 587,
    "question": "```kotlin\nval list = listOf(1, 2, 3)\nprintln(list.contains(2))\n```\n\n",
    "answer": "true",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "false",
      "true",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 588,
    "question": "```kotlin\nval str = \"Hello\"\nprintln(str.substring(1, 4))\n```\n\n",
    "answer": "ell",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "Hel",
      "ell",
      "llo",
      "ello"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 589,
    "question": "```java\npublic class Main {\n  public static void main(String[] args) {\n    String s = \"Java\";\n    System.out.println(s.length());\n  }\n}\n```\n\n",
    "answer": "4",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "3",
      "4",
      "5",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 590,
    "question": "```java\nint[] arr = {1, 2, 3};\nSystem.out.println(arr[1]);\n```\n\n",
    "answer": "2",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1",
      "2",
      "3",
      "IndexOutOfBoundsException"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 591,
    "question": "```java\nint x = 10;\nint y = 0;\nSystem.out.println(x / (y + 1));\n```\n\n",
    "answer": "10",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "0",
      "10",
      "ArithmeticException",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 592,
    "question": "```java\nString s = null;\nSystem.out.println(s == null);\n```\n\n",
    "answer": "true",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "false",
      "true",
      "NullPointerException"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 593,
    "question": "```java\nfor (int i = 0; i < 3; i++) {\n  System.out.print(i);\n}\n```\n\n",
    "answer": "012",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "123",
      "012",
      "0␣1␣2",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 594,
    "question": "```java\nString s = \"abc\";\nSystem.out.println(s.toUpperCase());\n```\n\n",
    "answer": "ABC",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "аbc",
      "ABC",
      "Abс",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 595,
    "question": "```java\nint a = 3;\nint b = 4;\nSystem.out.println(a * b);\n```\n\n",
    "answer": "12",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "7",
      "12",
      "34",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 596,
    "question": "```java\nint[] arr = {10, 20, 30};\nSystem.out.println(arr.length);\n```\n\n",
    "answer": "3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "2",
      "3",
      "4",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 597,
    "question": "```kotlin\nfun main() {\n  val a = 2\n  val b = 3\n  println(a + b)\n}\n```\n",
    "answer": "5",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "6",
      "5",
      "23",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 598,
    "question": "```kotlin\nfun main() {\n  val s = \"Hello\"\n  println(s.length)\n}\n```\n",
    "answer": "5",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "4",
      "5",
      "6",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 599,
    "question": "```kotlin\nfun main() {\n  val nums = listOf(1, 2, 3)\n  println(nums.sum())\n}\n```\n",
    "answer": "6",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "5",
      "6",
      "3",
      "NullPointerException"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 600,
    "question": "```kotlin\nfun main() {\n  var x: Int? = null\n  println(x ?: 10)\n}\n```\n",
    "answer": "10",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "null",
      "0",
      "10",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 601,
    "question": "```kotlin\nfun main() {\n  val s = \"abc\"\n  println(s.reversed())\n}\n```\n",
    "answer": "cba",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "abc",
      "cba",
      "Compilation error",
      "null"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 602,
    "question": "```kotlin\nfun main() {\n  val range = 1..3\n  println(range.joinToString())\n}\n```\n",
    "answer": "1,␣2,␣3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1␣2␣3",
      "1,2,3",
      "1,␣2,␣3",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 603,
    "question": "```kotlin\nfun main() {\n  val list = mutableListOf(1,2)\n  list += 3\n  println(list.last())\n}\n```\n",
    "answer": "3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "2",
      "3",
      "Compilation error",
      "null"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 604,
    "question": "```kotlin\nfun inc(i: Int) = i + 1\nfun main() {\n  println(inc(4))\n}\n```\n",
    "answer": "5",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "4",
      "5",
      "6",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 605,
    "question": "```kotlin\nfun main() {\n  val s: String? = \"k\"\n  println(s?.toUpperCase())\n}\n```\n",
    "answer": "К",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "k",
      "К",
      "null",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 606,
    "question": "```kotlin\nfun main() {\n  val map = mapOf(\"a\" to 1, \"b\" to 2)\n  println(map[\"b\"])\n}\n```\n",
    "answer": "2",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1",
      "2",
      "null",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 607,
    "question": "```kotlin\nfun main() {\n  val arr = arrayOf(1,2,3)\n  println(arr.size)\n}\n```\n",
    "answer": "3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "2",
      "3",
      "Compilation error",
      "0"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 608,
    "question": "```kotlin\nfun main() {\n  val s = \"x\"\n  println(\"$s$s\")\n}\n```\n",
    "answer": "xx",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "x",
      "xx",
      "$s$s",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 609,
    "question": "```kotlin\nfun main() {\n  val nums = listOf(1,2,3,4)\n  println(nums.filter { it % 2 == 0 }.joinToString())\n}\n```\n",
    "answer": "2, 4",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1, 3",
      "2, 4",
      "1, 2, 3, 4",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 610,
    "question": "```kotlin\nfun main() {\n  val s = \"␣␣a␣␣\"\n  println(s.trim())\n}\n```\n",
    "answer": "a",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "␣␣a␣␣",
      "a",
      "\"a\"",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 611,
    "question": "```kotlin\ndata class P(val x: Int)\nfun main() {\n  val p1 = P(1)\n  val p2 = P(1)\n  println(p1 == p2)\n}\n```\n",
    "answer": "true",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "true",
      "false",
      "Compilation error",
      "null"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 612,
    "question": "```kotlin\nfun main() {\n  val s = \"a,b,c\"\n  println(s.split(\",\")[1])\n}\n```\n",
    "answer": "b",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "a",
      "b",
      "c",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 613,
    "question": "```kotlin\nfun main() {\n  val x = if (true) \"yes\" else \"no\"\n  println(x)\n}\n```\n",
    "answer": "yes",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "yes",
      "no",
      "Compilation error",
      "null"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 614,
    "question": "```kotlin\nfun main() {\n  val set = setOf(1,1,2)\n  println(set.size)\n}\n```\n",
    "answer": "2",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "3",
      "2",
      "1",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 615,
    "question": "```kotlin\nfun main(){\n  val f: (Int)->Int = { it * 2 }\n  println(f(3))\n}\n```\n",
    "answer": "6",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "3",
      "6",
      "9",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 616,
    "question": "```kotlin\nclass A { override fun toString() = \"A\" }\nfun main(){\n  println(A())\n}\n```\n",
    "answer": "A",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "A",
      "class A",
      "Compilation error",
      "null"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 617,
    "question": "```kotlin\nfun main(){\n  val x = listOf(1,2,3).map{ it * it }\n  println(x.joinToString())\n}\n```\n",
    "answer": "1,␣4,␣9",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1,4,9",
      "1,␣4,␣9",
      "1␣4␣9",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 618,
    "question": "```kotlin\nfun main(){\n  val r = (1..5).count { it > 3 }\n  println(r)\n}\n```\n",
    "answer": "2",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "3",
      "2",
      "5",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 619,
    "question": "```kotlin\nfun main(){\n  val x = mutableListOf(\"a\")\n  x.add(0, \"b\")\n  println(x.joinToString())\n}\n```\n",
    "answer": "b, a",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "a, b",
      "b, a",
      "Compilation error",
      "null"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 620,
    "question": "```kotlin\nfun main(){\n  val a = 5\n  println(a in 1..5)\n}\n```\n",
    "answer": "true",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "true",
      "false",
      "Compilation error",
      "1..5"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 621,
    "question": "```kotlin\nfun main(){\n  val t = Pair(1, \"x\")\n  println(t.second)\n}\n```\n",
    "answer": "x",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1",
      "x",
      "Pair(1, x)",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 622,
    "question": "```kotlin\nfun main(){\n  val s = \"Kotlin\"\n  println(s.substring(0,3))\n}\n```\n",
    "answer": "Kot",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "Kot",
      "Kotlin",
      "Kin",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 623,
    "question": "```kotlin\nfun main(){\n  val x = listOf(1,2,3).reduce { acc, v -> acc + v }\n  println(x)\n}\n```\n",
    "answer": "6",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "6",
      "123",
      "0",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 624,
    "question": "```kotlin\nfun main(){\n  val nums = (1..3).flatMap { listOf(it, it*10) }\n  println(nums.joinToString())\n}\n```\n",
    "answer": "1,␣10,␣2,␣20,␣3,␣30",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1,10,2,20,3,30",
      "1,␣10,␣2,␣20,␣3,␣30",
      "1␣10␣2␣20␣3␣30",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 625,
    "question": "```kotlin\nfun main(){\n  val s = \"\".isEmpty()\n  println(s)\n}\n```\n",
    "answer": "true",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "true",
      "false",
      "Compilation error",
      "null"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 626,
    "question": "```kotlin\nfun main(){\n  val x = IntArray(3) { it + 1 }\n  println(x.joinToString())\n}\n```\n",
    "answer": "1,␣2,␣3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1,2,3",
      "1,␣2,␣3",
      "0,␣1,␣2",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 627,
    "question": "```kotlin\nfun main(){\n  val s = listOf(\"a\",\"b\").joinToString(separator = \":\")\n  println(s)\n}\n```\n",
    "answer": "a:b",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "a,b",
      "a:b",
      "ab",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 628,
    "question": "```kotlin\nfun main(){\n  val x = 10\n  println(x % 3)\n}\n```\n",
    "answer": "1",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1",
      "0",
      "3",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 629,
    "question": "```kotlin\nfun main(){\n  println(listOf(1,2,3).contains(2))\n}\n```\n",
    "answer": "true",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "true",
      "false",
      "Compilation error",
      "2"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 630,
    "question": "```kotlin\nfun main(){\n  val s = \"a\"\n  println(s == \"a\")\n}\n```\n",
    "answer": "true",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "true",
      "false",
      "Compilation error",
      "null"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 631,
    "question": "```kotlin\nfun main(){\n  val x = 1\n  when(x){\n    0 -> println(\"zero\")\n    1 -> println(\"one\")\n    else -> println(\"other\")\n  }\n}\n```\n",
    "answer": "one",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "zero",
      "one",
      "other",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 632,
    "question": "```kotlin\nfun main(){\n  val a = arrayOf(\"a\",\"b\")\n  for (i in a) print(i)\n}\n```\n",
    "answer": "аb",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "аb",
      "a␣b",
      "a\nb",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 633,
    "question": "```kotlin\nfun main(){\n  val x = listOf(1,2,3).indexOf(2)\n  println(x)\n}\n```\n",
    "answer": "1",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "0",
      "1",
      "2",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 634,
    "question": "```kotlin\nfun main(){\n  val s = \"Hi\".padStart(4)\n  println(s)\n}\n```\n",
    "answer": "␣␣Hi",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "Hi",
      "␣␣Hi",
      "Hi␣␣",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 635,
    "question": "```kotlin\nfun main(){\n  val res = sequenceOf(1,2,3).map { it * 2 }.toList()\n  println(res.joinToString())\n}\n```\n",
    "answer": "2,␣4,␣6",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "2,4,6",
      "2,␣4,␣6",
      "1,2,3",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 636,
    "question": "```kotlin\nfun greet(name: String = \"Guest\") = \"Hi, $name\"\nfun main(){\n  println(greet())\n}\n```\n",
    "answer": "Hi, Guest",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "Hi, Guest",
      "Hi,",
      "Guest",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 637,
    "question": "```kotlin\nfun main(){\n  val x = \"1\".toInt() + 2\n  println(x)\n}\n```\n",
    "answer": "3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "12",
      "3",
      "Compilation error",
      "1"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 638,
    "question": "```kotlin\nfun main(){\n  val x = listOf(1,2,3).first()\n  println(x)\n}\n```\n",
    "answer": "1",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1",
      "3",
      "null",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 639,
    "question": "```kotlin\nfun main(){\n  val x = \"a\".repeat(3)\n  println(x)\n}\n```\n",
    "answer": "aaa",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "aaa",
      "a␣a␣a",
      "3a",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 640,
    "question": "```kotlin\nfun main(){\n  val x = (1..4).fold(0) { acc, v -> acc + v }\n  println(x)\n}\n```\n",
    "answer": "10",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "10",
      "24",
      "0",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 641,
    "question": "```kotlin\nfun main(){\n  val list = listOf(\"a\",\"b\",\"c\")\n  println(list.subList(0,2).joinToString())\n}\n```\n",
    "answer": "a,␣b",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "a,␣b",
      "a␣b",
      "a,b",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 642,
    "question": "```kotlin\nfun main(){\n  val x = 2.5\n  println(x is Double)\n}\n```\n",
    "answer": "true",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "true",
      "false",
      "Compilation error",
      "2.5"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 643,
    "question": "```kotlin\nfun main(){\n  val s = \"abc\"\n  println(s[1])\n}\n```\n",
    "answer": "b",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "a",
      "b",
      "c",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 644,
    "question": "```kotlin\nfun main(){\n  val res = listOf(1,2,3).any { it > 2 }\n  println(res)\n}\n```\n",
    "answer": "true",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "true",
      "false",
      "Compilation error",
      "1"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 645,
    "question": "```kotlin\nfun main(){\n  val x = (1..3).joinToString(\"-\")\n  println(x)\n}\n```\n",
    "answer": "1-2-3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1-2-3",
      "1,␣2,␣3",
      "123",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 646,
    "question": "```kotlin\nfun main(){\n  val t = Triple(1,2,3)\n  println(t.third)\n}\n```\n",
    "answer": "3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1",
      "2",
      "3",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 647,
    "question": "```java\npublic class Main {\n  public static void main(String[] args){\n    System.out.println(1 + 2);\n  }\n}\n```\n",
    "answer": "3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "3",
      "12",
      "Compilation error",
      "0"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 648,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    String s = \"hi\";\n    System.out.println(s.length());\n  }\n}\n```\n",
    "answer": "2",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "2",
      "hi",
      "Compilation error",
      "0"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 649,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int[] a = {1,2,3};\n    System.out.println(a.length);\n  }\n}\n```\n",
    "answer": "3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "3",
      "2",
      "Compilation error",
      "0"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 650,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    System.out.println(\"A\" + \"B\");\n  }\n}\n```\n",
    "answer": "AB",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "AB",
      "A␣B",
      "Compilation error",
      "A+B"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 651,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int a = 5; int b = 2;\n    System.out.println(a / b);\n  }\n}\n```\n",
    "answer": "2",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "2",
      "2.5",
      "3",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 652,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    double a = 5; double b = 2;\n    System.out.println(a / b);\n  }\n}\n```\n",
    "answer": "2.5",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "2.5",
      "2",
      "Compilation error",
      "3.0"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 653,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    String[] s = {\"x\",\"y\"};\n    for(String t: s) System.out.print(t);\n  }\n}\n```\n",
    "answer": "хy",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "хy",
      "x␣y",
      "x\ny",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 654,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int x = 0;\n    if(x==0) x = 1;\n    System.out.println(x);\n  }\n}\n```\n",
    "answer": "1",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "0",
      "1",
      "Compilation error",
      "null"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 655,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    System.out.println(\"\".isEmpty());\n  }\n}\n```\n",
    "answer": "true",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "true",
      "false",
      "Compilation error",
      "null"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 656,
    "question": "```java\nimport java.util.*;\npublic class Main{\n  public static void main(String[] args){\n    List<Integer> l = Arrays.asList(1,2,3);\n    System.out.println(l.get(2));\n  }\n}\n```\n",
    "answer": "3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "2",
      "3",
      "IndexOutOfBoundsException",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 657,
    "question": "```java\npublic class Main{\n  static int f(int x){ return x * x; }\n  public static void main(String[] args){\n    System.out.println(f(4));\n  }\n}\n```\n",
    "answer": "16",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "8",
      "16",
      "4",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 658,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    boolean b = (3 > 2);\n    System.out.println(b);\n  }\n}\n```\n",
    "answer": "true",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "true",
      "false",
      "Compilation error",
      "1"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 659,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    String s = \"abc\";\n    System.out.println(s.charAt(1));\n  }\n}\n```\n",
    "answer": "b",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "a",
      "b",
      "c",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 660,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int[] a = {1,2,3};\n    int sum = 0; for(int v: a) sum += v;\n    System.out.println(sum);\n  }\n}\n```\n",
    "answer": "6",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "6",
      "123",
      "0",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 661,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    String s = \"x\" + 1;\n    System.out.println(s);\n  }\n}\n```\n",
    "answer": "x1",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "x1",
      "x␣1",
      "Compilation error",
      "1x"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 662,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    System.out.println(Math.max(3,7));\n  }\n}\n```\n",
    "answer": "7",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "3",
      "7",
      "Compilation error",
      "0"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 663,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int a = 1;\n    a += 2;\n    System.out.println(a);\n  }\n}\n```\n",
    "answer": "3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "3",
      "2",
      "1",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 664,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    System.out.println(\"Hello\".toUpperCase());\n  }\n}\n```\n",
    "answer": "HЕLLO",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "HЕLLO",
      "hello",
      "Compilation error",
      "Hello"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 665,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int x = 5 % 2;\n    System.out.println(x);\n  }\n}\n```\n",
    "answer": "1",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "0",
      "1",
      "2",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 666,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    double d = 2.0/4.0;\n    System.out.println(d);\n  }\n}\n```\n",
    "answer": "0.5",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "0.5",
      "0",
      "0.50",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 667,
    "question": "```java\npublic class Main{\n  public static int add(int a, int b){ return a + b; }\n  public static void main(String[] args){\n    System.out.println(add(2,3));\n  }\n}\n```\n",
    "answer": "5",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "5",
      "23",
      "Compilation error",
      "0"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 668,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    String s = null;\n    System.out.println(String.valueOf(s));\n  }\n}\n```\n",
    "answer": "null",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "null",
      "Compilation error",
      "\"null\"",
      "",
      "NPE at runtime"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 669,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    boolean b = true && false;\n    System.out.println(b);\n  }\n}\n```\n",
    "answer": "false",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "true",
      "false",
      "Compilation error",
      "0"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 670,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int x = 1;\n    System.out.println(++x);\n  }\n}\n```\n",
    "answer": "2",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1",
      "2",
      "Compilation error",
      "0"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 671,
    "question": "```java\nimport java.util.*;\npublic class Main{\n  public static void main(String[] args){\n    List<Integer> l = new ArrayList<>();\n    l.add(5); l.add(6);\n    System.out.println(l.get(0));\n  }\n}\n```\n",
    "answer": "5",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "5",
      "6",
      "Compilation error",
      "0"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 672,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    for(int i=0;i<3;i++) System.out.print(i);\n  }\n}\n```\n",
    "answer": "012",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "012",
      "123",
      "0␣1␣2",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 673,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    char c = 'A';\n    System.out.println((int)c);\n  }\n}\n```\n",
    "answer": "65",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "65",
      "A",
      "Compilation error",
      "97"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 674,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    String s = \"ab\";\n    System.out.println(s.concat(\"c\"));\n  }\n}\n```\n",
    "answer": "abc",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "abc",
      "ab",
      "Compilation error",
      "a␣bc"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 675,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int a = 2, b = 3;\n    System.out.println(a * b);\n  }\n}\n```\n",
    "answer": "6",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "5",
      "6",
      "23",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 676,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int[] a = new int[2];\n    System.out.println(a[0]);\n  }\n}\n```\n",
    "answer": "0",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "0",
      "null",
      "Compilation error",
      "IndexOutOfBoundsException"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 677,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    System.out.println(Math.min(4,9));\n  }\n}\n```\n",
    "answer": "4",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "4",
      "9",
      "Compilation error",
      "0"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 678,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    String s = \"abc\";\n    System.out.println(s.substring(1,3));\n  }\n}\n```\n",
    "answer": "bc",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "b",
      "bc",
      "abc",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 679,
    "question": "```java\npublic class Main{\n  static int fact(int n){ if(n<=1) return 1; return n*fact(n-1); }\n  public static void main(String[] args){ System.out.println(fact(4)); }\n}\n```\n",
    "answer": "24",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "24",
      "10",
      "16",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 680,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int x = 10;\n    System.out.println(x >> 1);\n  }\n}\n```\n",
    "answer": "5",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "5",
      "10",
      "0",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 681,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    String s = String.valueOf(123);\n    System.out.println(s);\n  }\n}\n```\n",
    "answer": "123",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "123",
      "Compilation error",
      "\"123\"",
      "null"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 682,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int a = 7;\n    System.out.println(a%4==3);\n  }\n}\n```\n",
    "answer": "true",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "true",
      "false",
      "Compilation error",
      "3"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 683,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    String s = \"␣x␣\";\n    System.out.println(s.trim());\n  }\n}\n```\n",
    "answer": "x",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "␣x␣",
      "x",
      "Compilation error",
      "\"x\""
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 684,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int a = 2;\n    a *= 3;\n    System.out.println(a);\n  }\n}\n```\n",
    "answer": "6",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "5",
      "6",
      "2",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 685,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    System.out.println(java.util.Arrays.toString(new int[]{1,2}));\n  }\n}\n```\n",
    "answer": "[1,␣2]",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "[1,␣2]",
      "[1,2]",
      "1,2",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 686,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    String s = \"a\" + 2 + 3;\n    System.out.println(s);\n  }\n}\n```\n",
    "answer": "a23",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "a23",
      "a5",
      "Compilation error",
      "23a"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 687,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    System.out.println(Math.pow(2,3));\n  }\n}\n```\n",
    "answer": "8.0",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "8.0",
      "8",
      "6",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 688,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    String s = null;\n    System.out.println(s == null);\n  }\n}\n```\n",
    "answer": "true",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "true",
      "false",
      "Compilation error",
      "NullPointerException at runtime"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 689,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int a = Integer.parseInt(\"10\");\n    System.out.println(a+5);\n  }\n}\n```\n",
    "answer": "15",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "15",
      "105",
      "Compilation error",
      "10"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 690,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    System.out.println((int)Math.round(2.6));\n  }\n}\n```\n",
    "answer": "3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "2",
      "3",
      "Compilation error",
      "2.6"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 691,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int x = 1;\n    if(x>0) System.out.println(\"pos\"); else System.out.println(\"neg\");\n  }\n}\n```\n",
    "answer": "pos",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "pos",
      "neg",
      "Compilation error",
      "null"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 692,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    String s = \"abc\".replace(\"b\",\"x\");\n    System.out.println(s);\n  }\n}\n```\n",
    "answer": "axc",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "axc",
      "abc",
      "Compilation error",
      "a␣c"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 693,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int[] a = {1,2,3};\n    System.out.println(a[2]);\n  }\n}\n```\n",
    "answer": "3",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "3",
      "2",
      "IndexOutOfBoundsException",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 694,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    System.out.println(Boolean.toString(false));\n  }\n}\n```\n",
    "answer": "false",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "false",
      "true",
      "Compilation error",
      "0"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 695,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    int a = 1; int b = 2;\n    System.out.println(a<b ? a : b);\n  }\n}\n```\n",
    "answer": "1",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1",
      "2",
      "Compilation error",
      "true"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 696,
    "question": "```java\npublic class Main{\n  public static void main(String[] args){\n    String s = String.format(\"%d-%s\", 10, \"x\");\n    System.out.println(s);\n  }\n}\n```\n",
    "answer": "10-x",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "10-x",
      "10␣x",
      "Compilation error",
      "10-"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 697,
    "question": "```kotlin\nfun main() {\n  val x = 3\n  val y = 2\n  println(x / y.toDouble())\n}\n```\n\n",
    "answer": "1.5",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "1",
      "1.0",
      "1.5",
      "2",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 698,
    "question": "```kotlin\nfun main() {\n  val str = \"Kotlin\"\n  println(str.reversed().substring(2, 5))\n}\n```\n\n",
    "answer": "tlo",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "nil",
      "tol",
      "tlo",
      "otl",
      "kti"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 699,
    "question": "```kotlin\nfun main() {\n  val x = null\n  println(x ?: \"default\")\n}\n```\n\n",
    "answer": "default",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "null",
      "default",
      "Compilation error",
      "\"null\"",
      "Unit"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 700,
    "question": "```kotlin\nfun test(): Int {\n  return try {\n    10 / 0\n  } catch (e: Exception) {\n    5\n  } finally {\n    3\n  }\n}\n\nfun main() {\n  println(test())\n}\n```\n\n",
    "answer": "5",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "0",
      "5",
      "3",
      "Exception",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 701,
    "question": "```kotlin\nfun main() {\n  val x = listOf(1, 2, 3)\n  println(x.map { it * it }.filter { it % 2 == 1 })\n}\n```\n\n",
    "answer": "[1, 9]",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "[1, 4, 9]",
      "[4]",
      "[1, 9]",
      "[9]",
      "[]"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 702,
    "question": "```kotlin\nfun main() {\n  val text = \"abc\"\n  println(text.getOrNull(5) ?: 'Z')\n}\n```\n\n",
    "answer": "Z",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "Z",
      "c",
      "null",
      "IndexOutOfBoundsException",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 703,
    "question": "```kotlin\nfun main() {\n  val a = arrayOf(1, 2, 3)\n  val b = a.copyOf()\n  b[0] = 9\n  println(a[0])\n}\n```\n\n",
    "answer": "1",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "9",
      "1",
      "2",
      "Compilation error",
      "ArrayIndexOutOfBoundsException"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 704,
    "question": "```kotlin\nfun main() {\n  val x = listOf(1, 2, 3)\n  println(x.drop(1).take(1))\n}\n```\n\n",
    "answer": "[2]",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "[1]",
      "[2]",
      "[3]",
      "[]",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 705,
    "question": "```kotlin\nfun main() {\n  val result = buildString {\n    append(\"A\")\n    append(\"B\")\n  }\n  println(result)\n}\n```\n\n",
    "answer": "AB",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "BA",
      "AB",
      "A",
      "B",
      "Compilation error"
    ],
    "category": "KOTLIN_CODE"
  },
  {
    "id": 706,
    "question": "```java\npublic class Test {\n  public static void main(String[] args) {\n    int x = 10;\n    System.out.println(x++ + ++x);\n  }\n}\n```\n\n",
    "answer": "22",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "21",
      "22",
      "23",
      "Compilation error",
      "10"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 707,
    "question": "```java\npublic class Test {\n  public static void main(String[] args) {\n    String s = null;\n    System.out.println(s == null ? \"Null\" : s.length());\n  }\n}\n```\n\n",
    "answer": "Null",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "NullPointerException",
      "0",
      "Null",
      "Compilation error",
      "null"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 708,
    "question": "```java\npublic class Test {\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3};\n    System.out.println(arr[3]);\n  }\n}\n```\n\n",
    "answer": "ArrayIndexOutOfBoundsException",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "3",
      "Compilation error",
      "ArrayIndexOutOfBoundsException",
      "0",
      "null"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 709,
    "question": "```java\npublic class Test {\n  public static void main(String[] args) {\n    int a = 5, b = 10;\n    System.out.println(a > b ? a : b);\n  }\n}\n```\n\n",
    "answer": "10",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "5",
      "10",
      "Compilation error",
      "true",
      "false"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 710,
    "question": "```java\npublic class Test {\n  public static void main(String[] args) {\n    String s = \"abc\";\n    System.out.println(s.toUpperCase().charAt(1));\n  }\n}\n```\n\n",
    "answer": "В",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "a",
      "b",
      "В",
      "C",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 711,
    "question": "```java\npublic class Test {\n  public static void main(String[] args) {\n    int x = 2;\n    System.out.println(Math.pow(x, 3));\n  }\n}\n```\n\n",
    "answer": "8.0",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "6",
      "8",
      "8.0",
      "Compilation error",
      "2^3"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 712,
    "question": "```java\npublic class Test {\n  static void f(Integer i) { System.out.println(\"Integer\"); }\n  static void f(long l) { System.out.println(\"long\"); }\n  public static void main(String[] args) {\n    f(5);\n  }\n}\n```\n\n",
    "answer": "long",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "Integer",
      "long",
      "Compilation error",
      "Runtime error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 713,
    "question": "```java\npublic class Test {\n  public static void main(String[] args) {\n    String s1 = \"abc\";\n    String s2 = new String(\"abc\");\n    System.out.println(s1 == s2);\n  }\n}\n```\n\n",
    "answer": "false",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "true",
      "false",
      "Compilation error",
      "Runtime error"
    ],
    "category": "JAVA_CODE"
  },
  {
    "id": 714,
    "question": "```java\npublic class Test {\n  public static void main(String[] args) {\n    for (int i = 0; i < 3; i++) {\n      if (i == 1) continue;\n      System.out.print(i);\n    }\n  }\n}\n```\n\n",
    "answer": "02",
    "type": "CODE_SNIPPET_OUTPUT",
    "fakeOptions": [
      "012",
      "02",
      "1",
      "0",
      "Compilation error"
    ],
    "category": "JAVA_CODE"
  }
]